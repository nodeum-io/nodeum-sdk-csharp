/* 
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Io.Nodeum.Sdk.Client.OpenAPIDateConverter;

namespace Io.Nodeum.Sdk.Model
{
    /// <summary>
    /// TapeStat
    /// </summary>
    [DataContract]
    public partial class TapeStat :  IEquatable<TapeStat>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TapeStat" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public TapeStat()
        {
        }
        
        /// <summary>
        /// Gets or Sets LogTime
        /// </summary>
        [DataMember(Name="log_time", EmitDefaultValue=false)]
        public string LogTime { get; private set; }

        /// <summary>
        /// Gets or Sets Barcode
        /// </summary>
        [DataMember(Name="barcode", EmitDefaultValue=false)]
        public string Barcode { get; private set; }

        /// <summary>
        /// Gets or Sets Mounts
        /// </summary>
        [DataMember(Name="mounts", EmitDefaultValue=false)]
        public int Mounts { get; private set; }

        /// <summary>
        /// Gets or Sets DatasetsWritten
        /// </summary>
        [DataMember(Name="datasets_written", EmitDefaultValue=false)]
        public int DatasetsWritten { get; private set; }

        /// <summary>
        /// Gets or Sets DatasetsRead
        /// </summary>
        [DataMember(Name="datasets_read", EmitDefaultValue=false)]
        public int DatasetsRead { get; private set; }

        /// <summary>
        /// Gets or Sets RecoveredWriteDataErrors
        /// </summary>
        [DataMember(Name="recovered_write_data_errors", EmitDefaultValue=false)]
        public int RecoveredWriteDataErrors { get; private set; }

        /// <summary>
        /// Gets or Sets UnrecoveredWriteDataErrors
        /// </summary>
        [DataMember(Name="unrecovered_write_data_errors", EmitDefaultValue=false)]
        public int UnrecoveredWriteDataErrors { get; private set; }

        /// <summary>
        /// Gets or Sets WriteServoErrors
        /// </summary>
        [DataMember(Name="write_servo_errors", EmitDefaultValue=false)]
        public int WriteServoErrors { get; private set; }

        /// <summary>
        /// Gets or Sets UnrecoveredWriteServoErrors
        /// </summary>
        [DataMember(Name="unrecovered_write_servo_errors", EmitDefaultValue=false)]
        public int UnrecoveredWriteServoErrors { get; private set; }

        /// <summary>
        /// Gets or Sets RecoveredReadErrors
        /// </summary>
        [DataMember(Name="recovered_read_errors", EmitDefaultValue=false)]
        public int RecoveredReadErrors { get; private set; }

        /// <summary>
        /// Gets or Sets UnrecoveredReadErrors
        /// </summary>
        [DataMember(Name="unrecovered_read_errors", EmitDefaultValue=false)]
        public int UnrecoveredReadErrors { get; private set; }

        /// <summary>
        /// Gets or Sets LastMountUnrecoveredWriteErrors
        /// </summary>
        [DataMember(Name="last_mount_unrecovered_write_errors", EmitDefaultValue=false)]
        public int LastMountUnrecoveredWriteErrors { get; private set; }

        /// <summary>
        /// Gets or Sets LastMountUnrecoveredReadErrors
        /// </summary>
        [DataMember(Name="last_mount_unrecovered_read_errors", EmitDefaultValue=false)]
        public int LastMountUnrecoveredReadErrors { get; private set; }

        /// <summary>
        /// Gets or Sets LastMountMbytesWritten
        /// </summary>
        [DataMember(Name="last_mount_mbytes_written", EmitDefaultValue=false)]
        public int LastMountMbytesWritten { get; private set; }

        /// <summary>
        /// Gets or Sets LastMountMbytesRead
        /// </summary>
        [DataMember(Name="last_mount_mbytes_read", EmitDefaultValue=false)]
        public int LastMountMbytesRead { get; private set; }

        /// <summary>
        /// Gets or Sets LifetimeMbytesWritten
        /// </summary>
        [DataMember(Name="lifetime_mbytes_written", EmitDefaultValue=false)]
        public int LifetimeMbytesWritten { get; private set; }

        /// <summary>
        /// Gets or Sets LifetimeMbytesRead
        /// </summary>
        [DataMember(Name="lifetime_mbytes_read", EmitDefaultValue=false)]
        public int LifetimeMbytesRead { get; private set; }

        /// <summary>
        /// Gets or Sets LastLoadWriteCompressionRatio
        /// </summary>
        [DataMember(Name="last_load_write_compression_ratio", EmitDefaultValue=false)]
        public int LastLoadWriteCompressionRatio { get; private set; }

        /// <summary>
        /// Gets or Sets LastLoadReadCompressionRatio
        /// </summary>
        [DataMember(Name="last_load_read_compression_ratio", EmitDefaultValue=false)]
        public int LastLoadReadCompressionRatio { get; private set; }

        /// <summary>
        /// Gets or Sets MediumMountTime
        /// </summary>
        [DataMember(Name="medium_mount_time", EmitDefaultValue=false)]
        public int MediumMountTime { get; private set; }

        /// <summary>
        /// Gets or Sets MediumReadyTime
        /// </summary>
        [DataMember(Name="medium_ready_time", EmitDefaultValue=false)]
        public int MediumReadyTime { get; private set; }

        /// <summary>
        /// Gets or Sets TotalNativeCapacity
        /// </summary>
        [DataMember(Name="total_native_capacity", EmitDefaultValue=false)]
        public int TotalNativeCapacity { get; private set; }

        /// <summary>
        /// Gets or Sets TotalUsedNativeCapacity
        /// </summary>
        [DataMember(Name="total_used_native_capacity", EmitDefaultValue=false)]
        public int TotalUsedNativeCapacity { get; private set; }

        /// <summary>
        /// Gets or Sets WriteProtect
        /// </summary>
        [DataMember(Name="write_protect", EmitDefaultValue=false)]
        public int WriteProtect { get; private set; }

        /// <summary>
        /// Gets or Sets Worm
        /// </summary>
        [DataMember(Name="worm", EmitDefaultValue=false)]
        public int Worm { get; private set; }

        /// <summary>
        /// Gets or Sets BeginningOfMediumPasses
        /// </summary>
        [DataMember(Name="beginning_of_medium_passes", EmitDefaultValue=false)]
        public int BeginningOfMediumPasses { get; private set; }

        /// <summary>
        /// Gets or Sets MiddleOfTapePasses
        /// </summary>
        [DataMember(Name="middle_of_tape_passes", EmitDefaultValue=false)]
        public int MiddleOfTapePasses { get; private set; }

        /// <summary>
        /// Gets or Sets ReadCompressionRatio
        /// </summary>
        [DataMember(Name="read_compression_ratio", EmitDefaultValue=false)]
        public int ReadCompressionRatio { get; private set; }

        /// <summary>
        /// Gets or Sets WriteCompressionRatio
        /// </summary>
        [DataMember(Name="write_compression_ratio", EmitDefaultValue=false)]
        public int WriteCompressionRatio { get; private set; }

        /// <summary>
        /// Gets or Sets MbytesTransferredToAppClient
        /// </summary>
        [DataMember(Name="mbytes_transferred_to_app_client", EmitDefaultValue=false)]
        public int MbytesTransferredToAppClient { get; private set; }

        /// <summary>
        /// Gets or Sets BytesTransferredToAppClient
        /// </summary>
        [DataMember(Name="bytes_transferred_to_app_client", EmitDefaultValue=false)]
        public int BytesTransferredToAppClient { get; private set; }

        /// <summary>
        /// Gets or Sets MbytesReadFromMedium
        /// </summary>
        [DataMember(Name="mbytes_read_from_medium", EmitDefaultValue=false)]
        public int MbytesReadFromMedium { get; private set; }

        /// <summary>
        /// Gets or Sets BytesReadFromMedium
        /// </summary>
        [DataMember(Name="bytes_read_from_medium", EmitDefaultValue=false)]
        public int BytesReadFromMedium { get; private set; }

        /// <summary>
        /// Gets or Sets MbytesTransferredFromAppClient
        /// </summary>
        [DataMember(Name="mbytes_transferred_from_app_client", EmitDefaultValue=false)]
        public int MbytesTransferredFromAppClient { get; private set; }

        /// <summary>
        /// Gets or Sets BytesTransferredFromAppClient
        /// </summary>
        [DataMember(Name="bytes_transferred_from_app_client", EmitDefaultValue=false)]
        public int BytesTransferredFromAppClient { get; private set; }

        /// <summary>
        /// Gets or Sets MbytesWrittenToMedium
        /// </summary>
        [DataMember(Name="mbytes_written_to_medium", EmitDefaultValue=false)]
        public int MbytesWrittenToMedium { get; private set; }

        /// <summary>
        /// Gets or Sets BytesWrittenToMedium
        /// </summary>
        [DataMember(Name="bytes_written_to_medium", EmitDefaultValue=false)]
        public int BytesWrittenToMedium { get; private set; }

        /// <summary>
        /// Gets or Sets DataCompressionEnabled
        /// </summary>
        [DataMember(Name="data_compression_enabled", EmitDefaultValue=false)]
        public int DataCompressionEnabled { get; private set; }

        /// <summary>
        /// Gets or Sets WriteRetries
        /// </summary>
        [DataMember(Name="write_retries", EmitDefaultValue=false)]
        public int WriteRetries { get; private set; }

        /// <summary>
        /// Gets or Sets WritePerms
        /// </summary>
        [DataMember(Name="write_perms", EmitDefaultValue=false)]
        public int WritePerms { get; private set; }

        /// <summary>
        /// Gets or Sets SuspendedWrites
        /// </summary>
        [DataMember(Name="suspended_writes", EmitDefaultValue=false)]
        public int SuspendedWrites { get; private set; }

        /// <summary>
        /// Gets or Sets FatalSuspendedWrites
        /// </summary>
        [DataMember(Name="fatal_suspended_writes", EmitDefaultValue=false)]
        public int FatalSuspendedWrites { get; private set; }

        /// <summary>
        /// Gets or Sets ReadRetries
        /// </summary>
        [DataMember(Name="read_retries", EmitDefaultValue=false)]
        public int ReadRetries { get; private set; }

        /// <summary>
        /// Gets or Sets ReadPerms
        /// </summary>
        [DataMember(Name="read_perms", EmitDefaultValue=false)]
        public int ReadPerms { get; private set; }

        /// <summary>
        /// Gets or Sets SuspendedReads
        /// </summary>
        [DataMember(Name="suspended_reads", EmitDefaultValue=false)]
        public int SuspendedReads { get; private set; }

        /// <summary>
        /// Gets or Sets FatalSuspendedReads
        /// </summary>
        [DataMember(Name="fatal_suspended_reads", EmitDefaultValue=false)]
        public int FatalSuspendedReads { get; private set; }

        /// <summary>
        /// Gets or Sets Partition0RemainingCapacity
        /// </summary>
        [DataMember(Name="partition_0_remaining_capacity", EmitDefaultValue=false)]
        public int Partition0RemainingCapacity { get; private set; }

        /// <summary>
        /// Gets or Sets Partition1RemainingCapacity
        /// </summary>
        [DataMember(Name="partition_1_remaining_capacity", EmitDefaultValue=false)]
        public int Partition1RemainingCapacity { get; private set; }

        /// <summary>
        /// Gets or Sets Partition0MaximumCapacity
        /// </summary>
        [DataMember(Name="partition_0_maximum_capacity", EmitDefaultValue=false)]
        public int Partition0MaximumCapacity { get; private set; }

        /// <summary>
        /// Gets or Sets Partition1MaximumCapacity
        /// </summary>
        [DataMember(Name="partition_1_maximum_capacity", EmitDefaultValue=false)]
        public int Partition1MaximumCapacity { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TapeStat {\n");
            sb.Append("  LogTime: ").Append(LogTime).Append("\n");
            sb.Append("  Barcode: ").Append(Barcode).Append("\n");
            sb.Append("  Mounts: ").Append(Mounts).Append("\n");
            sb.Append("  DatasetsWritten: ").Append(DatasetsWritten).Append("\n");
            sb.Append("  DatasetsRead: ").Append(DatasetsRead).Append("\n");
            sb.Append("  RecoveredWriteDataErrors: ").Append(RecoveredWriteDataErrors).Append("\n");
            sb.Append("  UnrecoveredWriteDataErrors: ").Append(UnrecoveredWriteDataErrors).Append("\n");
            sb.Append("  WriteServoErrors: ").Append(WriteServoErrors).Append("\n");
            sb.Append("  UnrecoveredWriteServoErrors: ").Append(UnrecoveredWriteServoErrors).Append("\n");
            sb.Append("  RecoveredReadErrors: ").Append(RecoveredReadErrors).Append("\n");
            sb.Append("  UnrecoveredReadErrors: ").Append(UnrecoveredReadErrors).Append("\n");
            sb.Append("  LastMountUnrecoveredWriteErrors: ").Append(LastMountUnrecoveredWriteErrors).Append("\n");
            sb.Append("  LastMountUnrecoveredReadErrors: ").Append(LastMountUnrecoveredReadErrors).Append("\n");
            sb.Append("  LastMountMbytesWritten: ").Append(LastMountMbytesWritten).Append("\n");
            sb.Append("  LastMountMbytesRead: ").Append(LastMountMbytesRead).Append("\n");
            sb.Append("  LifetimeMbytesWritten: ").Append(LifetimeMbytesWritten).Append("\n");
            sb.Append("  LifetimeMbytesRead: ").Append(LifetimeMbytesRead).Append("\n");
            sb.Append("  LastLoadWriteCompressionRatio: ").Append(LastLoadWriteCompressionRatio).Append("\n");
            sb.Append("  LastLoadReadCompressionRatio: ").Append(LastLoadReadCompressionRatio).Append("\n");
            sb.Append("  MediumMountTime: ").Append(MediumMountTime).Append("\n");
            sb.Append("  MediumReadyTime: ").Append(MediumReadyTime).Append("\n");
            sb.Append("  TotalNativeCapacity: ").Append(TotalNativeCapacity).Append("\n");
            sb.Append("  TotalUsedNativeCapacity: ").Append(TotalUsedNativeCapacity).Append("\n");
            sb.Append("  WriteProtect: ").Append(WriteProtect).Append("\n");
            sb.Append("  Worm: ").Append(Worm).Append("\n");
            sb.Append("  BeginningOfMediumPasses: ").Append(BeginningOfMediumPasses).Append("\n");
            sb.Append("  MiddleOfTapePasses: ").Append(MiddleOfTapePasses).Append("\n");
            sb.Append("  ReadCompressionRatio: ").Append(ReadCompressionRatio).Append("\n");
            sb.Append("  WriteCompressionRatio: ").Append(WriteCompressionRatio).Append("\n");
            sb.Append("  MbytesTransferredToAppClient: ").Append(MbytesTransferredToAppClient).Append("\n");
            sb.Append("  BytesTransferredToAppClient: ").Append(BytesTransferredToAppClient).Append("\n");
            sb.Append("  MbytesReadFromMedium: ").Append(MbytesReadFromMedium).Append("\n");
            sb.Append("  BytesReadFromMedium: ").Append(BytesReadFromMedium).Append("\n");
            sb.Append("  MbytesTransferredFromAppClient: ").Append(MbytesTransferredFromAppClient).Append("\n");
            sb.Append("  BytesTransferredFromAppClient: ").Append(BytesTransferredFromAppClient).Append("\n");
            sb.Append("  MbytesWrittenToMedium: ").Append(MbytesWrittenToMedium).Append("\n");
            sb.Append("  BytesWrittenToMedium: ").Append(BytesWrittenToMedium).Append("\n");
            sb.Append("  DataCompressionEnabled: ").Append(DataCompressionEnabled).Append("\n");
            sb.Append("  WriteRetries: ").Append(WriteRetries).Append("\n");
            sb.Append("  WritePerms: ").Append(WritePerms).Append("\n");
            sb.Append("  SuspendedWrites: ").Append(SuspendedWrites).Append("\n");
            sb.Append("  FatalSuspendedWrites: ").Append(FatalSuspendedWrites).Append("\n");
            sb.Append("  ReadRetries: ").Append(ReadRetries).Append("\n");
            sb.Append("  ReadPerms: ").Append(ReadPerms).Append("\n");
            sb.Append("  SuspendedReads: ").Append(SuspendedReads).Append("\n");
            sb.Append("  FatalSuspendedReads: ").Append(FatalSuspendedReads).Append("\n");
            sb.Append("  Partition0RemainingCapacity: ").Append(Partition0RemainingCapacity).Append("\n");
            sb.Append("  Partition1RemainingCapacity: ").Append(Partition1RemainingCapacity).Append("\n");
            sb.Append("  Partition0MaximumCapacity: ").Append(Partition0MaximumCapacity).Append("\n");
            sb.Append("  Partition1MaximumCapacity: ").Append(Partition1MaximumCapacity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TapeStat);
        }

        /// <summary>
        /// Returns true if TapeStat instances are equal
        /// </summary>
        /// <param name="input">Instance of TapeStat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TapeStat input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LogTime == input.LogTime ||
                    (this.LogTime != null &&
                    this.LogTime.Equals(input.LogTime))
                ) && 
                (
                    this.Barcode == input.Barcode ||
                    (this.Barcode != null &&
                    this.Barcode.Equals(input.Barcode))
                ) && 
                (
                    this.Mounts == input.Mounts ||
                    this.Mounts.Equals(input.Mounts)
                ) && 
                (
                    this.DatasetsWritten == input.DatasetsWritten ||
                    this.DatasetsWritten.Equals(input.DatasetsWritten)
                ) && 
                (
                    this.DatasetsRead == input.DatasetsRead ||
                    this.DatasetsRead.Equals(input.DatasetsRead)
                ) && 
                (
                    this.RecoveredWriteDataErrors == input.RecoveredWriteDataErrors ||
                    this.RecoveredWriteDataErrors.Equals(input.RecoveredWriteDataErrors)
                ) && 
                (
                    this.UnrecoveredWriteDataErrors == input.UnrecoveredWriteDataErrors ||
                    this.UnrecoveredWriteDataErrors.Equals(input.UnrecoveredWriteDataErrors)
                ) && 
                (
                    this.WriteServoErrors == input.WriteServoErrors ||
                    this.WriteServoErrors.Equals(input.WriteServoErrors)
                ) && 
                (
                    this.UnrecoveredWriteServoErrors == input.UnrecoveredWriteServoErrors ||
                    this.UnrecoveredWriteServoErrors.Equals(input.UnrecoveredWriteServoErrors)
                ) && 
                (
                    this.RecoveredReadErrors == input.RecoveredReadErrors ||
                    this.RecoveredReadErrors.Equals(input.RecoveredReadErrors)
                ) && 
                (
                    this.UnrecoveredReadErrors == input.UnrecoveredReadErrors ||
                    this.UnrecoveredReadErrors.Equals(input.UnrecoveredReadErrors)
                ) && 
                (
                    this.LastMountUnrecoveredWriteErrors == input.LastMountUnrecoveredWriteErrors ||
                    this.LastMountUnrecoveredWriteErrors.Equals(input.LastMountUnrecoveredWriteErrors)
                ) && 
                (
                    this.LastMountUnrecoveredReadErrors == input.LastMountUnrecoveredReadErrors ||
                    this.LastMountUnrecoveredReadErrors.Equals(input.LastMountUnrecoveredReadErrors)
                ) && 
                (
                    this.LastMountMbytesWritten == input.LastMountMbytesWritten ||
                    this.LastMountMbytesWritten.Equals(input.LastMountMbytesWritten)
                ) && 
                (
                    this.LastMountMbytesRead == input.LastMountMbytesRead ||
                    this.LastMountMbytesRead.Equals(input.LastMountMbytesRead)
                ) && 
                (
                    this.LifetimeMbytesWritten == input.LifetimeMbytesWritten ||
                    this.LifetimeMbytesWritten.Equals(input.LifetimeMbytesWritten)
                ) && 
                (
                    this.LifetimeMbytesRead == input.LifetimeMbytesRead ||
                    this.LifetimeMbytesRead.Equals(input.LifetimeMbytesRead)
                ) && 
                (
                    this.LastLoadWriteCompressionRatio == input.LastLoadWriteCompressionRatio ||
                    this.LastLoadWriteCompressionRatio.Equals(input.LastLoadWriteCompressionRatio)
                ) && 
                (
                    this.LastLoadReadCompressionRatio == input.LastLoadReadCompressionRatio ||
                    this.LastLoadReadCompressionRatio.Equals(input.LastLoadReadCompressionRatio)
                ) && 
                (
                    this.MediumMountTime == input.MediumMountTime ||
                    this.MediumMountTime.Equals(input.MediumMountTime)
                ) && 
                (
                    this.MediumReadyTime == input.MediumReadyTime ||
                    this.MediumReadyTime.Equals(input.MediumReadyTime)
                ) && 
                (
                    this.TotalNativeCapacity == input.TotalNativeCapacity ||
                    this.TotalNativeCapacity.Equals(input.TotalNativeCapacity)
                ) && 
                (
                    this.TotalUsedNativeCapacity == input.TotalUsedNativeCapacity ||
                    this.TotalUsedNativeCapacity.Equals(input.TotalUsedNativeCapacity)
                ) && 
                (
                    this.WriteProtect == input.WriteProtect ||
                    this.WriteProtect.Equals(input.WriteProtect)
                ) && 
                (
                    this.Worm == input.Worm ||
                    this.Worm.Equals(input.Worm)
                ) && 
                (
                    this.BeginningOfMediumPasses == input.BeginningOfMediumPasses ||
                    this.BeginningOfMediumPasses.Equals(input.BeginningOfMediumPasses)
                ) && 
                (
                    this.MiddleOfTapePasses == input.MiddleOfTapePasses ||
                    this.MiddleOfTapePasses.Equals(input.MiddleOfTapePasses)
                ) && 
                (
                    this.ReadCompressionRatio == input.ReadCompressionRatio ||
                    this.ReadCompressionRatio.Equals(input.ReadCompressionRatio)
                ) && 
                (
                    this.WriteCompressionRatio == input.WriteCompressionRatio ||
                    this.WriteCompressionRatio.Equals(input.WriteCompressionRatio)
                ) && 
                (
                    this.MbytesTransferredToAppClient == input.MbytesTransferredToAppClient ||
                    this.MbytesTransferredToAppClient.Equals(input.MbytesTransferredToAppClient)
                ) && 
                (
                    this.BytesTransferredToAppClient == input.BytesTransferredToAppClient ||
                    this.BytesTransferredToAppClient.Equals(input.BytesTransferredToAppClient)
                ) && 
                (
                    this.MbytesReadFromMedium == input.MbytesReadFromMedium ||
                    this.MbytesReadFromMedium.Equals(input.MbytesReadFromMedium)
                ) && 
                (
                    this.BytesReadFromMedium == input.BytesReadFromMedium ||
                    this.BytesReadFromMedium.Equals(input.BytesReadFromMedium)
                ) && 
                (
                    this.MbytesTransferredFromAppClient == input.MbytesTransferredFromAppClient ||
                    this.MbytesTransferredFromAppClient.Equals(input.MbytesTransferredFromAppClient)
                ) && 
                (
                    this.BytesTransferredFromAppClient == input.BytesTransferredFromAppClient ||
                    this.BytesTransferredFromAppClient.Equals(input.BytesTransferredFromAppClient)
                ) && 
                (
                    this.MbytesWrittenToMedium == input.MbytesWrittenToMedium ||
                    this.MbytesWrittenToMedium.Equals(input.MbytesWrittenToMedium)
                ) && 
                (
                    this.BytesWrittenToMedium == input.BytesWrittenToMedium ||
                    this.BytesWrittenToMedium.Equals(input.BytesWrittenToMedium)
                ) && 
                (
                    this.DataCompressionEnabled == input.DataCompressionEnabled ||
                    this.DataCompressionEnabled.Equals(input.DataCompressionEnabled)
                ) && 
                (
                    this.WriteRetries == input.WriteRetries ||
                    this.WriteRetries.Equals(input.WriteRetries)
                ) && 
                (
                    this.WritePerms == input.WritePerms ||
                    this.WritePerms.Equals(input.WritePerms)
                ) && 
                (
                    this.SuspendedWrites == input.SuspendedWrites ||
                    this.SuspendedWrites.Equals(input.SuspendedWrites)
                ) && 
                (
                    this.FatalSuspendedWrites == input.FatalSuspendedWrites ||
                    this.FatalSuspendedWrites.Equals(input.FatalSuspendedWrites)
                ) && 
                (
                    this.ReadRetries == input.ReadRetries ||
                    this.ReadRetries.Equals(input.ReadRetries)
                ) && 
                (
                    this.ReadPerms == input.ReadPerms ||
                    this.ReadPerms.Equals(input.ReadPerms)
                ) && 
                (
                    this.SuspendedReads == input.SuspendedReads ||
                    this.SuspendedReads.Equals(input.SuspendedReads)
                ) && 
                (
                    this.FatalSuspendedReads == input.FatalSuspendedReads ||
                    this.FatalSuspendedReads.Equals(input.FatalSuspendedReads)
                ) && 
                (
                    this.Partition0RemainingCapacity == input.Partition0RemainingCapacity ||
                    this.Partition0RemainingCapacity.Equals(input.Partition0RemainingCapacity)
                ) && 
                (
                    this.Partition1RemainingCapacity == input.Partition1RemainingCapacity ||
                    this.Partition1RemainingCapacity.Equals(input.Partition1RemainingCapacity)
                ) && 
                (
                    this.Partition0MaximumCapacity == input.Partition0MaximumCapacity ||
                    this.Partition0MaximumCapacity.Equals(input.Partition0MaximumCapacity)
                ) && 
                (
                    this.Partition1MaximumCapacity == input.Partition1MaximumCapacity ||
                    this.Partition1MaximumCapacity.Equals(input.Partition1MaximumCapacity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LogTime != null)
                    hashCode = hashCode * 59 + this.LogTime.GetHashCode();
                if (this.Barcode != null)
                    hashCode = hashCode * 59 + this.Barcode.GetHashCode();
                hashCode = hashCode * 59 + this.Mounts.GetHashCode();
                hashCode = hashCode * 59 + this.DatasetsWritten.GetHashCode();
                hashCode = hashCode * 59 + this.DatasetsRead.GetHashCode();
                hashCode = hashCode * 59 + this.RecoveredWriteDataErrors.GetHashCode();
                hashCode = hashCode * 59 + this.UnrecoveredWriteDataErrors.GetHashCode();
                hashCode = hashCode * 59 + this.WriteServoErrors.GetHashCode();
                hashCode = hashCode * 59 + this.UnrecoveredWriteServoErrors.GetHashCode();
                hashCode = hashCode * 59 + this.RecoveredReadErrors.GetHashCode();
                hashCode = hashCode * 59 + this.UnrecoveredReadErrors.GetHashCode();
                hashCode = hashCode * 59 + this.LastMountUnrecoveredWriteErrors.GetHashCode();
                hashCode = hashCode * 59 + this.LastMountUnrecoveredReadErrors.GetHashCode();
                hashCode = hashCode * 59 + this.LastMountMbytesWritten.GetHashCode();
                hashCode = hashCode * 59 + this.LastMountMbytesRead.GetHashCode();
                hashCode = hashCode * 59 + this.LifetimeMbytesWritten.GetHashCode();
                hashCode = hashCode * 59 + this.LifetimeMbytesRead.GetHashCode();
                hashCode = hashCode * 59 + this.LastLoadWriteCompressionRatio.GetHashCode();
                hashCode = hashCode * 59 + this.LastLoadReadCompressionRatio.GetHashCode();
                hashCode = hashCode * 59 + this.MediumMountTime.GetHashCode();
                hashCode = hashCode * 59 + this.MediumReadyTime.GetHashCode();
                hashCode = hashCode * 59 + this.TotalNativeCapacity.GetHashCode();
                hashCode = hashCode * 59 + this.TotalUsedNativeCapacity.GetHashCode();
                hashCode = hashCode * 59 + this.WriteProtect.GetHashCode();
                hashCode = hashCode * 59 + this.Worm.GetHashCode();
                hashCode = hashCode * 59 + this.BeginningOfMediumPasses.GetHashCode();
                hashCode = hashCode * 59 + this.MiddleOfTapePasses.GetHashCode();
                hashCode = hashCode * 59 + this.ReadCompressionRatio.GetHashCode();
                hashCode = hashCode * 59 + this.WriteCompressionRatio.GetHashCode();
                hashCode = hashCode * 59 + this.MbytesTransferredToAppClient.GetHashCode();
                hashCode = hashCode * 59 + this.BytesTransferredToAppClient.GetHashCode();
                hashCode = hashCode * 59 + this.MbytesReadFromMedium.GetHashCode();
                hashCode = hashCode * 59 + this.BytesReadFromMedium.GetHashCode();
                hashCode = hashCode * 59 + this.MbytesTransferredFromAppClient.GetHashCode();
                hashCode = hashCode * 59 + this.BytesTransferredFromAppClient.GetHashCode();
                hashCode = hashCode * 59 + this.MbytesWrittenToMedium.GetHashCode();
                hashCode = hashCode * 59 + this.BytesWrittenToMedium.GetHashCode();
                hashCode = hashCode * 59 + this.DataCompressionEnabled.GetHashCode();
                hashCode = hashCode * 59 + this.WriteRetries.GetHashCode();
                hashCode = hashCode * 59 + this.WritePerms.GetHashCode();
                hashCode = hashCode * 59 + this.SuspendedWrites.GetHashCode();
                hashCode = hashCode * 59 + this.FatalSuspendedWrites.GetHashCode();
                hashCode = hashCode * 59 + this.ReadRetries.GetHashCode();
                hashCode = hashCode * 59 + this.ReadPerms.GetHashCode();
                hashCode = hashCode * 59 + this.SuspendedReads.GetHashCode();
                hashCode = hashCode * 59 + this.FatalSuspendedReads.GetHashCode();
                hashCode = hashCode * 59 + this.Partition0RemainingCapacity.GetHashCode();
                hashCode = hashCode * 59 + this.Partition1RemainingCapacity.GetHashCode();
                hashCode = hashCode * 59 + this.Partition0MaximumCapacity.GetHashCode();
                hashCode = hashCode * 59 + this.Partition1MaximumCapacity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
