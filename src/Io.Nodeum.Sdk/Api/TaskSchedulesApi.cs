/* 
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Io.Nodeum.Sdk.Client;
using Io.Nodeum.Sdk.Model;

namespace Io.Nodeum.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskSchedulesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new task schedule. Only one should be created.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_schedules / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskScheduleBody"></param>
        /// <returns>TaskSchedule</returns>
        TaskSchedule CreateTaskSchedule (string taskId, TaskSchedule taskScheduleBody);

        /// <summary>
        /// Creates a new task schedule. Only one should be created.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_schedules / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskScheduleBody"></param>
        /// <returns>ApiResponse of TaskSchedule</returns>
        ApiResponse<TaskSchedule> CreateTaskScheduleWithHttpInfo (string taskId, TaskSchedule taskScheduleBody);
        /// <summary>
        /// Destroys the task schedule.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_schedules / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns></returns>
        void DestroyTaskSchedule (string taskId);

        /// <summary>
        /// Destroys the task schedule.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_schedules / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyTaskScheduleWithHttpInfo (string taskId);
        /// <summary>
        /// Lists all task schedules.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_schedules / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withNext">Display the next scheduled date, and information about missing executions. (optional, default to true)</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="rrule">Filter on RRule of schedule (optional)</param>
        /// <param name="done">Filter on done schedule (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <returns>TaskScheduleCollection</returns>
        TaskScheduleCollection IndexTaskSchedules (bool? withNext = default(bool?), int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string rrule = default(string), string done = default(string), string taskId = default(string));

        /// <summary>
        /// Lists all task schedules.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_schedules / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withNext">Display the next scheduled date, and information about missing executions. (optional, default to true)</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="rrule">Filter on RRule of schedule (optional)</param>
        /// <param name="done">Filter on done schedule (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <returns>ApiResponse of TaskScheduleCollection</returns>
        ApiResponse<TaskScheduleCollection> IndexTaskSchedulesWithHttpInfo (bool? withNext = default(bool?), int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string rrule = default(string), string done = default(string), string taskId = default(string));
        /// <summary>
        /// Displays the task schedule.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_schedules / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>TaskSchedule</returns>
        TaskSchedule ShowTaskSchedule (string taskId);

        /// <summary>
        /// Displays the task schedule.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_schedules / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>ApiResponse of TaskSchedule</returns>
        ApiResponse<TaskSchedule> ShowTaskScheduleWithHttpInfo (string taskId);
        /// <summary>
        /// Updates the existing task schedule.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_schedules / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskScheduleBody"></param>
        /// <returns>TaskSchedule</returns>
        TaskSchedule UpdateTaskSchedule (string taskId, TaskSchedule taskScheduleBody);

        /// <summary>
        /// Updates the existing task schedule.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_schedules / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskScheduleBody"></param>
        /// <returns>ApiResponse of TaskSchedule</returns>
        ApiResponse<TaskSchedule> UpdateTaskScheduleWithHttpInfo (string taskId, TaskSchedule taskScheduleBody);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskSchedulesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new task schedule. Only one should be created.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_schedules / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskScheduleBody"></param>
        /// <returns>Task of TaskSchedule</returns>
        System.Threading.Tasks.Task<TaskSchedule> CreateTaskScheduleAsync (string taskId, TaskSchedule taskScheduleBody);

        /// <summary>
        /// Creates a new task schedule. Only one should be created.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_schedules / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskScheduleBody"></param>
        /// <returns>Task of ApiResponse (TaskSchedule)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskSchedule>> CreateTaskScheduleAsyncWithHttpInfo (string taskId, TaskSchedule taskScheduleBody);
        /// <summary>
        /// Destroys the task schedule.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_schedules / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyTaskScheduleAsync (string taskId);

        /// <summary>
        /// Destroys the task schedule.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_schedules / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyTaskScheduleAsyncWithHttpInfo (string taskId);
        /// <summary>
        /// Lists all task schedules.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_schedules / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withNext">Display the next scheduled date, and information about missing executions. (optional, default to true)</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="rrule">Filter on RRule of schedule (optional)</param>
        /// <param name="done">Filter on done schedule (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <returns>Task of TaskScheduleCollection</returns>
        System.Threading.Tasks.Task<TaskScheduleCollection> IndexTaskSchedulesAsync (bool? withNext = default(bool?), int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string rrule = default(string), string done = default(string), string taskId = default(string));

        /// <summary>
        /// Lists all task schedules.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_schedules / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withNext">Display the next scheduled date, and information about missing executions. (optional, default to true)</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="rrule">Filter on RRule of schedule (optional)</param>
        /// <param name="done">Filter on done schedule (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <returns>Task of ApiResponse (TaskScheduleCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskScheduleCollection>> IndexTaskSchedulesAsyncWithHttpInfo (bool? withNext = default(bool?), int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string rrule = default(string), string done = default(string), string taskId = default(string));
        /// <summary>
        /// Displays the task schedule.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_schedules / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of TaskSchedule</returns>
        System.Threading.Tasks.Task<TaskSchedule> ShowTaskScheduleAsync (string taskId);

        /// <summary>
        /// Displays the task schedule.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_schedules / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of ApiResponse (TaskSchedule)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskSchedule>> ShowTaskScheduleAsyncWithHttpInfo (string taskId);
        /// <summary>
        /// Updates the existing task schedule.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_schedules / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskScheduleBody"></param>
        /// <returns>Task of TaskSchedule</returns>
        System.Threading.Tasks.Task<TaskSchedule> UpdateTaskScheduleAsync (string taskId, TaskSchedule taskScheduleBody);

        /// <summary>
        /// Updates the existing task schedule.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_schedules / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskScheduleBody"></param>
        /// <returns>Task of ApiResponse (TaskSchedule)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskSchedule>> UpdateTaskScheduleAsyncWithHttpInfo (string taskId, TaskSchedule taskScheduleBody);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskSchedulesApi : ITaskSchedulesApiSync, ITaskSchedulesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TaskSchedulesApi : ITaskSchedulesApi
    {
        private Io.Nodeum.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskSchedulesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskSchedulesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskSchedulesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskSchedulesApi(String basePath)
        {
            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                new Io.Nodeum.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskSchedulesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TaskSchedulesApi(Io.Nodeum.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskSchedulesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TaskSchedulesApi(Io.Nodeum.Sdk.Client.ISynchronousClient client,Io.Nodeum.Sdk.Client.IAsynchronousClient asyncClient, Io.Nodeum.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Io.Nodeum.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a new task schedule. Only one should be created. **API Key Scope**: task_schedules / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskScheduleBody"></param>
        /// <returns>TaskSchedule</returns>
        public TaskSchedule CreateTaskSchedule (string taskId, TaskSchedule taskScheduleBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TaskSchedule> localVarResponse = CreateTaskScheduleWithHttpInfo(taskId, taskScheduleBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new task schedule. Only one should be created. **API Key Scope**: task_schedules / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskScheduleBody"></param>
        /// <returns>ApiResponse of TaskSchedule</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TaskSchedule > CreateTaskScheduleWithHttpInfo (string taskId, TaskSchedule taskScheduleBody)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TaskSchedulesApi->CreateTaskSchedule");

            // verify the required parameter 'taskScheduleBody' is set
            if (taskScheduleBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskScheduleBody' when calling TaskSchedulesApi->CreateTaskSchedule");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.Data = taskScheduleBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< TaskSchedule >("/tasks/{task_id}/task_schedule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTaskSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new task schedule. Only one should be created. **API Key Scope**: task_schedules / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskScheduleBody"></param>
        /// <returns>Task of TaskSchedule</returns>
        public async System.Threading.Tasks.Task<TaskSchedule> CreateTaskScheduleAsync (string taskId, TaskSchedule taskScheduleBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TaskSchedule> localVarResponse = await CreateTaskScheduleAsyncWithHttpInfo(taskId, taskScheduleBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new task schedule. Only one should be created. **API Key Scope**: task_schedules / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskScheduleBody"></param>
        /// <returns>Task of ApiResponse (TaskSchedule)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TaskSchedule>> CreateTaskScheduleAsyncWithHttpInfo (string taskId, TaskSchedule taskScheduleBody)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TaskSchedulesApi->CreateTaskSchedule");

            // verify the required parameter 'taskScheduleBody' is set
            if (taskScheduleBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskScheduleBody' when calling TaskSchedulesApi->CreateTaskSchedule");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.Data = taskScheduleBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskSchedule>("/tasks/{task_id}/task_schedule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTaskSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys the task schedule. **API Key Scope**: task_schedules / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns></returns>
        public void DestroyTaskSchedule (string taskId)
        {
             DestroyTaskScheduleWithHttpInfo(taskId);
        }

        /// <summary>
        /// Destroys the task schedule. **API Key Scope**: task_schedules / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse<Object> DestroyTaskScheduleWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TaskSchedulesApi->DestroyTaskSchedule");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/tasks/{task_id}/task_schedule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyTaskSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys the task schedule. **API Key Scope**: task_schedules / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyTaskScheduleAsync (string taskId)
        {
             await DestroyTaskScheduleAsyncWithHttpInfo(taskId);

        }

        /// <summary>
        /// Destroys the task schedule. **API Key Scope**: task_schedules / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Object>> DestroyTaskScheduleAsyncWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TaskSchedulesApi->DestroyTaskSchedule");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/tasks/{task_id}/task_schedule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyTaskSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all task schedules. **API Key Scope**: task_schedules / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withNext">Display the next scheduled date, and information about missing executions. (optional, default to true)</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="rrule">Filter on RRule of schedule (optional)</param>
        /// <param name="done">Filter on done schedule (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <returns>TaskScheduleCollection</returns>
        public TaskScheduleCollection IndexTaskSchedules (bool? withNext = default(bool?), int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string rrule = default(string), string done = default(string), string taskId = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TaskScheduleCollection> localVarResponse = IndexTaskSchedulesWithHttpInfo(withNext, limit, offset, sortBy, id, rrule, done, taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all task schedules. **API Key Scope**: task_schedules / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withNext">Display the next scheduled date, and information about missing executions. (optional, default to true)</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="rrule">Filter on RRule of schedule (optional)</param>
        /// <param name="done">Filter on done schedule (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <returns>ApiResponse of TaskScheduleCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TaskScheduleCollection > IndexTaskSchedulesWithHttpInfo (bool? withNext = default(bool?), int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string rrule = default(string), string done = default(string), string taskId = default(string))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (withNext != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "with_next", withNext));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (rrule != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "rrule", rrule));
            }
            if (done != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "done", done));
            }
            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "task_id", taskId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TaskScheduleCollection >("/task_schedules", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTaskSchedules", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all task schedules. **API Key Scope**: task_schedules / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withNext">Display the next scheduled date, and information about missing executions. (optional, default to true)</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="rrule">Filter on RRule of schedule (optional)</param>
        /// <param name="done">Filter on done schedule (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <returns>Task of TaskScheduleCollection</returns>
        public async System.Threading.Tasks.Task<TaskScheduleCollection> IndexTaskSchedulesAsync (bool? withNext = default(bool?), int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string rrule = default(string), string done = default(string), string taskId = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TaskScheduleCollection> localVarResponse = await IndexTaskSchedulesAsyncWithHttpInfo(withNext, limit, offset, sortBy, id, rrule, done, taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all task schedules. **API Key Scope**: task_schedules / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withNext">Display the next scheduled date, and information about missing executions. (optional, default to true)</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="rrule">Filter on RRule of schedule (optional)</param>
        /// <param name="done">Filter on done schedule (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <returns>Task of ApiResponse (TaskScheduleCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TaskScheduleCollection>> IndexTaskSchedulesAsyncWithHttpInfo (bool? withNext = default(bool?), int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string rrule = default(string), string done = default(string), string taskId = default(string))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (withNext != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "with_next", withNext));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (rrule != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "rrule", rrule));
            }
            if (done != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "done", done));
            }
            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "task_id", taskId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TaskScheduleCollection>("/task_schedules", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTaskSchedules", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays the task schedule. **API Key Scope**: task_schedules / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>TaskSchedule</returns>
        public TaskSchedule ShowTaskSchedule (string taskId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TaskSchedule> localVarResponse = ShowTaskScheduleWithHttpInfo(taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays the task schedule. **API Key Scope**: task_schedules / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>ApiResponse of TaskSchedule</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TaskSchedule > ShowTaskScheduleWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TaskSchedulesApi->ShowTaskSchedule");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TaskSchedule >("/tasks/{task_id}/task_schedule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTaskSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays the task schedule. **API Key Scope**: task_schedules / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of TaskSchedule</returns>
        public async System.Threading.Tasks.Task<TaskSchedule> ShowTaskScheduleAsync (string taskId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TaskSchedule> localVarResponse = await ShowTaskScheduleAsyncWithHttpInfo(taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays the task schedule. **API Key Scope**: task_schedules / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of ApiResponse (TaskSchedule)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TaskSchedule>> ShowTaskScheduleAsyncWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TaskSchedulesApi->ShowTaskSchedule");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TaskSchedule>("/tasks/{task_id}/task_schedule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTaskSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the existing task schedule. **API Key Scope**: task_schedules / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskScheduleBody"></param>
        /// <returns>TaskSchedule</returns>
        public TaskSchedule UpdateTaskSchedule (string taskId, TaskSchedule taskScheduleBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TaskSchedule> localVarResponse = UpdateTaskScheduleWithHttpInfo(taskId, taskScheduleBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the existing task schedule. **API Key Scope**: task_schedules / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskScheduleBody"></param>
        /// <returns>ApiResponse of TaskSchedule</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TaskSchedule > UpdateTaskScheduleWithHttpInfo (string taskId, TaskSchedule taskScheduleBody)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TaskSchedulesApi->UpdateTaskSchedule");

            // verify the required parameter 'taskScheduleBody' is set
            if (taskScheduleBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskScheduleBody' when calling TaskSchedulesApi->UpdateTaskSchedule");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.Data = taskScheduleBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< TaskSchedule >("/tasks/{task_id}/task_schedule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTaskSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the existing task schedule. **API Key Scope**: task_schedules / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskScheduleBody"></param>
        /// <returns>Task of TaskSchedule</returns>
        public async System.Threading.Tasks.Task<TaskSchedule> UpdateTaskScheduleAsync (string taskId, TaskSchedule taskScheduleBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TaskSchedule> localVarResponse = await UpdateTaskScheduleAsyncWithHttpInfo(taskId, taskScheduleBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the existing task schedule. **API Key Scope**: task_schedules / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskScheduleBody"></param>
        /// <returns>Task of ApiResponse (TaskSchedule)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TaskSchedule>> UpdateTaskScheduleAsyncWithHttpInfo (string taskId, TaskSchedule taskScheduleBody)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TaskSchedulesApi->UpdateTaskSchedule");

            // verify the required parameter 'taskScheduleBody' is set
            if (taskScheduleBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskScheduleBody' when calling TaskSchedulesApi->UpdateTaskSchedule");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.Data = taskScheduleBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<TaskSchedule>("/tasks/{task_id}/task_schedule", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTaskSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
