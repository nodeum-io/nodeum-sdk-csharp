/* 
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Io.Nodeum.Sdk.Client;
using Io.Nodeum.Sdk.Model;

namespace Io.Nodeum.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Lists files under a specific folder.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>NodeumFileCollection</returns>
        NodeumFileCollection FilesChildren (int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files under a specific folder.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of NodeumFileCollection</returns>
        ApiResponse<NodeumFileCollection> FilesChildrenWithHttpInfo (int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files under a specific folder.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>NodeumFileCollection</returns>
        NodeumFileCollection FilesChildrenByContainer (string containerId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files under a specific folder.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of NodeumFileCollection</returns>
        ApiResponse<NodeumFileCollection> FilesChildrenByContainerWithHttpInfo (string containerId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files under a specific folder.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>NodeumFileCollection</returns>
        NodeumFileCollection FilesChildrenByPool (string poolId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files under a specific folder.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of NodeumFileCollection</returns>
        ApiResponse<NodeumFileCollection> FilesChildrenByPoolWithHttpInfo (string poolId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files under a specific folder.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>NodeumFileCollection</returns>
        NodeumFileCollection FilesChildrenByTask (string taskId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files under a specific folder.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of NodeumFileCollection</returns>
        ApiResponse<NodeumFileCollection> FilesChildrenByTaskWithHttpInfo (string taskId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files under a specific folder.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>NodeumFileCollection</returns>
        NodeumFileCollection FilesChildrenByTaskExecution (string taskExecutionId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files under a specific folder.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of NodeumFileCollection</returns>
        ApiResponse<NodeumFileCollection> FilesChildrenByTaskExecutionWithHttpInfo (string taskExecutionId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files under a specific folder.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>NodeumFileCollection</returns>
        NodeumFileCollection FilesChildrenByTaskExecutionByTask (string taskId, string taskExecutionId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files under a specific folder.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of NodeumFileCollection</returns>
        ApiResponse<NodeumFileCollection> FilesChildrenByTaskExecutionByTaskWithHttpInfo (string taskId, string taskExecutionId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files under a specific folder on tape of pools, specific for Data Exchange.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: import_files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ImportFileCollection</returns>
        ImportFileCollection ImportFilesChildrenByPool (string poolId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files under a specific folder on tape of pools, specific for Data Exchange.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: import_files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of ImportFileCollection</returns>
        ApiResponse<ImportFileCollection> ImportFilesChildrenByPoolWithHttpInfo (string poolId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files on root.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>NodeumFileCollection</returns>
        NodeumFileCollection IndexFiles (int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files on root.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of NodeumFileCollection</returns>
        ApiResponse<NodeumFileCollection> IndexFilesWithHttpInfo (int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files on root.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>NodeumFileCollection</returns>
        NodeumFileCollection IndexFilesByContainer (string containerId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files on root.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of NodeumFileCollection</returns>
        ApiResponse<NodeumFileCollection> IndexFilesByContainerWithHttpInfo (string containerId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files on root.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>NodeumFileCollection</returns>
        NodeumFileCollection IndexFilesByPool (string poolId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files on root.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of NodeumFileCollection</returns>
        ApiResponse<NodeumFileCollection> IndexFilesByPoolWithHttpInfo (string poolId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files on root.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>NodeumFileCollection</returns>
        NodeumFileCollection IndexFilesByTask (string taskId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files on root.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of NodeumFileCollection</returns>
        ApiResponse<NodeumFileCollection> IndexFilesByTaskWithHttpInfo (string taskId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files on root.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>NodeumFileCollection</returns>
        NodeumFileCollection IndexFilesByTaskExecution (string taskExecutionId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files on root.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of NodeumFileCollection</returns>
        ApiResponse<NodeumFileCollection> IndexFilesByTaskExecutionWithHttpInfo (string taskExecutionId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files on root.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>NodeumFileCollection</returns>
        NodeumFileCollection IndexFilesByTaskExecutionByTask (string taskId, string taskExecutionId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files on root.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of NodeumFileCollection</returns>
        ApiResponse<NodeumFileCollection> IndexFilesByTaskExecutionByTaskWithHttpInfo (string taskId, string taskExecutionId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files on root of tape of pools, specific for Data Exchange.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: import_files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ImportFileCollection</returns>
        ImportFileCollection IndexImportFilesByPool (string poolId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files on root of tape of pools, specific for Data Exchange.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: import_files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of ImportFileCollection</returns>
        ApiResponse<ImportFileCollection> IndexImportFilesByPoolWithHttpInfo (string poolId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files on root of tape of pools, specific for Active and Offline.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: on_tapes_files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <returns>OnTapesFileCollection</returns>
        OnTapesFileCollection IndexOnTapesFilesByPool (string poolId, int? limit = default(int?), int? offset = default(int?), string name = default(string), string type = default(string), string size = default(string));

        /// <summary>
        /// Lists files on root of tape of pools, specific for Active and Offline.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: on_tapes_files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <returns>ApiResponse of OnTapesFileCollection</returns>
        ApiResponse<OnTapesFileCollection> IndexOnTapesFilesByPoolWithHttpInfo (string poolId, int? limit = default(int?), int? offset = default(int?), string name = default(string), string type = default(string), string size = default(string));
        /// <summary>
        /// Displays tapes containing specific file, related to the specific pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / tapes
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>TapeCollection</returns>
        TapeCollection IndexTapesByFileByPool (string poolId, int fileId);

        /// <summary>
        /// Displays tapes containing specific file, related to the specific pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / tapes
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>ApiResponse of TapeCollection</returns>
        ApiResponse<TapeCollection> IndexTapesByFileByPoolWithHttpInfo (string poolId, int fileId);
        /// <summary>
        /// Displays tapes containing specific file, related to the specific task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / tapes
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>TapeCollection</returns>
        TapeCollection IndexTapesByFileByTask (string taskId, int fileId);

        /// <summary>
        /// Displays tapes containing specific file, related to the specific task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / tapes
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>ApiResponse of TapeCollection</returns>
        ApiResponse<TapeCollection> IndexTapesByFileByTaskWithHttpInfo (string taskId, int fileId);
        /// <summary>
        /// Displays tapes containing specific file, related to the specific task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / tapes
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>TapeCollection</returns>
        TapeCollection IndexTapesByFileByTaskExecution (string taskExecutionId, int fileId);

        /// <summary>
        /// Displays tapes containing specific file, related to the specific task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / tapes
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>ApiResponse of TapeCollection</returns>
        ApiResponse<TapeCollection> IndexTapesByFileByTaskExecutionWithHttpInfo (string taskExecutionId, int fileId);
        /// <summary>
        /// Displays tapes containing specific file, related to the specific task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / tapes
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>TapeCollection</returns>
        TapeCollection IndexTapesByFileByTaskExecutionByTask (string taskId, string taskExecutionId, int fileId);

        /// <summary>
        /// Displays tapes containing specific file, related to the specific task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / tapes
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>ApiResponse of TapeCollection</returns>
        ApiResponse<TapeCollection> IndexTapesByFileByTaskExecutionByTaskWithHttpInfo (string taskId, string taskExecutionId, int fileId);
        /// <summary>
        /// Lists files under a specific folder on tape of pools, specific for Active and Offline.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: on_tapes_files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <returns>OnTapesFileCollection</returns>
        OnTapesFileCollection OnTapesFilesChildrenByPool (string poolId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string name = default(string), string type = default(string), string size = default(string));

        /// <summary>
        /// Lists files under a specific folder on tape of pools, specific for Active and Offline.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: on_tapes_files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <returns>ApiResponse of OnTapesFileCollection</returns>
        ApiResponse<OnTapesFileCollection> OnTapesFilesChildrenByPoolWithHttpInfo (string poolId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string name = default(string), string type = default(string), string size = default(string));
        /// <summary>
        /// Displays a specific file.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>NodeumFileWithPath</returns>
        NodeumFileWithPath ShowFile (int fileId);

        /// <summary>
        /// Displays a specific file.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>ApiResponse of NodeumFileWithPath</returns>
        ApiResponse<NodeumFileWithPath> ShowFileWithHttpInfo (int fileId);
        /// <summary>
        /// Displays a specific file.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>NodeumFileWithPath</returns>
        NodeumFileWithPath ShowFileByContainer (string containerId, int fileId);

        /// <summary>
        /// Displays a specific file.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>ApiResponse of NodeumFileWithPath</returns>
        ApiResponse<NodeumFileWithPath> ShowFileByContainerWithHttpInfo (string containerId, int fileId);
        /// <summary>
        /// Displays a specific file.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>NodeumFileWithPath</returns>
        NodeumFileWithPath ShowFileByPool (string poolId, int fileId);

        /// <summary>
        /// Displays a specific file.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>ApiResponse of NodeumFileWithPath</returns>
        ApiResponse<NodeumFileWithPath> ShowFileByPoolWithHttpInfo (string poolId, int fileId);
        /// <summary>
        /// Displays a specific file.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>NodeumFileWithPath</returns>
        NodeumFileWithPath ShowFileByTask (string taskId, int fileId);

        /// <summary>
        /// Displays a specific file.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>ApiResponse of NodeumFileWithPath</returns>
        ApiResponse<NodeumFileWithPath> ShowFileByTaskWithHttpInfo (string taskId, int fileId);
        /// <summary>
        /// Displays a specific file.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>NodeumFileWithPath</returns>
        NodeumFileWithPath ShowFileByTaskExecution (string taskExecutionId, int fileId);

        /// <summary>
        /// Displays a specific file.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>ApiResponse of NodeumFileWithPath</returns>
        ApiResponse<NodeumFileWithPath> ShowFileByTaskExecutionWithHttpInfo (string taskExecutionId, int fileId);
        /// <summary>
        /// Displays a specific file.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>NodeumFileWithPath</returns>
        NodeumFileWithPath ShowFileByTaskExecutionByTask (string taskId, string taskExecutionId, int fileId);

        /// <summary>
        /// Displays a specific file.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>ApiResponse of NodeumFileWithPath</returns>
        ApiResponse<NodeumFileWithPath> ShowFileByTaskExecutionByTaskWithHttpInfo (string taskId, string taskExecutionId, int fileId);
        /// <summary>
        /// Displays a specific file on tape of pools, specific for Data Exchange.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: import_files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>ImportFileWithPath</returns>
        ImportFileWithPath ShowImportFileByPool (string poolId, int fileId);

        /// <summary>
        /// Displays a specific file on tape of pools, specific for Data Exchange.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: import_files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>ApiResponse of ImportFileWithPath</returns>
        ApiResponse<ImportFileWithPath> ShowImportFileByPoolWithHttpInfo (string poolId, int fileId);
        /// <summary>
        /// Displays a specific file on tape of pools, specific for Active and Offline.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: on_tapes_files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>OnTapesFile</returns>
        OnTapesFile ShowOnTapeFileByPool (string poolId, int fileId);

        /// <summary>
        /// Displays a specific file on tape of pools, specific for Active and Offline.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: on_tapes_files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>ApiResponse of OnTapesFile</returns>
        ApiResponse<OnTapesFile> ShowOnTapeFileByPoolWithHttpInfo (string poolId, int fileId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Lists files under a specific folder.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of NodeumFileCollection</returns>
        System.Threading.Tasks.Task<NodeumFileCollection> FilesChildrenAsync (int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files under a specific folder.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (NodeumFileCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeumFileCollection>> FilesChildrenAsyncWithHttpInfo (int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files under a specific folder.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of NodeumFileCollection</returns>
        System.Threading.Tasks.Task<NodeumFileCollection> FilesChildrenByContainerAsync (string containerId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files under a specific folder.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (NodeumFileCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeumFileCollection>> FilesChildrenByContainerAsyncWithHttpInfo (string containerId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files under a specific folder.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of NodeumFileCollection</returns>
        System.Threading.Tasks.Task<NodeumFileCollection> FilesChildrenByPoolAsync (string poolId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files under a specific folder.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (NodeumFileCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeumFileCollection>> FilesChildrenByPoolAsyncWithHttpInfo (string poolId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files under a specific folder.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of NodeumFileCollection</returns>
        System.Threading.Tasks.Task<NodeumFileCollection> FilesChildrenByTaskAsync (string taskId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files under a specific folder.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (NodeumFileCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeumFileCollection>> FilesChildrenByTaskAsyncWithHttpInfo (string taskId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files under a specific folder.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of NodeumFileCollection</returns>
        System.Threading.Tasks.Task<NodeumFileCollection> FilesChildrenByTaskExecutionAsync (string taskExecutionId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files under a specific folder.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (NodeumFileCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeumFileCollection>> FilesChildrenByTaskExecutionAsyncWithHttpInfo (string taskExecutionId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files under a specific folder.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of NodeumFileCollection</returns>
        System.Threading.Tasks.Task<NodeumFileCollection> FilesChildrenByTaskExecutionByTaskAsync (string taskId, string taskExecutionId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files under a specific folder.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (NodeumFileCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeumFileCollection>> FilesChildrenByTaskExecutionByTaskAsyncWithHttpInfo (string taskId, string taskExecutionId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files under a specific folder on tape of pools, specific for Data Exchange.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: import_files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ImportFileCollection</returns>
        System.Threading.Tasks.Task<ImportFileCollection> ImportFilesChildrenByPoolAsync (string poolId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files under a specific folder on tape of pools, specific for Data Exchange.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: import_files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (ImportFileCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImportFileCollection>> ImportFilesChildrenByPoolAsyncWithHttpInfo (string poolId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files on root.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of NodeumFileCollection</returns>
        System.Threading.Tasks.Task<NodeumFileCollection> IndexFilesAsync (int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files on root.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (NodeumFileCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeumFileCollection>> IndexFilesAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files on root.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of NodeumFileCollection</returns>
        System.Threading.Tasks.Task<NodeumFileCollection> IndexFilesByContainerAsync (string containerId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files on root.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (NodeumFileCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeumFileCollection>> IndexFilesByContainerAsyncWithHttpInfo (string containerId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files on root.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of NodeumFileCollection</returns>
        System.Threading.Tasks.Task<NodeumFileCollection> IndexFilesByPoolAsync (string poolId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files on root.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (NodeumFileCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeumFileCollection>> IndexFilesByPoolAsyncWithHttpInfo (string poolId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files on root.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of NodeumFileCollection</returns>
        System.Threading.Tasks.Task<NodeumFileCollection> IndexFilesByTaskAsync (string taskId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files on root.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (NodeumFileCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeumFileCollection>> IndexFilesByTaskAsyncWithHttpInfo (string taskId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files on root.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of NodeumFileCollection</returns>
        System.Threading.Tasks.Task<NodeumFileCollection> IndexFilesByTaskExecutionAsync (string taskExecutionId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files on root.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (NodeumFileCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeumFileCollection>> IndexFilesByTaskExecutionAsyncWithHttpInfo (string taskExecutionId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files on root.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of NodeumFileCollection</returns>
        System.Threading.Tasks.Task<NodeumFileCollection> IndexFilesByTaskExecutionByTaskAsync (string taskId, string taskExecutionId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files on root.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (NodeumFileCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeumFileCollection>> IndexFilesByTaskExecutionByTaskAsyncWithHttpInfo (string taskId, string taskExecutionId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files on root of tape of pools, specific for Data Exchange.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: import_files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ImportFileCollection</returns>
        System.Threading.Tasks.Task<ImportFileCollection> IndexImportFilesByPoolAsync (string poolId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));

        /// <summary>
        /// Lists files on root of tape of pools, specific for Data Exchange.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: import_files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (ImportFileCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImportFileCollection>> IndexImportFilesByPoolAsyncWithHttpInfo (string poolId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string));
        /// <summary>
        /// Lists files on root of tape of pools, specific for Active and Offline.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: on_tapes_files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <returns>Task of OnTapesFileCollection</returns>
        System.Threading.Tasks.Task<OnTapesFileCollection> IndexOnTapesFilesByPoolAsync (string poolId, int? limit = default(int?), int? offset = default(int?), string name = default(string), string type = default(string), string size = default(string));

        /// <summary>
        /// Lists files on root of tape of pools, specific for Active and Offline.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: on_tapes_files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <returns>Task of ApiResponse (OnTapesFileCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<OnTapesFileCollection>> IndexOnTapesFilesByPoolAsyncWithHttpInfo (string poolId, int? limit = default(int?), int? offset = default(int?), string name = default(string), string type = default(string), string size = default(string));
        /// <summary>
        /// Displays tapes containing specific file, related to the specific pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / tapes
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of TapeCollection</returns>
        System.Threading.Tasks.Task<TapeCollection> IndexTapesByFileByPoolAsync (string poolId, int fileId);

        /// <summary>
        /// Displays tapes containing specific file, related to the specific pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / tapes
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of ApiResponse (TapeCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeCollection>> IndexTapesByFileByPoolAsyncWithHttpInfo (string poolId, int fileId);
        /// <summary>
        /// Displays tapes containing specific file, related to the specific task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / tapes
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of TapeCollection</returns>
        System.Threading.Tasks.Task<TapeCollection> IndexTapesByFileByTaskAsync (string taskId, int fileId);

        /// <summary>
        /// Displays tapes containing specific file, related to the specific task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / tapes
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of ApiResponse (TapeCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeCollection>> IndexTapesByFileByTaskAsyncWithHttpInfo (string taskId, int fileId);
        /// <summary>
        /// Displays tapes containing specific file, related to the specific task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / tapes
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of TapeCollection</returns>
        System.Threading.Tasks.Task<TapeCollection> IndexTapesByFileByTaskExecutionAsync (string taskExecutionId, int fileId);

        /// <summary>
        /// Displays tapes containing specific file, related to the specific task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / tapes
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of ApiResponse (TapeCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeCollection>> IndexTapesByFileByTaskExecutionAsyncWithHttpInfo (string taskExecutionId, int fileId);
        /// <summary>
        /// Displays tapes containing specific file, related to the specific task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / tapes
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of TapeCollection</returns>
        System.Threading.Tasks.Task<TapeCollection> IndexTapesByFileByTaskExecutionByTaskAsync (string taskId, string taskExecutionId, int fileId);

        /// <summary>
        /// Displays tapes containing specific file, related to the specific task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / tapes
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of ApiResponse (TapeCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeCollection>> IndexTapesByFileByTaskExecutionByTaskAsyncWithHttpInfo (string taskId, string taskExecutionId, int fileId);
        /// <summary>
        /// Lists files under a specific folder on tape of pools, specific for Active and Offline.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: on_tapes_files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <returns>Task of OnTapesFileCollection</returns>
        System.Threading.Tasks.Task<OnTapesFileCollection> OnTapesFilesChildrenByPoolAsync (string poolId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string name = default(string), string type = default(string), string size = default(string));

        /// <summary>
        /// Lists files under a specific folder on tape of pools, specific for Active and Offline.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: on_tapes_files / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <returns>Task of ApiResponse (OnTapesFileCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<OnTapesFileCollection>> OnTapesFilesChildrenByPoolAsyncWithHttpInfo (string poolId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string name = default(string), string type = default(string), string size = default(string));
        /// <summary>
        /// Displays a specific file.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of NodeumFileWithPath</returns>
        System.Threading.Tasks.Task<NodeumFileWithPath> ShowFileAsync (int fileId);

        /// <summary>
        /// Displays a specific file.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of ApiResponse (NodeumFileWithPath)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeumFileWithPath>> ShowFileAsyncWithHttpInfo (int fileId);
        /// <summary>
        /// Displays a specific file.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of NodeumFileWithPath</returns>
        System.Threading.Tasks.Task<NodeumFileWithPath> ShowFileByContainerAsync (string containerId, int fileId);

        /// <summary>
        /// Displays a specific file.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of ApiResponse (NodeumFileWithPath)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeumFileWithPath>> ShowFileByContainerAsyncWithHttpInfo (string containerId, int fileId);
        /// <summary>
        /// Displays a specific file.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of NodeumFileWithPath</returns>
        System.Threading.Tasks.Task<NodeumFileWithPath> ShowFileByPoolAsync (string poolId, int fileId);

        /// <summary>
        /// Displays a specific file.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of ApiResponse (NodeumFileWithPath)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeumFileWithPath>> ShowFileByPoolAsyncWithHttpInfo (string poolId, int fileId);
        /// <summary>
        /// Displays a specific file.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of NodeumFileWithPath</returns>
        System.Threading.Tasks.Task<NodeumFileWithPath> ShowFileByTaskAsync (string taskId, int fileId);

        /// <summary>
        /// Displays a specific file.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of ApiResponse (NodeumFileWithPath)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeumFileWithPath>> ShowFileByTaskAsyncWithHttpInfo (string taskId, int fileId);
        /// <summary>
        /// Displays a specific file.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of NodeumFileWithPath</returns>
        System.Threading.Tasks.Task<NodeumFileWithPath> ShowFileByTaskExecutionAsync (string taskExecutionId, int fileId);

        /// <summary>
        /// Displays a specific file.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of ApiResponse (NodeumFileWithPath)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeumFileWithPath>> ShowFileByTaskExecutionAsyncWithHttpInfo (string taskExecutionId, int fileId);
        /// <summary>
        /// Displays a specific file.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of NodeumFileWithPath</returns>
        System.Threading.Tasks.Task<NodeumFileWithPath> ShowFileByTaskExecutionByTaskAsync (string taskId, string taskExecutionId, int fileId);

        /// <summary>
        /// Displays a specific file.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of ApiResponse (NodeumFileWithPath)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeumFileWithPath>> ShowFileByTaskExecutionByTaskAsyncWithHttpInfo (string taskId, string taskExecutionId, int fileId);
        /// <summary>
        /// Displays a specific file on tape of pools, specific for Data Exchange.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: import_files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of ImportFileWithPath</returns>
        System.Threading.Tasks.Task<ImportFileWithPath> ShowImportFileByPoolAsync (string poolId, int fileId);

        /// <summary>
        /// Displays a specific file on tape of pools, specific for Data Exchange.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: import_files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of ApiResponse (ImportFileWithPath)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImportFileWithPath>> ShowImportFileByPoolAsyncWithHttpInfo (string poolId, int fileId);
        /// <summary>
        /// Displays a specific file on tape of pools, specific for Active and Offline.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: on_tapes_files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of OnTapesFile</returns>
        System.Threading.Tasks.Task<OnTapesFile> ShowOnTapeFileByPoolAsync (string poolId, int fileId);

        /// <summary>
        /// Displays a specific file on tape of pools, specific for Active and Offline.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: on_tapes_files / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of ApiResponse (OnTapesFile)</returns>
        System.Threading.Tasks.Task<ApiResponse<OnTapesFile>> ShowOnTapeFileByPoolAsyncWithHttpInfo (string poolId, int fileId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApi : IFilesApiSync, IFilesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FilesApi : IFilesApi
    {
        private Io.Nodeum.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilesApi(String basePath)
        {
            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                new Io.Nodeum.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FilesApi(Io.Nodeum.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FilesApi(Io.Nodeum.Sdk.Client.ISynchronousClient client,Io.Nodeum.Sdk.Client.IAsynchronousClient asyncClient, Io.Nodeum.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Io.Nodeum.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Lists files under a specific folder. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>NodeumFileCollection</returns>
        public NodeumFileCollection FilesChildren (int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection> localVarResponse = FilesChildrenWithHttpInfo(fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists files under a specific folder. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of NodeumFileCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NodeumFileCollection > FilesChildrenWithHttpInfo (int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("file_parent_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileParentId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< NodeumFileCollection >("/files/{file_parent_id}/children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesChildren", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files under a specific folder. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of NodeumFileCollection</returns>
        public async System.Threading.Tasks.Task<NodeumFileCollection> FilesChildrenAsync (int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection> localVarResponse = await FilesChildrenAsyncWithHttpInfo(fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists files under a specific folder. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (NodeumFileCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection>> FilesChildrenAsyncWithHttpInfo (int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("file_parent_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileParentId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NodeumFileCollection>("/files/{file_parent_id}/children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesChildren", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files under a specific folder. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>NodeumFileCollection</returns>
        public NodeumFileCollection FilesChildrenByContainer (string containerId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection> localVarResponse = FilesChildrenByContainerWithHttpInfo(containerId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists files under a specific folder. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of NodeumFileCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NodeumFileCollection > FilesChildrenByContainerWithHttpInfo (string containerId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerId' when calling FilesApi->FilesChildrenByContainer");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (containerId != null)
                localVarRequestOptions.PathParameters.Add("container_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_parent_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileParentId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< NodeumFileCollection >("/containers/{container_id}/files/{file_parent_id}/children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesChildrenByContainer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files under a specific folder. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of NodeumFileCollection</returns>
        public async System.Threading.Tasks.Task<NodeumFileCollection> FilesChildrenByContainerAsync (string containerId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection> localVarResponse = await FilesChildrenByContainerAsyncWithHttpInfo(containerId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists files under a specific folder. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (NodeumFileCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection>> FilesChildrenByContainerAsyncWithHttpInfo (string containerId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerId' when calling FilesApi->FilesChildrenByContainer");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (containerId != null)
                localVarRequestOptions.PathParameters.Add("container_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_parent_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileParentId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NodeumFileCollection>("/containers/{container_id}/files/{file_parent_id}/children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesChildrenByContainer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files under a specific folder. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>NodeumFileCollection</returns>
        public NodeumFileCollection FilesChildrenByPool (string poolId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection> localVarResponse = FilesChildrenByPoolWithHttpInfo(poolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists files under a specific folder. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of NodeumFileCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NodeumFileCollection > FilesChildrenByPoolWithHttpInfo (string poolId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling FilesApi->FilesChildrenByPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_parent_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileParentId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< NodeumFileCollection >("/pools/{pool_id}/files/{file_parent_id}/children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesChildrenByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files under a specific folder. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of NodeumFileCollection</returns>
        public async System.Threading.Tasks.Task<NodeumFileCollection> FilesChildrenByPoolAsync (string poolId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection> localVarResponse = await FilesChildrenByPoolAsyncWithHttpInfo(poolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists files under a specific folder. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (NodeumFileCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection>> FilesChildrenByPoolAsyncWithHttpInfo (string poolId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling FilesApi->FilesChildrenByPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_parent_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileParentId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NodeumFileCollection>("/pools/{pool_id}/files/{file_parent_id}/children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesChildrenByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files under a specific folder. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>NodeumFileCollection</returns>
        public NodeumFileCollection FilesChildrenByTask (string taskId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection> localVarResponse = FilesChildrenByTaskWithHttpInfo(taskId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists files under a specific folder. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of NodeumFileCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NodeumFileCollection > FilesChildrenByTaskWithHttpInfo (string taskId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling FilesApi->FilesChildrenByTask");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_parent_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileParentId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< NodeumFileCollection >("/tasks/{task_id}/files/{file_parent_id}/children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesChildrenByTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files under a specific folder. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of NodeumFileCollection</returns>
        public async System.Threading.Tasks.Task<NodeumFileCollection> FilesChildrenByTaskAsync (string taskId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection> localVarResponse = await FilesChildrenByTaskAsyncWithHttpInfo(taskId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists files under a specific folder. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (NodeumFileCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection>> FilesChildrenByTaskAsyncWithHttpInfo (string taskId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling FilesApi->FilesChildrenByTask");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_parent_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileParentId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NodeumFileCollection>("/tasks/{task_id}/files/{file_parent_id}/children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesChildrenByTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files under a specific folder. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>NodeumFileCollection</returns>
        public NodeumFileCollection FilesChildrenByTaskExecution (string taskExecutionId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection> localVarResponse = FilesChildrenByTaskExecutionWithHttpInfo(taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists files under a specific folder. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of NodeumFileCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NodeumFileCollection > FilesChildrenByTaskExecutionWithHttpInfo (string taskExecutionId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
            // verify the required parameter 'taskExecutionId' is set
            if (taskExecutionId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskExecutionId' when calling FilesApi->FilesChildrenByTaskExecution");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskExecutionId != null)
                localVarRequestOptions.PathParameters.Add("task_execution_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskExecutionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_parent_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileParentId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< NodeumFileCollection >("/task_executions/{task_execution_id}/files/{file_parent_id}/children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesChildrenByTaskExecution", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files under a specific folder. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of NodeumFileCollection</returns>
        public async System.Threading.Tasks.Task<NodeumFileCollection> FilesChildrenByTaskExecutionAsync (string taskExecutionId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection> localVarResponse = await FilesChildrenByTaskExecutionAsyncWithHttpInfo(taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists files under a specific folder. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (NodeumFileCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection>> FilesChildrenByTaskExecutionAsyncWithHttpInfo (string taskExecutionId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
            // verify the required parameter 'taskExecutionId' is set
            if (taskExecutionId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskExecutionId' when calling FilesApi->FilesChildrenByTaskExecution");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskExecutionId != null)
                localVarRequestOptions.PathParameters.Add("task_execution_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskExecutionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_parent_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileParentId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NodeumFileCollection>("/task_executions/{task_execution_id}/files/{file_parent_id}/children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesChildrenByTaskExecution", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files under a specific folder. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>NodeumFileCollection</returns>
        public NodeumFileCollection FilesChildrenByTaskExecutionByTask (string taskId, string taskExecutionId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection> localVarResponse = FilesChildrenByTaskExecutionByTaskWithHttpInfo(taskId, taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists files under a specific folder. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of NodeumFileCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NodeumFileCollection > FilesChildrenByTaskExecutionByTaskWithHttpInfo (string taskId, string taskExecutionId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling FilesApi->FilesChildrenByTaskExecutionByTask");

            // verify the required parameter 'taskExecutionId' is set
            if (taskExecutionId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskExecutionId' when calling FilesApi->FilesChildrenByTaskExecutionByTask");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (taskExecutionId != null)
                localVarRequestOptions.PathParameters.Add("task_execution_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskExecutionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_parent_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileParentId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< NodeumFileCollection >("/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_parent_id}/children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesChildrenByTaskExecutionByTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files under a specific folder. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of NodeumFileCollection</returns>
        public async System.Threading.Tasks.Task<NodeumFileCollection> FilesChildrenByTaskExecutionByTaskAsync (string taskId, string taskExecutionId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection> localVarResponse = await FilesChildrenByTaskExecutionByTaskAsyncWithHttpInfo(taskId, taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists files under a specific folder. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (NodeumFileCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection>> FilesChildrenByTaskExecutionByTaskAsyncWithHttpInfo (string taskId, string taskExecutionId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling FilesApi->FilesChildrenByTaskExecutionByTask");

            // verify the required parameter 'taskExecutionId' is set
            if (taskExecutionId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskExecutionId' when calling FilesApi->FilesChildrenByTaskExecutionByTask");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (taskExecutionId != null)
                localVarRequestOptions.PathParameters.Add("task_execution_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskExecutionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_parent_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileParentId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NodeumFileCollection>("/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_parent_id}/children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilesChildrenByTaskExecutionByTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files under a specific folder on tape of pools, specific for Data Exchange. **API Key Scope**: import_files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ImportFileCollection</returns>
        public ImportFileCollection ImportFilesChildrenByPool (string poolId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ImportFileCollection> localVarResponse = ImportFilesChildrenByPoolWithHttpInfo(poolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists files under a specific folder on tape of pools, specific for Data Exchange. **API Key Scope**: import_files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of ImportFileCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ImportFileCollection > ImportFilesChildrenByPoolWithHttpInfo (string poolId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling FilesApi->ImportFilesChildrenByPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_parent_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileParentId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ImportFileCollection >("/pools/{pool_id}/import_files/{file_parent_id}/children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportFilesChildrenByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files under a specific folder on tape of pools, specific for Data Exchange. **API Key Scope**: import_files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ImportFileCollection</returns>
        public async System.Threading.Tasks.Task<ImportFileCollection> ImportFilesChildrenByPoolAsync (string poolId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ImportFileCollection> localVarResponse = await ImportFilesChildrenByPoolAsyncWithHttpInfo(poolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists files under a specific folder on tape of pools, specific for Data Exchange. **API Key Scope**: import_files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (ImportFileCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ImportFileCollection>> ImportFilesChildrenByPoolAsyncWithHttpInfo (string poolId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling FilesApi->ImportFilesChildrenByPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_parent_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileParentId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ImportFileCollection>("/pools/{pool_id}/import_files/{file_parent_id}/children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportFilesChildrenByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files on root. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>NodeumFileCollection</returns>
        public NodeumFileCollection IndexFiles (int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection> localVarResponse = IndexFilesWithHttpInfo(limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists files on root. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of NodeumFileCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NodeumFileCollection > IndexFilesWithHttpInfo (int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< NodeumFileCollection >("/files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexFiles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files on root. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of NodeumFileCollection</returns>
        public async System.Threading.Tasks.Task<NodeumFileCollection> IndexFilesAsync (int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection> localVarResponse = await IndexFilesAsyncWithHttpInfo(limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists files on root. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (NodeumFileCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection>> IndexFilesAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NodeumFileCollection>("/files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexFiles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files on root. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>NodeumFileCollection</returns>
        public NodeumFileCollection IndexFilesByContainer (string containerId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection> localVarResponse = IndexFilesByContainerWithHttpInfo(containerId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists files on root. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of NodeumFileCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NodeumFileCollection > IndexFilesByContainerWithHttpInfo (string containerId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerId' when calling FilesApi->IndexFilesByContainer");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (containerId != null)
                localVarRequestOptions.PathParameters.Add("container_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< NodeumFileCollection >("/containers/{container_id}/files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexFilesByContainer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files on root. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of NodeumFileCollection</returns>
        public async System.Threading.Tasks.Task<NodeumFileCollection> IndexFilesByContainerAsync (string containerId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection> localVarResponse = await IndexFilesByContainerAsyncWithHttpInfo(containerId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists files on root. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (NodeumFileCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection>> IndexFilesByContainerAsyncWithHttpInfo (string containerId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerId' when calling FilesApi->IndexFilesByContainer");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (containerId != null)
                localVarRequestOptions.PathParameters.Add("container_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NodeumFileCollection>("/containers/{container_id}/files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexFilesByContainer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files on root. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>NodeumFileCollection</returns>
        public NodeumFileCollection IndexFilesByPool (string poolId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection> localVarResponse = IndexFilesByPoolWithHttpInfo(poolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists files on root. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of NodeumFileCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NodeumFileCollection > IndexFilesByPoolWithHttpInfo (string poolId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling FilesApi->IndexFilesByPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< NodeumFileCollection >("/pools/{pool_id}/files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexFilesByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files on root. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of NodeumFileCollection</returns>
        public async System.Threading.Tasks.Task<NodeumFileCollection> IndexFilesByPoolAsync (string poolId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection> localVarResponse = await IndexFilesByPoolAsyncWithHttpInfo(poolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists files on root. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (NodeumFileCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection>> IndexFilesByPoolAsyncWithHttpInfo (string poolId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling FilesApi->IndexFilesByPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NodeumFileCollection>("/pools/{pool_id}/files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexFilesByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files on root. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>NodeumFileCollection</returns>
        public NodeumFileCollection IndexFilesByTask (string taskId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection> localVarResponse = IndexFilesByTaskWithHttpInfo(taskId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists files on root. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of NodeumFileCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NodeumFileCollection > IndexFilesByTaskWithHttpInfo (string taskId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling FilesApi->IndexFilesByTask");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< NodeumFileCollection >("/tasks/{task_id}/files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexFilesByTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files on root. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of NodeumFileCollection</returns>
        public async System.Threading.Tasks.Task<NodeumFileCollection> IndexFilesByTaskAsync (string taskId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection> localVarResponse = await IndexFilesByTaskAsyncWithHttpInfo(taskId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists files on root. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (NodeumFileCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection>> IndexFilesByTaskAsyncWithHttpInfo (string taskId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling FilesApi->IndexFilesByTask");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NodeumFileCollection>("/tasks/{task_id}/files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexFilesByTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files on root. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>NodeumFileCollection</returns>
        public NodeumFileCollection IndexFilesByTaskExecution (string taskExecutionId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection> localVarResponse = IndexFilesByTaskExecutionWithHttpInfo(taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists files on root. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of NodeumFileCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NodeumFileCollection > IndexFilesByTaskExecutionWithHttpInfo (string taskExecutionId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
            // verify the required parameter 'taskExecutionId' is set
            if (taskExecutionId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskExecutionId' when calling FilesApi->IndexFilesByTaskExecution");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskExecutionId != null)
                localVarRequestOptions.PathParameters.Add("task_execution_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskExecutionId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< NodeumFileCollection >("/task_executions/{task_execution_id}/files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexFilesByTaskExecution", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files on root. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of NodeumFileCollection</returns>
        public async System.Threading.Tasks.Task<NodeumFileCollection> IndexFilesByTaskExecutionAsync (string taskExecutionId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection> localVarResponse = await IndexFilesByTaskExecutionAsyncWithHttpInfo(taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists files on root. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (NodeumFileCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection>> IndexFilesByTaskExecutionAsyncWithHttpInfo (string taskExecutionId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
            // verify the required parameter 'taskExecutionId' is set
            if (taskExecutionId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskExecutionId' when calling FilesApi->IndexFilesByTaskExecution");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskExecutionId != null)
                localVarRequestOptions.PathParameters.Add("task_execution_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskExecutionId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NodeumFileCollection>("/task_executions/{task_execution_id}/files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexFilesByTaskExecution", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files on root. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>NodeumFileCollection</returns>
        public NodeumFileCollection IndexFilesByTaskExecutionByTask (string taskId, string taskExecutionId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection> localVarResponse = IndexFilesByTaskExecutionByTaskWithHttpInfo(taskId, taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists files on root. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of NodeumFileCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NodeumFileCollection > IndexFilesByTaskExecutionByTaskWithHttpInfo (string taskId, string taskExecutionId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling FilesApi->IndexFilesByTaskExecutionByTask");

            // verify the required parameter 'taskExecutionId' is set
            if (taskExecutionId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskExecutionId' when calling FilesApi->IndexFilesByTaskExecutionByTask");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (taskExecutionId != null)
                localVarRequestOptions.PathParameters.Add("task_execution_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskExecutionId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< NodeumFileCollection >("/tasks/{task_id}/task_executions/{task_execution_id}/files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexFilesByTaskExecutionByTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files on root. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of NodeumFileCollection</returns>
        public async System.Threading.Tasks.Task<NodeumFileCollection> IndexFilesByTaskExecutionByTaskAsync (string taskId, string taskExecutionId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection> localVarResponse = await IndexFilesByTaskExecutionByTaskAsyncWithHttpInfo(taskId, taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists files on root. **API Key Scope**: files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (NodeumFileCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileCollection>> IndexFilesByTaskExecutionByTaskAsyncWithHttpInfo (string taskId, string taskExecutionId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling FilesApi->IndexFilesByTaskExecutionByTask");

            // verify the required parameter 'taskExecutionId' is set
            if (taskExecutionId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskExecutionId' when calling FilesApi->IndexFilesByTaskExecutionByTask");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (taskExecutionId != null)
                localVarRequestOptions.PathParameters.Add("task_execution_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskExecutionId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NodeumFileCollection>("/tasks/{task_id}/task_executions/{task_execution_id}/files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexFilesByTaskExecutionByTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files on root of tape of pools, specific for Data Exchange. **API Key Scope**: import_files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ImportFileCollection</returns>
        public ImportFileCollection IndexImportFilesByPool (string poolId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ImportFileCollection> localVarResponse = IndexImportFilesByPoolWithHttpInfo(poolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists files on root of tape of pools, specific for Data Exchange. **API Key Scope**: import_files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>ApiResponse of ImportFileCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ImportFileCollection > IndexImportFilesByPoolWithHttpInfo (string poolId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling FilesApi->IndexImportFilesByPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ImportFileCollection >("/pools/{pool_id}/import_files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexImportFilesByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files on root of tape of pools, specific for Data Exchange. **API Key Scope**: import_files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ImportFileCollection</returns>
        public async System.Threading.Tasks.Task<ImportFileCollection> IndexImportFilesByPoolAsync (string poolId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ImportFileCollection> localVarResponse = await IndexImportFilesByPoolAsyncWithHttpInfo(poolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists files on root of tape of pools, specific for Data Exchange. **API Key Scope**: import_files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="fileId">Filter on file id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="permission">Filter on permission (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <param name="changeDate">Filter on change date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="accessDate">Filter on access date (optional)</param>
        /// <param name="gid">Filter on gid (optional)</param>
        /// <param name="uid">Filter on uid (optional)</param>
        /// <returns>Task of ApiResponse (ImportFileCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ImportFileCollection>> IndexImportFilesByPoolAsyncWithHttpInfo (string poolId, int? limit = default(int?), int? offset = default(int?), string fileId = default(string), string name = default(string), string type = default(string), string permission = default(string), string size = default(string), string changeDate = default(string), string modificationDate = default(string), string accessDate = default(string), string gid = default(string), string uid = default(string))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling FilesApi->IndexImportFilesByPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (fileId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "file_id", fileId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (permission != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "permission", permission));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (changeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "change_date", changeDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (accessDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_date", accessDate));
            }
            if (gid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "gid", gid));
            }
            if (uid != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "uid", uid));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ImportFileCollection>("/pools/{pool_id}/import_files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexImportFilesByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files on root of tape of pools, specific for Active and Offline. **API Key Scope**: on_tapes_files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <returns>OnTapesFileCollection</returns>
        public OnTapesFileCollection IndexOnTapesFilesByPool (string poolId, int? limit = default(int?), int? offset = default(int?), string name = default(string), string type = default(string), string size = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<OnTapesFileCollection> localVarResponse = IndexOnTapesFilesByPoolWithHttpInfo(poolId, limit, offset, name, type, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists files on root of tape of pools, specific for Active and Offline. **API Key Scope**: on_tapes_files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <returns>ApiResponse of OnTapesFileCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< OnTapesFileCollection > IndexOnTapesFilesByPoolWithHttpInfo (string poolId, int? limit = default(int?), int? offset = default(int?), string name = default(string), string type = default(string), string size = default(string))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling FilesApi->IndexOnTapesFilesByPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< OnTapesFileCollection >("/pools/{pool_id}/on_tapes_files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexOnTapesFilesByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files on root of tape of pools, specific for Active and Offline. **API Key Scope**: on_tapes_files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <returns>Task of OnTapesFileCollection</returns>
        public async System.Threading.Tasks.Task<OnTapesFileCollection> IndexOnTapesFilesByPoolAsync (string poolId, int? limit = default(int?), int? offset = default(int?), string name = default(string), string type = default(string), string size = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<OnTapesFileCollection> localVarResponse = await IndexOnTapesFilesByPoolAsyncWithHttpInfo(poolId, limit, offset, name, type, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists files on root of tape of pools, specific for Active and Offline. **API Key Scope**: on_tapes_files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <returns>Task of ApiResponse (OnTapesFileCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<OnTapesFileCollection>> IndexOnTapesFilesByPoolAsyncWithHttpInfo (string poolId, int? limit = default(int?), int? offset = default(int?), string name = default(string), string type = default(string), string size = default(string))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling FilesApi->IndexOnTapesFilesByPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OnTapesFileCollection>("/pools/{pool_id}/on_tapes_files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexOnTapesFilesByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays tapes containing specific file, related to the specific pool. **API Key Scope**: files / tapes
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>TapeCollection</returns>
        public TapeCollection IndexTapesByFileByPool (string poolId, int fileId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeCollection> localVarResponse = IndexTapesByFileByPoolWithHttpInfo(poolId, fileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays tapes containing specific file, related to the specific pool. **API Key Scope**: files / tapes
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>ApiResponse of TapeCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TapeCollection > IndexTapesByFileByPoolWithHttpInfo (string poolId, int fileId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling FilesApi->IndexTapesByFileByPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TapeCollection >("/pools/{pool_id}/files/{file_id}/tapes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTapesByFileByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays tapes containing specific file, related to the specific pool. **API Key Scope**: files / tapes
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of TapeCollection</returns>
        public async System.Threading.Tasks.Task<TapeCollection> IndexTapesByFileByPoolAsync (string poolId, int fileId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeCollection> localVarResponse = await IndexTapesByFileByPoolAsyncWithHttpInfo(poolId, fileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays tapes containing specific file, related to the specific pool. **API Key Scope**: files / tapes
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of ApiResponse (TapeCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TapeCollection>> IndexTapesByFileByPoolAsyncWithHttpInfo (string poolId, int fileId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling FilesApi->IndexTapesByFileByPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TapeCollection>("/pools/{pool_id}/files/{file_id}/tapes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTapesByFileByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays tapes containing specific file, related to the specific task. **API Key Scope**: files / tapes
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>TapeCollection</returns>
        public TapeCollection IndexTapesByFileByTask (string taskId, int fileId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeCollection> localVarResponse = IndexTapesByFileByTaskWithHttpInfo(taskId, fileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays tapes containing specific file, related to the specific task. **API Key Scope**: files / tapes
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>ApiResponse of TapeCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TapeCollection > IndexTapesByFileByTaskWithHttpInfo (string taskId, int fileId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling FilesApi->IndexTapesByFileByTask");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TapeCollection >("/tasks/{task_id}/files/{file_id}/tapes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTapesByFileByTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays tapes containing specific file, related to the specific task. **API Key Scope**: files / tapes
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of TapeCollection</returns>
        public async System.Threading.Tasks.Task<TapeCollection> IndexTapesByFileByTaskAsync (string taskId, int fileId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeCollection> localVarResponse = await IndexTapesByFileByTaskAsyncWithHttpInfo(taskId, fileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays tapes containing specific file, related to the specific task. **API Key Scope**: files / tapes
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of ApiResponse (TapeCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TapeCollection>> IndexTapesByFileByTaskAsyncWithHttpInfo (string taskId, int fileId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling FilesApi->IndexTapesByFileByTask");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TapeCollection>("/tasks/{task_id}/files/{file_id}/tapes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTapesByFileByTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays tapes containing specific file, related to the specific task. **API Key Scope**: files / tapes
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>TapeCollection</returns>
        public TapeCollection IndexTapesByFileByTaskExecution (string taskExecutionId, int fileId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeCollection> localVarResponse = IndexTapesByFileByTaskExecutionWithHttpInfo(taskExecutionId, fileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays tapes containing specific file, related to the specific task. **API Key Scope**: files / tapes
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>ApiResponse of TapeCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TapeCollection > IndexTapesByFileByTaskExecutionWithHttpInfo (string taskExecutionId, int fileId)
        {
            // verify the required parameter 'taskExecutionId' is set
            if (taskExecutionId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskExecutionId' when calling FilesApi->IndexTapesByFileByTaskExecution");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskExecutionId != null)
                localVarRequestOptions.PathParameters.Add("task_execution_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskExecutionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TapeCollection >("/task_executions/{task_execution_id}/files/{file_id}/tapes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTapesByFileByTaskExecution", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays tapes containing specific file, related to the specific task. **API Key Scope**: files / tapes
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of TapeCollection</returns>
        public async System.Threading.Tasks.Task<TapeCollection> IndexTapesByFileByTaskExecutionAsync (string taskExecutionId, int fileId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeCollection> localVarResponse = await IndexTapesByFileByTaskExecutionAsyncWithHttpInfo(taskExecutionId, fileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays tapes containing specific file, related to the specific task. **API Key Scope**: files / tapes
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of ApiResponse (TapeCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TapeCollection>> IndexTapesByFileByTaskExecutionAsyncWithHttpInfo (string taskExecutionId, int fileId)
        {
            // verify the required parameter 'taskExecutionId' is set
            if (taskExecutionId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskExecutionId' when calling FilesApi->IndexTapesByFileByTaskExecution");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskExecutionId != null)
                localVarRequestOptions.PathParameters.Add("task_execution_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskExecutionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TapeCollection>("/task_executions/{task_execution_id}/files/{file_id}/tapes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTapesByFileByTaskExecution", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays tapes containing specific file, related to the specific task. **API Key Scope**: files / tapes
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>TapeCollection</returns>
        public TapeCollection IndexTapesByFileByTaskExecutionByTask (string taskId, string taskExecutionId, int fileId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeCollection> localVarResponse = IndexTapesByFileByTaskExecutionByTaskWithHttpInfo(taskId, taskExecutionId, fileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays tapes containing specific file, related to the specific task. **API Key Scope**: files / tapes
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>ApiResponse of TapeCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TapeCollection > IndexTapesByFileByTaskExecutionByTaskWithHttpInfo (string taskId, string taskExecutionId, int fileId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling FilesApi->IndexTapesByFileByTaskExecutionByTask");

            // verify the required parameter 'taskExecutionId' is set
            if (taskExecutionId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskExecutionId' when calling FilesApi->IndexTapesByFileByTaskExecutionByTask");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (taskExecutionId != null)
                localVarRequestOptions.PathParameters.Add("task_execution_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskExecutionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TapeCollection >("/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_id}/tapes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTapesByFileByTaskExecutionByTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays tapes containing specific file, related to the specific task. **API Key Scope**: files / tapes
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of TapeCollection</returns>
        public async System.Threading.Tasks.Task<TapeCollection> IndexTapesByFileByTaskExecutionByTaskAsync (string taskId, string taskExecutionId, int fileId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeCollection> localVarResponse = await IndexTapesByFileByTaskExecutionByTaskAsyncWithHttpInfo(taskId, taskExecutionId, fileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays tapes containing specific file, related to the specific task. **API Key Scope**: files / tapes
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of ApiResponse (TapeCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TapeCollection>> IndexTapesByFileByTaskExecutionByTaskAsyncWithHttpInfo (string taskId, string taskExecutionId, int fileId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling FilesApi->IndexTapesByFileByTaskExecutionByTask");

            // verify the required parameter 'taskExecutionId' is set
            if (taskExecutionId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskExecutionId' when calling FilesApi->IndexTapesByFileByTaskExecutionByTask");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (taskExecutionId != null)
                localVarRequestOptions.PathParameters.Add("task_execution_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskExecutionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TapeCollection>("/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_id}/tapes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTapesByFileByTaskExecutionByTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files under a specific folder on tape of pools, specific for Active and Offline. **API Key Scope**: on_tapes_files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <returns>OnTapesFileCollection</returns>
        public OnTapesFileCollection OnTapesFilesChildrenByPool (string poolId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string name = default(string), string type = default(string), string size = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<OnTapesFileCollection> localVarResponse = OnTapesFilesChildrenByPoolWithHttpInfo(poolId, fileParentId, limit, offset, name, type, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists files under a specific folder on tape of pools, specific for Active and Offline. **API Key Scope**: on_tapes_files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <returns>ApiResponse of OnTapesFileCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< OnTapesFileCollection > OnTapesFilesChildrenByPoolWithHttpInfo (string poolId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string name = default(string), string type = default(string), string size = default(string))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling FilesApi->OnTapesFilesChildrenByPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_parent_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileParentId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< OnTapesFileCollection >("/pools/{pool_id}/on_tapes_files/{file_parent_id}/children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OnTapesFilesChildrenByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists files under a specific folder on tape of pools, specific for Active and Offline. **API Key Scope**: on_tapes_files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <returns>Task of OnTapesFileCollection</returns>
        public async System.Threading.Tasks.Task<OnTapesFileCollection> OnTapesFilesChildrenByPoolAsync (string poolId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string name = default(string), string type = default(string), string size = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<OnTapesFileCollection> localVarResponse = await OnTapesFilesChildrenByPoolAsyncWithHttpInfo(poolId, fileParentId, limit, offset, name, type, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists files under a specific folder on tape of pools, specific for Active and Offline. **API Key Scope**: on_tapes_files / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileParentId">Numeric ID of parent folder.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="size">Filter on size (optional)</param>
        /// <returns>Task of ApiResponse (OnTapesFileCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<OnTapesFileCollection>> OnTapesFilesChildrenByPoolAsyncWithHttpInfo (string poolId, int fileParentId, int? limit = default(int?), int? offset = default(int?), string name = default(string), string type = default(string), string size = default(string))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling FilesApi->OnTapesFilesChildrenByPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_parent_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileParentId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OnTapesFileCollection>("/pools/{pool_id}/on_tapes_files/{file_parent_id}/children", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OnTapesFilesChildrenByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific file. **API Key Scope**: files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>NodeumFileWithPath</returns>
        public NodeumFileWithPath ShowFile (int fileId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileWithPath> localVarResponse = ShowFileWithHttpInfo(fileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific file. **API Key Scope**: files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>ApiResponse of NodeumFileWithPath</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NodeumFileWithPath > ShowFileWithHttpInfo (int fileId)
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("file_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< NodeumFileWithPath >("/files/{file_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific file. **API Key Scope**: files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of NodeumFileWithPath</returns>
        public async System.Threading.Tasks.Task<NodeumFileWithPath> ShowFileAsync (int fileId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileWithPath> localVarResponse = await ShowFileAsyncWithHttpInfo(fileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific file. **API Key Scope**: files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of ApiResponse (NodeumFileWithPath)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileWithPath>> ShowFileAsyncWithHttpInfo (int fileId)
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("file_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NodeumFileWithPath>("/files/{file_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific file. **API Key Scope**: files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>NodeumFileWithPath</returns>
        public NodeumFileWithPath ShowFileByContainer (string containerId, int fileId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileWithPath> localVarResponse = ShowFileByContainerWithHttpInfo(containerId, fileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific file. **API Key Scope**: files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>ApiResponse of NodeumFileWithPath</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NodeumFileWithPath > ShowFileByContainerWithHttpInfo (string containerId, int fileId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerId' when calling FilesApi->ShowFileByContainer");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (containerId != null)
                localVarRequestOptions.PathParameters.Add("container_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< NodeumFileWithPath >("/containers/{container_id}/files/{file_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowFileByContainer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific file. **API Key Scope**: files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of NodeumFileWithPath</returns>
        public async System.Threading.Tasks.Task<NodeumFileWithPath> ShowFileByContainerAsync (string containerId, int fileId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileWithPath> localVarResponse = await ShowFileByContainerAsyncWithHttpInfo(containerId, fileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific file. **API Key Scope**: files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of ApiResponse (NodeumFileWithPath)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileWithPath>> ShowFileByContainerAsyncWithHttpInfo (string containerId, int fileId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerId' when calling FilesApi->ShowFileByContainer");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (containerId != null)
                localVarRequestOptions.PathParameters.Add("container_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NodeumFileWithPath>("/containers/{container_id}/files/{file_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowFileByContainer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific file. **API Key Scope**: files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>NodeumFileWithPath</returns>
        public NodeumFileWithPath ShowFileByPool (string poolId, int fileId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileWithPath> localVarResponse = ShowFileByPoolWithHttpInfo(poolId, fileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific file. **API Key Scope**: files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>ApiResponse of NodeumFileWithPath</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NodeumFileWithPath > ShowFileByPoolWithHttpInfo (string poolId, int fileId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling FilesApi->ShowFileByPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< NodeumFileWithPath >("/pools/{pool_id}/files/{file_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowFileByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific file. **API Key Scope**: files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of NodeumFileWithPath</returns>
        public async System.Threading.Tasks.Task<NodeumFileWithPath> ShowFileByPoolAsync (string poolId, int fileId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileWithPath> localVarResponse = await ShowFileByPoolAsyncWithHttpInfo(poolId, fileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific file. **API Key Scope**: files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of ApiResponse (NodeumFileWithPath)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileWithPath>> ShowFileByPoolAsyncWithHttpInfo (string poolId, int fileId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling FilesApi->ShowFileByPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NodeumFileWithPath>("/pools/{pool_id}/files/{file_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowFileByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific file. **API Key Scope**: files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>NodeumFileWithPath</returns>
        public NodeumFileWithPath ShowFileByTask (string taskId, int fileId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileWithPath> localVarResponse = ShowFileByTaskWithHttpInfo(taskId, fileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific file. **API Key Scope**: files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>ApiResponse of NodeumFileWithPath</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NodeumFileWithPath > ShowFileByTaskWithHttpInfo (string taskId, int fileId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling FilesApi->ShowFileByTask");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< NodeumFileWithPath >("/tasks/{task_id}/files/{file_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowFileByTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific file. **API Key Scope**: files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of NodeumFileWithPath</returns>
        public async System.Threading.Tasks.Task<NodeumFileWithPath> ShowFileByTaskAsync (string taskId, int fileId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileWithPath> localVarResponse = await ShowFileByTaskAsyncWithHttpInfo(taskId, fileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific file. **API Key Scope**: files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of ApiResponse (NodeumFileWithPath)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileWithPath>> ShowFileByTaskAsyncWithHttpInfo (string taskId, int fileId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling FilesApi->ShowFileByTask");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NodeumFileWithPath>("/tasks/{task_id}/files/{file_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowFileByTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific file. **API Key Scope**: files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>NodeumFileWithPath</returns>
        public NodeumFileWithPath ShowFileByTaskExecution (string taskExecutionId, int fileId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileWithPath> localVarResponse = ShowFileByTaskExecutionWithHttpInfo(taskExecutionId, fileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific file. **API Key Scope**: files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>ApiResponse of NodeumFileWithPath</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NodeumFileWithPath > ShowFileByTaskExecutionWithHttpInfo (string taskExecutionId, int fileId)
        {
            // verify the required parameter 'taskExecutionId' is set
            if (taskExecutionId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskExecutionId' when calling FilesApi->ShowFileByTaskExecution");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskExecutionId != null)
                localVarRequestOptions.PathParameters.Add("task_execution_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskExecutionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< NodeumFileWithPath >("/task_executions/{task_execution_id}/files/{file_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowFileByTaskExecution", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific file. **API Key Scope**: files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of NodeumFileWithPath</returns>
        public async System.Threading.Tasks.Task<NodeumFileWithPath> ShowFileByTaskExecutionAsync (string taskExecutionId, int fileId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileWithPath> localVarResponse = await ShowFileByTaskExecutionAsyncWithHttpInfo(taskExecutionId, fileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific file. **API Key Scope**: files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of ApiResponse (NodeumFileWithPath)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileWithPath>> ShowFileByTaskExecutionAsyncWithHttpInfo (string taskExecutionId, int fileId)
        {
            // verify the required parameter 'taskExecutionId' is set
            if (taskExecutionId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskExecutionId' when calling FilesApi->ShowFileByTaskExecution");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskExecutionId != null)
                localVarRequestOptions.PathParameters.Add("task_execution_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskExecutionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NodeumFileWithPath>("/task_executions/{task_execution_id}/files/{file_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowFileByTaskExecution", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific file. **API Key Scope**: files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>NodeumFileWithPath</returns>
        public NodeumFileWithPath ShowFileByTaskExecutionByTask (string taskId, string taskExecutionId, int fileId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileWithPath> localVarResponse = ShowFileByTaskExecutionByTaskWithHttpInfo(taskId, taskExecutionId, fileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific file. **API Key Scope**: files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>ApiResponse of NodeumFileWithPath</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NodeumFileWithPath > ShowFileByTaskExecutionByTaskWithHttpInfo (string taskId, string taskExecutionId, int fileId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling FilesApi->ShowFileByTaskExecutionByTask");

            // verify the required parameter 'taskExecutionId' is set
            if (taskExecutionId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskExecutionId' when calling FilesApi->ShowFileByTaskExecutionByTask");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (taskExecutionId != null)
                localVarRequestOptions.PathParameters.Add("task_execution_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskExecutionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< NodeumFileWithPath >("/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowFileByTaskExecutionByTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific file. **API Key Scope**: files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of NodeumFileWithPath</returns>
        public async System.Threading.Tasks.Task<NodeumFileWithPath> ShowFileByTaskExecutionByTaskAsync (string taskId, string taskExecutionId, int fileId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileWithPath> localVarResponse = await ShowFileByTaskExecutionByTaskAsyncWithHttpInfo(taskId, taskExecutionId, fileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific file. **API Key Scope**: files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of ApiResponse (NodeumFileWithPath)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NodeumFileWithPath>> ShowFileByTaskExecutionByTaskAsyncWithHttpInfo (string taskId, string taskExecutionId, int fileId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling FilesApi->ShowFileByTaskExecutionByTask");

            // verify the required parameter 'taskExecutionId' is set
            if (taskExecutionId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskExecutionId' when calling FilesApi->ShowFileByTaskExecutionByTask");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (taskExecutionId != null)
                localVarRequestOptions.PathParameters.Add("task_execution_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskExecutionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NodeumFileWithPath>("/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowFileByTaskExecutionByTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific file on tape of pools, specific for Data Exchange. **API Key Scope**: import_files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>ImportFileWithPath</returns>
        public ImportFileWithPath ShowImportFileByPool (string poolId, int fileId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ImportFileWithPath> localVarResponse = ShowImportFileByPoolWithHttpInfo(poolId, fileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific file on tape of pools, specific for Data Exchange. **API Key Scope**: import_files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>ApiResponse of ImportFileWithPath</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ImportFileWithPath > ShowImportFileByPoolWithHttpInfo (string poolId, int fileId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling FilesApi->ShowImportFileByPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ImportFileWithPath >("/pools/{pool_id}/import_files/{file_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowImportFileByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific file on tape of pools, specific for Data Exchange. **API Key Scope**: import_files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of ImportFileWithPath</returns>
        public async System.Threading.Tasks.Task<ImportFileWithPath> ShowImportFileByPoolAsync (string poolId, int fileId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ImportFileWithPath> localVarResponse = await ShowImportFileByPoolAsyncWithHttpInfo(poolId, fileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific file on tape of pools, specific for Data Exchange. **API Key Scope**: import_files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of ApiResponse (ImportFileWithPath)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ImportFileWithPath>> ShowImportFileByPoolAsyncWithHttpInfo (string poolId, int fileId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling FilesApi->ShowImportFileByPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ImportFileWithPath>("/pools/{pool_id}/import_files/{file_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowImportFileByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific file on tape of pools, specific for Active and Offline. **API Key Scope**: on_tapes_files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>OnTapesFile</returns>
        public OnTapesFile ShowOnTapeFileByPool (string poolId, int fileId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<OnTapesFile> localVarResponse = ShowOnTapeFileByPoolWithHttpInfo(poolId, fileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific file on tape of pools, specific for Active and Offline. **API Key Scope**: on_tapes_files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>ApiResponse of OnTapesFile</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< OnTapesFile > ShowOnTapeFileByPoolWithHttpInfo (string poolId, int fileId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling FilesApi->ShowOnTapeFileByPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< OnTapesFile >("/pools/{pool_id}/on_tapes_files/{file_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowOnTapeFileByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific file on tape of pools, specific for Active and Offline. **API Key Scope**: on_tapes_files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of OnTapesFile</returns>
        public async System.Threading.Tasks.Task<OnTapesFile> ShowOnTapeFileByPoolAsync (string poolId, int fileId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<OnTapesFile> localVarResponse = await ShowOnTapeFileByPoolAsyncWithHttpInfo(poolId, fileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific file on tape of pools, specific for Active and Offline. **API Key Scope**: on_tapes_files / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="fileId">Numeric ID of file.</param>
        /// <returns>Task of ApiResponse (OnTapesFile)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<OnTapesFile>> ShowOnTapeFileByPoolAsyncWithHttpInfo (string poolId, int fileId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling FilesApi->ShowOnTapeFileByPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.PathParameters.Add("file_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OnTapesFile>("/pools/{pool_id}/on_tapes_files/{file_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowOnTapeFileByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
