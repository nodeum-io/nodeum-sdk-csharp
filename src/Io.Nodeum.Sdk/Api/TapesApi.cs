/* 
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Io.Nodeum.Sdk.Client;
using Io.Nodeum.Sdk.Model;

namespace Io.Nodeum.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITapesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Destroys a specific tape. Only when it&#39;s an orphan.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns></returns>
        void DestroyTape (string tapeId);

        /// <summary>
        /// Destroys a specific tape. Only when it&#39;s an orphan.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyTapeWithHttpInfo (string tapeId);
        /// <summary>
        /// List all tape statistics.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_stats / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <returns>TapeStatCollection</returns>
        TapeStatCollection IndexTapeStats (int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// List all tape statistics.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_stats / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <returns>ApiResponse of TapeStatCollection</returns>
        ApiResponse<TapeStatCollection> IndexTapeStatsWithHttpInfo (int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Lists all tapes.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="tapeLibraryId">Filter on tape library id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="locked">Filter on locked (optional)</param>
        /// <param name="scratch">Filter on scratch (optional)</param>
        /// <param name="cleaning">Filter on cleaning (optional)</param>
        /// <param name="writeProtect">Filter on write protect (optional)</param>
        /// <param name="mounted">Filter on mounted (optional)</param>
        /// <param name="ejected">Filter on ejected (optional)</param>
        /// <param name="known">Filter on known (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="dateIn">Filter on date in (optional)</param>
        /// <param name="dateMove">Filter on date move (optional)</param>
        /// <param name="free">Filter on free (optional)</param>
        /// <param name="max">Filter on max (optional)</param>
        /// <param name="lastSizeUpdate">Filter on last size update (optional)</param>
        /// <param name="lastMaintenance">Filter on last maintenance (optional)</param>
        /// <param name="lastRepack">Filter on last repack (optional)</param>
        /// <param name="repackStatus">Filter on repack status (optional)</param>
        /// <param name="hash">Filter on hash (optional)</param>
        /// <param name="forceImportType">Filter on force import type (optional)</param>
        /// <param name="needToCheck">Filter on need to check (optional)</param>
        /// <returns>TapeCollection</returns>
        TapeCollection IndexTapes (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string tapeLibraryId = default(string), string poolId = default(string), string barcode = default(string), string location = default(string), string type = default(string), string locked = default(string), string scratch = default(string), string cleaning = default(string), string writeProtect = default(string), string mounted = default(string), string ejected = default(string), string known = default(string), string mountCount = default(string), string dateIn = default(string), string dateMove = default(string), string free = default(string), string max = default(string), string lastSizeUpdate = default(string), string lastMaintenance = default(string), string lastRepack = default(string), string repackStatus = default(string), string hash = default(string), string forceImportType = default(string), string needToCheck = default(string));

        /// <summary>
        /// Lists all tapes.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="tapeLibraryId">Filter on tape library id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="locked">Filter on locked (optional)</param>
        /// <param name="scratch">Filter on scratch (optional)</param>
        /// <param name="cleaning">Filter on cleaning (optional)</param>
        /// <param name="writeProtect">Filter on write protect (optional)</param>
        /// <param name="mounted">Filter on mounted (optional)</param>
        /// <param name="ejected">Filter on ejected (optional)</param>
        /// <param name="known">Filter on known (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="dateIn">Filter on date in (optional)</param>
        /// <param name="dateMove">Filter on date move (optional)</param>
        /// <param name="free">Filter on free (optional)</param>
        /// <param name="max">Filter on max (optional)</param>
        /// <param name="lastSizeUpdate">Filter on last size update (optional)</param>
        /// <param name="lastMaintenance">Filter on last maintenance (optional)</param>
        /// <param name="lastRepack">Filter on last repack (optional)</param>
        /// <param name="repackStatus">Filter on repack status (optional)</param>
        /// <param name="hash">Filter on hash (optional)</param>
        /// <param name="forceImportType">Filter on force import type (optional)</param>
        /// <param name="needToCheck">Filter on need to check (optional)</param>
        /// <returns>ApiResponse of TapeCollection</returns>
        ApiResponse<TapeCollection> IndexTapesWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string tapeLibraryId = default(string), string poolId = default(string), string barcode = default(string), string location = default(string), string type = default(string), string locked = default(string), string scratch = default(string), string cleaning = default(string), string writeProtect = default(string), string mounted = default(string), string ejected = default(string), string known = default(string), string mountCount = default(string), string dateIn = default(string), string dateMove = default(string), string free = default(string), string max = default(string), string lastSizeUpdate = default(string), string lastMaintenance = default(string), string lastRepack = default(string), string repackStatus = default(string), string hash = default(string), string forceImportType = default(string), string needToCheck = default(string));
        /// <summary>
        /// Lists all tapes.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="tapeLibraryId">Filter on tape library id (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="locked">Filter on locked (optional)</param>
        /// <param name="scratch">Filter on scratch (optional)</param>
        /// <param name="cleaning">Filter on cleaning (optional)</param>
        /// <param name="writeProtect">Filter on write protect (optional)</param>
        /// <param name="mounted">Filter on mounted (optional)</param>
        /// <param name="ejected">Filter on ejected (optional)</param>
        /// <param name="known">Filter on known (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="dateIn">Filter on date in (optional)</param>
        /// <param name="dateMove">Filter on date move (optional)</param>
        /// <param name="free">Filter on free (optional)</param>
        /// <param name="max">Filter on max (optional)</param>
        /// <param name="lastSizeUpdate">Filter on last size update (optional)</param>
        /// <param name="lastMaintenance">Filter on last maintenance (optional)</param>
        /// <param name="lastRepack">Filter on last repack (optional)</param>
        /// <param name="repackStatus">Filter on repack status (optional)</param>
        /// <param name="hash">Filter on hash (optional)</param>
        /// <param name="forceImportType">Filter on force import type (optional)</param>
        /// <param name="needToCheck">Filter on need to check (optional)</param>
        /// <returns>TapeCollection</returns>
        TapeCollection IndexTapesByPool (string poolId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string tapeLibraryId = default(string), string barcode = default(string), string location = default(string), string type = default(string), string locked = default(string), string scratch = default(string), string cleaning = default(string), string writeProtect = default(string), string mounted = default(string), string ejected = default(string), string known = default(string), string mountCount = default(string), string dateIn = default(string), string dateMove = default(string), string free = default(string), string max = default(string), string lastSizeUpdate = default(string), string lastMaintenance = default(string), string lastRepack = default(string), string repackStatus = default(string), string hash = default(string), string forceImportType = default(string), string needToCheck = default(string));

        /// <summary>
        /// Lists all tapes.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="tapeLibraryId">Filter on tape library id (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="locked">Filter on locked (optional)</param>
        /// <param name="scratch">Filter on scratch (optional)</param>
        /// <param name="cleaning">Filter on cleaning (optional)</param>
        /// <param name="writeProtect">Filter on write protect (optional)</param>
        /// <param name="mounted">Filter on mounted (optional)</param>
        /// <param name="ejected">Filter on ejected (optional)</param>
        /// <param name="known">Filter on known (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="dateIn">Filter on date in (optional)</param>
        /// <param name="dateMove">Filter on date move (optional)</param>
        /// <param name="free">Filter on free (optional)</param>
        /// <param name="max">Filter on max (optional)</param>
        /// <param name="lastSizeUpdate">Filter on last size update (optional)</param>
        /// <param name="lastMaintenance">Filter on last maintenance (optional)</param>
        /// <param name="lastRepack">Filter on last repack (optional)</param>
        /// <param name="repackStatus">Filter on repack status (optional)</param>
        /// <param name="hash">Filter on hash (optional)</param>
        /// <param name="forceImportType">Filter on force import type (optional)</param>
        /// <param name="needToCheck">Filter on need to check (optional)</param>
        /// <returns>ApiResponse of TapeCollection</returns>
        ApiResponse<TapeCollection> IndexTapesByPoolWithHttpInfo (string poolId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string tapeLibraryId = default(string), string barcode = default(string), string location = default(string), string type = default(string), string locked = default(string), string scratch = default(string), string cleaning = default(string), string writeProtect = default(string), string mounted = default(string), string ejected = default(string), string known = default(string), string mountCount = default(string), string dateIn = default(string), string dateMove = default(string), string free = default(string), string max = default(string), string lastSizeUpdate = default(string), string lastMaintenance = default(string), string lastRepack = default(string), string repackStatus = default(string), string hash = default(string), string forceImportType = default(string), string needToCheck = default(string));
        /// <summary>
        /// Lists all tapes.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="locked">Filter on locked (optional)</param>
        /// <param name="scratch">Filter on scratch (optional)</param>
        /// <param name="cleaning">Filter on cleaning (optional)</param>
        /// <param name="writeProtect">Filter on write protect (optional)</param>
        /// <param name="mounted">Filter on mounted (optional)</param>
        /// <param name="ejected">Filter on ejected (optional)</param>
        /// <param name="known">Filter on known (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="dateIn">Filter on date in (optional)</param>
        /// <param name="dateMove">Filter on date move (optional)</param>
        /// <param name="free">Filter on free (optional)</param>
        /// <param name="max">Filter on max (optional)</param>
        /// <param name="lastSizeUpdate">Filter on last size update (optional)</param>
        /// <param name="lastMaintenance">Filter on last maintenance (optional)</param>
        /// <param name="lastRepack">Filter on last repack (optional)</param>
        /// <param name="repackStatus">Filter on repack status (optional)</param>
        /// <param name="hash">Filter on hash (optional)</param>
        /// <param name="forceImportType">Filter on force import type (optional)</param>
        /// <param name="needToCheck">Filter on need to check (optional)</param>
        /// <returns>TapeCollection</returns>
        TapeCollection IndexTapesByTapeLibrary (string tapeLibraryId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string poolId = default(string), string barcode = default(string), string location = default(string), string type = default(string), string locked = default(string), string scratch = default(string), string cleaning = default(string), string writeProtect = default(string), string mounted = default(string), string ejected = default(string), string known = default(string), string mountCount = default(string), string dateIn = default(string), string dateMove = default(string), string free = default(string), string max = default(string), string lastSizeUpdate = default(string), string lastMaintenance = default(string), string lastRepack = default(string), string repackStatus = default(string), string hash = default(string), string forceImportType = default(string), string needToCheck = default(string));

        /// <summary>
        /// Lists all tapes.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="locked">Filter on locked (optional)</param>
        /// <param name="scratch">Filter on scratch (optional)</param>
        /// <param name="cleaning">Filter on cleaning (optional)</param>
        /// <param name="writeProtect">Filter on write protect (optional)</param>
        /// <param name="mounted">Filter on mounted (optional)</param>
        /// <param name="ejected">Filter on ejected (optional)</param>
        /// <param name="known">Filter on known (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="dateIn">Filter on date in (optional)</param>
        /// <param name="dateMove">Filter on date move (optional)</param>
        /// <param name="free">Filter on free (optional)</param>
        /// <param name="max">Filter on max (optional)</param>
        /// <param name="lastSizeUpdate">Filter on last size update (optional)</param>
        /// <param name="lastMaintenance">Filter on last maintenance (optional)</param>
        /// <param name="lastRepack">Filter on last repack (optional)</param>
        /// <param name="repackStatus">Filter on repack status (optional)</param>
        /// <param name="hash">Filter on hash (optional)</param>
        /// <param name="forceImportType">Filter on force import type (optional)</param>
        /// <param name="needToCheck">Filter on need to check (optional)</param>
        /// <returns>ApiResponse of TapeCollection</returns>
        ApiResponse<TapeCollection> IndexTapesByTapeLibraryWithHttpInfo (string tapeLibraryId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string poolId = default(string), string barcode = default(string), string location = default(string), string type = default(string), string locked = default(string), string scratch = default(string), string cleaning = default(string), string writeProtect = default(string), string mounted = default(string), string ejected = default(string), string known = default(string), string mountCount = default(string), string dateIn = default(string), string dateMove = default(string), string free = default(string), string max = default(string), string lastSizeUpdate = default(string), string lastMaintenance = default(string), string lastRepack = default(string), string repackStatus = default(string), string hash = default(string), string forceImportType = default(string), string needToCheck = default(string));
        /// <summary>
        /// Get mount status of Tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>MountStatus</returns>
        MountStatus MountStatusTape (string tapeId);

        /// <summary>
        /// Get mount status of Tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>ApiResponse of MountStatus</returns>
        ApiResponse<MountStatus> MountStatusTapeWithHttpInfo (string tapeId);
        /// <summary>
        /// Get mount status of Tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>MountStatus</returns>
        MountStatus MountStatusTapeByPool (string poolId, string tapeId);

        /// <summary>
        /// Get mount status of Tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>ApiResponse of MountStatus</returns>
        ApiResponse<MountStatus> MountStatusTapeByPoolWithHttpInfo (string poolId, string tapeId);
        /// <summary>
        /// Get mount status of Tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>MountStatus</returns>
        MountStatus MountStatusTapeByTapeLibrary (string tapeLibraryId, string tapeId);

        /// <summary>
        /// Get mount status of Tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>ApiResponse of MountStatus</returns>
        ApiResponse<MountStatus> MountStatusTapeByTapeLibraryWithHttpInfo (string tapeLibraryId, string tapeId);
        /// <summary>
        /// Displays a specific tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Tape</returns>
        Tape ShowTape (string tapeId);

        /// <summary>
        /// Displays a specific tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>ApiResponse of Tape</returns>
        ApiResponse<Tape> ShowTapeWithHttpInfo (string tapeId);
        /// <summary>
        /// Displays a specific tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Tape</returns>
        Tape ShowTapeByPool (string poolId, string tapeId);

        /// <summary>
        /// Displays a specific tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>ApiResponse of Tape</returns>
        ApiResponse<Tape> ShowTapeByPoolWithHttpInfo (string poolId, string tapeId);
        /// <summary>
        /// Displays a specific tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Tape</returns>
        Tape ShowTapeByTapeLibrary (string tapeLibraryId, string tapeId);

        /// <summary>
        /// Displays a specific tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>ApiResponse of Tape</returns>
        ApiResponse<Tape> ShowTapeByTapeLibraryWithHttpInfo (string tapeLibraryId, string tapeId);
        /// <summary>
        /// Display statistic for a specific tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_stats / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>TapeStat</returns>
        TapeStat ShowTapeStat (string tapeId);

        /// <summary>
        /// Display statistic for a specific tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_stats / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>ApiResponse of TapeStat</returns>
        ApiResponse<TapeStat> ShowTapeStatWithHttpInfo (string tapeId);
        /// <summary>
        /// Display statistic for a specific tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_stats / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>TapeStat</returns>
        TapeStat ShowTapeStatByPool (string poolId, string tapeId);

        /// <summary>
        /// Display statistic for a specific tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_stats / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>ApiResponse of TapeStat</returns>
        ApiResponse<TapeStat> ShowTapeStatByPoolWithHttpInfo (string poolId, string tapeId);
        /// <summary>
        /// Display statistic for a specific tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_stats / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>TapeStat</returns>
        TapeStat ShowTapeStatByTapeLibrary (string tapeLibraryId, string tapeId);

        /// <summary>
        /// Display statistic for a specific tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_stats / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>ApiResponse of TapeStat</returns>
        ApiResponse<TapeStat> ShowTapeStatByTapeLibraryWithHttpInfo (string tapeLibraryId, string tapeId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITapesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Destroys a specific tape. Only when it&#39;s an orphan.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyTapeAsync (string tapeId);

        /// <summary>
        /// Destroys a specific tape. Only when it&#39;s an orphan.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyTapeAsyncWithHttpInfo (string tapeId);
        /// <summary>
        /// List all tape statistics.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_stats / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <returns>Task of TapeStatCollection</returns>
        System.Threading.Tasks.Task<TapeStatCollection> IndexTapeStatsAsync (int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// List all tape statistics.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_stats / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <returns>Task of ApiResponse (TapeStatCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeStatCollection>> IndexTapeStatsAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Lists all tapes.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="tapeLibraryId">Filter on tape library id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="locked">Filter on locked (optional)</param>
        /// <param name="scratch">Filter on scratch (optional)</param>
        /// <param name="cleaning">Filter on cleaning (optional)</param>
        /// <param name="writeProtect">Filter on write protect (optional)</param>
        /// <param name="mounted">Filter on mounted (optional)</param>
        /// <param name="ejected">Filter on ejected (optional)</param>
        /// <param name="known">Filter on known (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="dateIn">Filter on date in (optional)</param>
        /// <param name="dateMove">Filter on date move (optional)</param>
        /// <param name="free">Filter on free (optional)</param>
        /// <param name="max">Filter on max (optional)</param>
        /// <param name="lastSizeUpdate">Filter on last size update (optional)</param>
        /// <param name="lastMaintenance">Filter on last maintenance (optional)</param>
        /// <param name="lastRepack">Filter on last repack (optional)</param>
        /// <param name="repackStatus">Filter on repack status (optional)</param>
        /// <param name="hash">Filter on hash (optional)</param>
        /// <param name="forceImportType">Filter on force import type (optional)</param>
        /// <param name="needToCheck">Filter on need to check (optional)</param>
        /// <returns>Task of TapeCollection</returns>
        System.Threading.Tasks.Task<TapeCollection> IndexTapesAsync (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string tapeLibraryId = default(string), string poolId = default(string), string barcode = default(string), string location = default(string), string type = default(string), string locked = default(string), string scratch = default(string), string cleaning = default(string), string writeProtect = default(string), string mounted = default(string), string ejected = default(string), string known = default(string), string mountCount = default(string), string dateIn = default(string), string dateMove = default(string), string free = default(string), string max = default(string), string lastSizeUpdate = default(string), string lastMaintenance = default(string), string lastRepack = default(string), string repackStatus = default(string), string hash = default(string), string forceImportType = default(string), string needToCheck = default(string));

        /// <summary>
        /// Lists all tapes.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="tapeLibraryId">Filter on tape library id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="locked">Filter on locked (optional)</param>
        /// <param name="scratch">Filter on scratch (optional)</param>
        /// <param name="cleaning">Filter on cleaning (optional)</param>
        /// <param name="writeProtect">Filter on write protect (optional)</param>
        /// <param name="mounted">Filter on mounted (optional)</param>
        /// <param name="ejected">Filter on ejected (optional)</param>
        /// <param name="known">Filter on known (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="dateIn">Filter on date in (optional)</param>
        /// <param name="dateMove">Filter on date move (optional)</param>
        /// <param name="free">Filter on free (optional)</param>
        /// <param name="max">Filter on max (optional)</param>
        /// <param name="lastSizeUpdate">Filter on last size update (optional)</param>
        /// <param name="lastMaintenance">Filter on last maintenance (optional)</param>
        /// <param name="lastRepack">Filter on last repack (optional)</param>
        /// <param name="repackStatus">Filter on repack status (optional)</param>
        /// <param name="hash">Filter on hash (optional)</param>
        /// <param name="forceImportType">Filter on force import type (optional)</param>
        /// <param name="needToCheck">Filter on need to check (optional)</param>
        /// <returns>Task of ApiResponse (TapeCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeCollection>> IndexTapesAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string tapeLibraryId = default(string), string poolId = default(string), string barcode = default(string), string location = default(string), string type = default(string), string locked = default(string), string scratch = default(string), string cleaning = default(string), string writeProtect = default(string), string mounted = default(string), string ejected = default(string), string known = default(string), string mountCount = default(string), string dateIn = default(string), string dateMove = default(string), string free = default(string), string max = default(string), string lastSizeUpdate = default(string), string lastMaintenance = default(string), string lastRepack = default(string), string repackStatus = default(string), string hash = default(string), string forceImportType = default(string), string needToCheck = default(string));
        /// <summary>
        /// Lists all tapes.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="tapeLibraryId">Filter on tape library id (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="locked">Filter on locked (optional)</param>
        /// <param name="scratch">Filter on scratch (optional)</param>
        /// <param name="cleaning">Filter on cleaning (optional)</param>
        /// <param name="writeProtect">Filter on write protect (optional)</param>
        /// <param name="mounted">Filter on mounted (optional)</param>
        /// <param name="ejected">Filter on ejected (optional)</param>
        /// <param name="known">Filter on known (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="dateIn">Filter on date in (optional)</param>
        /// <param name="dateMove">Filter on date move (optional)</param>
        /// <param name="free">Filter on free (optional)</param>
        /// <param name="max">Filter on max (optional)</param>
        /// <param name="lastSizeUpdate">Filter on last size update (optional)</param>
        /// <param name="lastMaintenance">Filter on last maintenance (optional)</param>
        /// <param name="lastRepack">Filter on last repack (optional)</param>
        /// <param name="repackStatus">Filter on repack status (optional)</param>
        /// <param name="hash">Filter on hash (optional)</param>
        /// <param name="forceImportType">Filter on force import type (optional)</param>
        /// <param name="needToCheck">Filter on need to check (optional)</param>
        /// <returns>Task of TapeCollection</returns>
        System.Threading.Tasks.Task<TapeCollection> IndexTapesByPoolAsync (string poolId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string tapeLibraryId = default(string), string barcode = default(string), string location = default(string), string type = default(string), string locked = default(string), string scratch = default(string), string cleaning = default(string), string writeProtect = default(string), string mounted = default(string), string ejected = default(string), string known = default(string), string mountCount = default(string), string dateIn = default(string), string dateMove = default(string), string free = default(string), string max = default(string), string lastSizeUpdate = default(string), string lastMaintenance = default(string), string lastRepack = default(string), string repackStatus = default(string), string hash = default(string), string forceImportType = default(string), string needToCheck = default(string));

        /// <summary>
        /// Lists all tapes.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="tapeLibraryId">Filter on tape library id (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="locked">Filter on locked (optional)</param>
        /// <param name="scratch">Filter on scratch (optional)</param>
        /// <param name="cleaning">Filter on cleaning (optional)</param>
        /// <param name="writeProtect">Filter on write protect (optional)</param>
        /// <param name="mounted">Filter on mounted (optional)</param>
        /// <param name="ejected">Filter on ejected (optional)</param>
        /// <param name="known">Filter on known (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="dateIn">Filter on date in (optional)</param>
        /// <param name="dateMove">Filter on date move (optional)</param>
        /// <param name="free">Filter on free (optional)</param>
        /// <param name="max">Filter on max (optional)</param>
        /// <param name="lastSizeUpdate">Filter on last size update (optional)</param>
        /// <param name="lastMaintenance">Filter on last maintenance (optional)</param>
        /// <param name="lastRepack">Filter on last repack (optional)</param>
        /// <param name="repackStatus">Filter on repack status (optional)</param>
        /// <param name="hash">Filter on hash (optional)</param>
        /// <param name="forceImportType">Filter on force import type (optional)</param>
        /// <param name="needToCheck">Filter on need to check (optional)</param>
        /// <returns>Task of ApiResponse (TapeCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeCollection>> IndexTapesByPoolAsyncWithHttpInfo (string poolId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string tapeLibraryId = default(string), string barcode = default(string), string location = default(string), string type = default(string), string locked = default(string), string scratch = default(string), string cleaning = default(string), string writeProtect = default(string), string mounted = default(string), string ejected = default(string), string known = default(string), string mountCount = default(string), string dateIn = default(string), string dateMove = default(string), string free = default(string), string max = default(string), string lastSizeUpdate = default(string), string lastMaintenance = default(string), string lastRepack = default(string), string repackStatus = default(string), string hash = default(string), string forceImportType = default(string), string needToCheck = default(string));
        /// <summary>
        /// Lists all tapes.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="locked">Filter on locked (optional)</param>
        /// <param name="scratch">Filter on scratch (optional)</param>
        /// <param name="cleaning">Filter on cleaning (optional)</param>
        /// <param name="writeProtect">Filter on write protect (optional)</param>
        /// <param name="mounted">Filter on mounted (optional)</param>
        /// <param name="ejected">Filter on ejected (optional)</param>
        /// <param name="known">Filter on known (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="dateIn">Filter on date in (optional)</param>
        /// <param name="dateMove">Filter on date move (optional)</param>
        /// <param name="free">Filter on free (optional)</param>
        /// <param name="max">Filter on max (optional)</param>
        /// <param name="lastSizeUpdate">Filter on last size update (optional)</param>
        /// <param name="lastMaintenance">Filter on last maintenance (optional)</param>
        /// <param name="lastRepack">Filter on last repack (optional)</param>
        /// <param name="repackStatus">Filter on repack status (optional)</param>
        /// <param name="hash">Filter on hash (optional)</param>
        /// <param name="forceImportType">Filter on force import type (optional)</param>
        /// <param name="needToCheck">Filter on need to check (optional)</param>
        /// <returns>Task of TapeCollection</returns>
        System.Threading.Tasks.Task<TapeCollection> IndexTapesByTapeLibraryAsync (string tapeLibraryId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string poolId = default(string), string barcode = default(string), string location = default(string), string type = default(string), string locked = default(string), string scratch = default(string), string cleaning = default(string), string writeProtect = default(string), string mounted = default(string), string ejected = default(string), string known = default(string), string mountCount = default(string), string dateIn = default(string), string dateMove = default(string), string free = default(string), string max = default(string), string lastSizeUpdate = default(string), string lastMaintenance = default(string), string lastRepack = default(string), string repackStatus = default(string), string hash = default(string), string forceImportType = default(string), string needToCheck = default(string));

        /// <summary>
        /// Lists all tapes.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="locked">Filter on locked (optional)</param>
        /// <param name="scratch">Filter on scratch (optional)</param>
        /// <param name="cleaning">Filter on cleaning (optional)</param>
        /// <param name="writeProtect">Filter on write protect (optional)</param>
        /// <param name="mounted">Filter on mounted (optional)</param>
        /// <param name="ejected">Filter on ejected (optional)</param>
        /// <param name="known">Filter on known (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="dateIn">Filter on date in (optional)</param>
        /// <param name="dateMove">Filter on date move (optional)</param>
        /// <param name="free">Filter on free (optional)</param>
        /// <param name="max">Filter on max (optional)</param>
        /// <param name="lastSizeUpdate">Filter on last size update (optional)</param>
        /// <param name="lastMaintenance">Filter on last maintenance (optional)</param>
        /// <param name="lastRepack">Filter on last repack (optional)</param>
        /// <param name="repackStatus">Filter on repack status (optional)</param>
        /// <param name="hash">Filter on hash (optional)</param>
        /// <param name="forceImportType">Filter on force import type (optional)</param>
        /// <param name="needToCheck">Filter on need to check (optional)</param>
        /// <returns>Task of ApiResponse (TapeCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeCollection>> IndexTapesByTapeLibraryAsyncWithHttpInfo (string tapeLibraryId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string poolId = default(string), string barcode = default(string), string location = default(string), string type = default(string), string locked = default(string), string scratch = default(string), string cleaning = default(string), string writeProtect = default(string), string mounted = default(string), string ejected = default(string), string known = default(string), string mountCount = default(string), string dateIn = default(string), string dateMove = default(string), string free = default(string), string max = default(string), string lastSizeUpdate = default(string), string lastMaintenance = default(string), string lastRepack = default(string), string repackStatus = default(string), string hash = default(string), string forceImportType = default(string), string needToCheck = default(string));
        /// <summary>
        /// Get mount status of Tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of MountStatus</returns>
        System.Threading.Tasks.Task<MountStatus> MountStatusTapeAsync (string tapeId);

        /// <summary>
        /// Get mount status of Tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of ApiResponse (MountStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<MountStatus>> MountStatusTapeAsyncWithHttpInfo (string tapeId);
        /// <summary>
        /// Get mount status of Tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of MountStatus</returns>
        System.Threading.Tasks.Task<MountStatus> MountStatusTapeByPoolAsync (string poolId, string tapeId);

        /// <summary>
        /// Get mount status of Tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of ApiResponse (MountStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<MountStatus>> MountStatusTapeByPoolAsyncWithHttpInfo (string poolId, string tapeId);
        /// <summary>
        /// Get mount status of Tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of MountStatus</returns>
        System.Threading.Tasks.Task<MountStatus> MountStatusTapeByTapeLibraryAsync (string tapeLibraryId, string tapeId);

        /// <summary>
        /// Get mount status of Tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of ApiResponse (MountStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<MountStatus>> MountStatusTapeByTapeLibraryAsyncWithHttpInfo (string tapeLibraryId, string tapeId);
        /// <summary>
        /// Displays a specific tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of Tape</returns>
        System.Threading.Tasks.Task<Tape> ShowTapeAsync (string tapeId);

        /// <summary>
        /// Displays a specific tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of ApiResponse (Tape)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tape>> ShowTapeAsyncWithHttpInfo (string tapeId);
        /// <summary>
        /// Displays a specific tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of Tape</returns>
        System.Threading.Tasks.Task<Tape> ShowTapeByPoolAsync (string poolId, string tapeId);

        /// <summary>
        /// Displays a specific tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of ApiResponse (Tape)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tape>> ShowTapeByPoolAsyncWithHttpInfo (string poolId, string tapeId);
        /// <summary>
        /// Displays a specific tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of Tape</returns>
        System.Threading.Tasks.Task<Tape> ShowTapeByTapeLibraryAsync (string tapeLibraryId, string tapeId);

        /// <summary>
        /// Displays a specific tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tapes / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of ApiResponse (Tape)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tape>> ShowTapeByTapeLibraryAsyncWithHttpInfo (string tapeLibraryId, string tapeId);
        /// <summary>
        /// Display statistic for a specific tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_stats / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of TapeStat</returns>
        System.Threading.Tasks.Task<TapeStat> ShowTapeStatAsync (string tapeId);

        /// <summary>
        /// Display statistic for a specific tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_stats / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of ApiResponse (TapeStat)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeStat>> ShowTapeStatAsyncWithHttpInfo (string tapeId);
        /// <summary>
        /// Display statistic for a specific tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_stats / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of TapeStat</returns>
        System.Threading.Tasks.Task<TapeStat> ShowTapeStatByPoolAsync (string poolId, string tapeId);

        /// <summary>
        /// Display statistic for a specific tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_stats / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of ApiResponse (TapeStat)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeStat>> ShowTapeStatByPoolAsyncWithHttpInfo (string poolId, string tapeId);
        /// <summary>
        /// Display statistic for a specific tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_stats / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of TapeStat</returns>
        System.Threading.Tasks.Task<TapeStat> ShowTapeStatByTapeLibraryAsync (string tapeLibraryId, string tapeId);

        /// <summary>
        /// Display statistic for a specific tape.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_stats / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of ApiResponse (TapeStat)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeStat>> ShowTapeStatByTapeLibraryAsyncWithHttpInfo (string tapeLibraryId, string tapeId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITapesApi : ITapesApiSync, ITapesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TapesApi : ITapesApi
    {
        private Io.Nodeum.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TapesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TapesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TapesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TapesApi(String basePath)
        {
            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                new Io.Nodeum.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TapesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TapesApi(Io.Nodeum.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TapesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TapesApi(Io.Nodeum.Sdk.Client.ISynchronousClient client,Io.Nodeum.Sdk.Client.IAsynchronousClient asyncClient, Io.Nodeum.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Io.Nodeum.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Destroys a specific tape. Only when it&#39;s an orphan. **API Key Scope**: tapes / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns></returns>
        public void DestroyTape (string tapeId)
        {
             DestroyTapeWithHttpInfo(tapeId);
        }

        /// <summary>
        /// Destroys a specific tape. Only when it&#39;s an orphan. **API Key Scope**: tapes / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse<Object> DestroyTapeWithHttpInfo (string tapeId)
        {
            // verify the required parameter 'tapeId' is set
            if (tapeId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeId' when calling TapesApi->DestroyTape");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tapeId != null)
                localVarRequestOptions.PathParameters.Add("tape_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/tapes/{tape_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific tape. Only when it&#39;s an orphan. **API Key Scope**: tapes / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyTapeAsync (string tapeId)
        {
             await DestroyTapeAsyncWithHttpInfo(tapeId);

        }

        /// <summary>
        /// Destroys a specific tape. Only when it&#39;s an orphan. **API Key Scope**: tapes / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Object>> DestroyTapeAsyncWithHttpInfo (string tapeId)
        {
            // verify the required parameter 'tapeId' is set
            if (tapeId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeId' when calling TapesApi->DestroyTape");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tapeId != null)
                localVarRequestOptions.PathParameters.Add("tape_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/tapes/{tape_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all tape statistics. **API Key Scope**: tape_stats / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <returns>TapeStatCollection</returns>
        public TapeStatCollection IndexTapeStats (int? limit = default(int?), int? offset = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeStatCollection> localVarResponse = IndexTapeStatsWithHttpInfo(limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all tape statistics. **API Key Scope**: tape_stats / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <returns>ApiResponse of TapeStatCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TapeStatCollection > IndexTapeStatsWithHttpInfo (int? limit = default(int?), int? offset = default(int?))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TapeStatCollection >("/tape_stats", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTapeStats", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all tape statistics. **API Key Scope**: tape_stats / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <returns>Task of TapeStatCollection</returns>
        public async System.Threading.Tasks.Task<TapeStatCollection> IndexTapeStatsAsync (int? limit = default(int?), int? offset = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeStatCollection> localVarResponse = await IndexTapeStatsAsyncWithHttpInfo(limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all tape statistics. **API Key Scope**: tape_stats / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <returns>Task of ApiResponse (TapeStatCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TapeStatCollection>> IndexTapeStatsAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TapeStatCollection>("/tape_stats", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTapeStats", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all tapes. **API Key Scope**: tapes / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="tapeLibraryId">Filter on tape library id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="locked">Filter on locked (optional)</param>
        /// <param name="scratch">Filter on scratch (optional)</param>
        /// <param name="cleaning">Filter on cleaning (optional)</param>
        /// <param name="writeProtect">Filter on write protect (optional)</param>
        /// <param name="mounted">Filter on mounted (optional)</param>
        /// <param name="ejected">Filter on ejected (optional)</param>
        /// <param name="known">Filter on known (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="dateIn">Filter on date in (optional)</param>
        /// <param name="dateMove">Filter on date move (optional)</param>
        /// <param name="free">Filter on free (optional)</param>
        /// <param name="max">Filter on max (optional)</param>
        /// <param name="lastSizeUpdate">Filter on last size update (optional)</param>
        /// <param name="lastMaintenance">Filter on last maintenance (optional)</param>
        /// <param name="lastRepack">Filter on last repack (optional)</param>
        /// <param name="repackStatus">Filter on repack status (optional)</param>
        /// <param name="hash">Filter on hash (optional)</param>
        /// <param name="forceImportType">Filter on force import type (optional)</param>
        /// <param name="needToCheck">Filter on need to check (optional)</param>
        /// <returns>TapeCollection</returns>
        public TapeCollection IndexTapes (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string tapeLibraryId = default(string), string poolId = default(string), string barcode = default(string), string location = default(string), string type = default(string), string locked = default(string), string scratch = default(string), string cleaning = default(string), string writeProtect = default(string), string mounted = default(string), string ejected = default(string), string known = default(string), string mountCount = default(string), string dateIn = default(string), string dateMove = default(string), string free = default(string), string max = default(string), string lastSizeUpdate = default(string), string lastMaintenance = default(string), string lastRepack = default(string), string repackStatus = default(string), string hash = default(string), string forceImportType = default(string), string needToCheck = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeCollection> localVarResponse = IndexTapesWithHttpInfo(limit, offset, sortBy, id, tapeLibraryId, poolId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all tapes. **API Key Scope**: tapes / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="tapeLibraryId">Filter on tape library id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="locked">Filter on locked (optional)</param>
        /// <param name="scratch">Filter on scratch (optional)</param>
        /// <param name="cleaning">Filter on cleaning (optional)</param>
        /// <param name="writeProtect">Filter on write protect (optional)</param>
        /// <param name="mounted">Filter on mounted (optional)</param>
        /// <param name="ejected">Filter on ejected (optional)</param>
        /// <param name="known">Filter on known (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="dateIn">Filter on date in (optional)</param>
        /// <param name="dateMove">Filter on date move (optional)</param>
        /// <param name="free">Filter on free (optional)</param>
        /// <param name="max">Filter on max (optional)</param>
        /// <param name="lastSizeUpdate">Filter on last size update (optional)</param>
        /// <param name="lastMaintenance">Filter on last maintenance (optional)</param>
        /// <param name="lastRepack">Filter on last repack (optional)</param>
        /// <param name="repackStatus">Filter on repack status (optional)</param>
        /// <param name="hash">Filter on hash (optional)</param>
        /// <param name="forceImportType">Filter on force import type (optional)</param>
        /// <param name="needToCheck">Filter on need to check (optional)</param>
        /// <returns>ApiResponse of TapeCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TapeCollection > IndexTapesWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string tapeLibraryId = default(string), string poolId = default(string), string barcode = default(string), string location = default(string), string type = default(string), string locked = default(string), string scratch = default(string), string cleaning = default(string), string writeProtect = default(string), string mounted = default(string), string ejected = default(string), string known = default(string), string mountCount = default(string), string dateIn = default(string), string dateMove = default(string), string free = default(string), string max = default(string), string lastSizeUpdate = default(string), string lastMaintenance = default(string), string lastRepack = default(string), string repackStatus = default(string), string hash = default(string), string forceImportType = default(string), string needToCheck = default(string))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (tapeLibraryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "tape_library_id", tapeLibraryId));
            }
            if (poolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pool_id", poolId));
            }
            if (barcode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "barcode", barcode));
            }
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (locked != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "locked", locked));
            }
            if (scratch != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scratch", scratch));
            }
            if (cleaning != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "cleaning", cleaning));
            }
            if (writeProtect != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "write_protect", writeProtect));
            }
            if (mounted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "mounted", mounted));
            }
            if (ejected != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "ejected", ejected));
            }
            if (known != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "known", known));
            }
            if (mountCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "mount_count", mountCount));
            }
            if (dateIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_in", dateIn));
            }
            if (dateMove != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_move", dateMove));
            }
            if (free != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "free", free));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }
            if (lastSizeUpdate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_size_update", lastSizeUpdate));
            }
            if (lastMaintenance != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_maintenance", lastMaintenance));
            }
            if (lastRepack != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_repack", lastRepack));
            }
            if (repackStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "repack_status", repackStatus));
            }
            if (hash != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));
            }
            if (forceImportType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "force_import_type", forceImportType));
            }
            if (needToCheck != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "need_to_check", needToCheck));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TapeCollection >("/tapes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTapes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all tapes. **API Key Scope**: tapes / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="tapeLibraryId">Filter on tape library id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="locked">Filter on locked (optional)</param>
        /// <param name="scratch">Filter on scratch (optional)</param>
        /// <param name="cleaning">Filter on cleaning (optional)</param>
        /// <param name="writeProtect">Filter on write protect (optional)</param>
        /// <param name="mounted">Filter on mounted (optional)</param>
        /// <param name="ejected">Filter on ejected (optional)</param>
        /// <param name="known">Filter on known (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="dateIn">Filter on date in (optional)</param>
        /// <param name="dateMove">Filter on date move (optional)</param>
        /// <param name="free">Filter on free (optional)</param>
        /// <param name="max">Filter on max (optional)</param>
        /// <param name="lastSizeUpdate">Filter on last size update (optional)</param>
        /// <param name="lastMaintenance">Filter on last maintenance (optional)</param>
        /// <param name="lastRepack">Filter on last repack (optional)</param>
        /// <param name="repackStatus">Filter on repack status (optional)</param>
        /// <param name="hash">Filter on hash (optional)</param>
        /// <param name="forceImportType">Filter on force import type (optional)</param>
        /// <param name="needToCheck">Filter on need to check (optional)</param>
        /// <returns>Task of TapeCollection</returns>
        public async System.Threading.Tasks.Task<TapeCollection> IndexTapesAsync (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string tapeLibraryId = default(string), string poolId = default(string), string barcode = default(string), string location = default(string), string type = default(string), string locked = default(string), string scratch = default(string), string cleaning = default(string), string writeProtect = default(string), string mounted = default(string), string ejected = default(string), string known = default(string), string mountCount = default(string), string dateIn = default(string), string dateMove = default(string), string free = default(string), string max = default(string), string lastSizeUpdate = default(string), string lastMaintenance = default(string), string lastRepack = default(string), string repackStatus = default(string), string hash = default(string), string forceImportType = default(string), string needToCheck = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeCollection> localVarResponse = await IndexTapesAsyncWithHttpInfo(limit, offset, sortBy, id, tapeLibraryId, poolId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all tapes. **API Key Scope**: tapes / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="tapeLibraryId">Filter on tape library id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="locked">Filter on locked (optional)</param>
        /// <param name="scratch">Filter on scratch (optional)</param>
        /// <param name="cleaning">Filter on cleaning (optional)</param>
        /// <param name="writeProtect">Filter on write protect (optional)</param>
        /// <param name="mounted">Filter on mounted (optional)</param>
        /// <param name="ejected">Filter on ejected (optional)</param>
        /// <param name="known">Filter on known (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="dateIn">Filter on date in (optional)</param>
        /// <param name="dateMove">Filter on date move (optional)</param>
        /// <param name="free">Filter on free (optional)</param>
        /// <param name="max">Filter on max (optional)</param>
        /// <param name="lastSizeUpdate">Filter on last size update (optional)</param>
        /// <param name="lastMaintenance">Filter on last maintenance (optional)</param>
        /// <param name="lastRepack">Filter on last repack (optional)</param>
        /// <param name="repackStatus">Filter on repack status (optional)</param>
        /// <param name="hash">Filter on hash (optional)</param>
        /// <param name="forceImportType">Filter on force import type (optional)</param>
        /// <param name="needToCheck">Filter on need to check (optional)</param>
        /// <returns>Task of ApiResponse (TapeCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TapeCollection>> IndexTapesAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string tapeLibraryId = default(string), string poolId = default(string), string barcode = default(string), string location = default(string), string type = default(string), string locked = default(string), string scratch = default(string), string cleaning = default(string), string writeProtect = default(string), string mounted = default(string), string ejected = default(string), string known = default(string), string mountCount = default(string), string dateIn = default(string), string dateMove = default(string), string free = default(string), string max = default(string), string lastSizeUpdate = default(string), string lastMaintenance = default(string), string lastRepack = default(string), string repackStatus = default(string), string hash = default(string), string forceImportType = default(string), string needToCheck = default(string))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (tapeLibraryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "tape_library_id", tapeLibraryId));
            }
            if (poolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pool_id", poolId));
            }
            if (barcode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "barcode", barcode));
            }
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (locked != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "locked", locked));
            }
            if (scratch != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scratch", scratch));
            }
            if (cleaning != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "cleaning", cleaning));
            }
            if (writeProtect != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "write_protect", writeProtect));
            }
            if (mounted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "mounted", mounted));
            }
            if (ejected != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "ejected", ejected));
            }
            if (known != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "known", known));
            }
            if (mountCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "mount_count", mountCount));
            }
            if (dateIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_in", dateIn));
            }
            if (dateMove != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_move", dateMove));
            }
            if (free != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "free", free));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }
            if (lastSizeUpdate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_size_update", lastSizeUpdate));
            }
            if (lastMaintenance != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_maintenance", lastMaintenance));
            }
            if (lastRepack != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_repack", lastRepack));
            }
            if (repackStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "repack_status", repackStatus));
            }
            if (hash != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));
            }
            if (forceImportType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "force_import_type", forceImportType));
            }
            if (needToCheck != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "need_to_check", needToCheck));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TapeCollection>("/tapes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTapes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all tapes. **API Key Scope**: tapes / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="tapeLibraryId">Filter on tape library id (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="locked">Filter on locked (optional)</param>
        /// <param name="scratch">Filter on scratch (optional)</param>
        /// <param name="cleaning">Filter on cleaning (optional)</param>
        /// <param name="writeProtect">Filter on write protect (optional)</param>
        /// <param name="mounted">Filter on mounted (optional)</param>
        /// <param name="ejected">Filter on ejected (optional)</param>
        /// <param name="known">Filter on known (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="dateIn">Filter on date in (optional)</param>
        /// <param name="dateMove">Filter on date move (optional)</param>
        /// <param name="free">Filter on free (optional)</param>
        /// <param name="max">Filter on max (optional)</param>
        /// <param name="lastSizeUpdate">Filter on last size update (optional)</param>
        /// <param name="lastMaintenance">Filter on last maintenance (optional)</param>
        /// <param name="lastRepack">Filter on last repack (optional)</param>
        /// <param name="repackStatus">Filter on repack status (optional)</param>
        /// <param name="hash">Filter on hash (optional)</param>
        /// <param name="forceImportType">Filter on force import type (optional)</param>
        /// <param name="needToCheck">Filter on need to check (optional)</param>
        /// <returns>TapeCollection</returns>
        public TapeCollection IndexTapesByPool (string poolId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string tapeLibraryId = default(string), string barcode = default(string), string location = default(string), string type = default(string), string locked = default(string), string scratch = default(string), string cleaning = default(string), string writeProtect = default(string), string mounted = default(string), string ejected = default(string), string known = default(string), string mountCount = default(string), string dateIn = default(string), string dateMove = default(string), string free = default(string), string max = default(string), string lastSizeUpdate = default(string), string lastMaintenance = default(string), string lastRepack = default(string), string repackStatus = default(string), string hash = default(string), string forceImportType = default(string), string needToCheck = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeCollection> localVarResponse = IndexTapesByPoolWithHttpInfo(poolId, limit, offset, sortBy, id, tapeLibraryId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all tapes. **API Key Scope**: tapes / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="tapeLibraryId">Filter on tape library id (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="locked">Filter on locked (optional)</param>
        /// <param name="scratch">Filter on scratch (optional)</param>
        /// <param name="cleaning">Filter on cleaning (optional)</param>
        /// <param name="writeProtect">Filter on write protect (optional)</param>
        /// <param name="mounted">Filter on mounted (optional)</param>
        /// <param name="ejected">Filter on ejected (optional)</param>
        /// <param name="known">Filter on known (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="dateIn">Filter on date in (optional)</param>
        /// <param name="dateMove">Filter on date move (optional)</param>
        /// <param name="free">Filter on free (optional)</param>
        /// <param name="max">Filter on max (optional)</param>
        /// <param name="lastSizeUpdate">Filter on last size update (optional)</param>
        /// <param name="lastMaintenance">Filter on last maintenance (optional)</param>
        /// <param name="lastRepack">Filter on last repack (optional)</param>
        /// <param name="repackStatus">Filter on repack status (optional)</param>
        /// <param name="hash">Filter on hash (optional)</param>
        /// <param name="forceImportType">Filter on force import type (optional)</param>
        /// <param name="needToCheck">Filter on need to check (optional)</param>
        /// <returns>ApiResponse of TapeCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TapeCollection > IndexTapesByPoolWithHttpInfo (string poolId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string tapeLibraryId = default(string), string barcode = default(string), string location = default(string), string type = default(string), string locked = default(string), string scratch = default(string), string cleaning = default(string), string writeProtect = default(string), string mounted = default(string), string ejected = default(string), string known = default(string), string mountCount = default(string), string dateIn = default(string), string dateMove = default(string), string free = default(string), string max = default(string), string lastSizeUpdate = default(string), string lastMaintenance = default(string), string lastRepack = default(string), string repackStatus = default(string), string hash = default(string), string forceImportType = default(string), string needToCheck = default(string))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling TapesApi->IndexTapesByPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (tapeLibraryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "tape_library_id", tapeLibraryId));
            }
            if (barcode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "barcode", barcode));
            }
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (locked != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "locked", locked));
            }
            if (scratch != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scratch", scratch));
            }
            if (cleaning != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "cleaning", cleaning));
            }
            if (writeProtect != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "write_protect", writeProtect));
            }
            if (mounted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "mounted", mounted));
            }
            if (ejected != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "ejected", ejected));
            }
            if (known != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "known", known));
            }
            if (mountCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "mount_count", mountCount));
            }
            if (dateIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_in", dateIn));
            }
            if (dateMove != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_move", dateMove));
            }
            if (free != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "free", free));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }
            if (lastSizeUpdate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_size_update", lastSizeUpdate));
            }
            if (lastMaintenance != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_maintenance", lastMaintenance));
            }
            if (lastRepack != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_repack", lastRepack));
            }
            if (repackStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "repack_status", repackStatus));
            }
            if (hash != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));
            }
            if (forceImportType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "force_import_type", forceImportType));
            }
            if (needToCheck != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "need_to_check", needToCheck));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TapeCollection >("/pools/{pool_id}/tapes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTapesByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all tapes. **API Key Scope**: tapes / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="tapeLibraryId">Filter on tape library id (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="locked">Filter on locked (optional)</param>
        /// <param name="scratch">Filter on scratch (optional)</param>
        /// <param name="cleaning">Filter on cleaning (optional)</param>
        /// <param name="writeProtect">Filter on write protect (optional)</param>
        /// <param name="mounted">Filter on mounted (optional)</param>
        /// <param name="ejected">Filter on ejected (optional)</param>
        /// <param name="known">Filter on known (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="dateIn">Filter on date in (optional)</param>
        /// <param name="dateMove">Filter on date move (optional)</param>
        /// <param name="free">Filter on free (optional)</param>
        /// <param name="max">Filter on max (optional)</param>
        /// <param name="lastSizeUpdate">Filter on last size update (optional)</param>
        /// <param name="lastMaintenance">Filter on last maintenance (optional)</param>
        /// <param name="lastRepack">Filter on last repack (optional)</param>
        /// <param name="repackStatus">Filter on repack status (optional)</param>
        /// <param name="hash">Filter on hash (optional)</param>
        /// <param name="forceImportType">Filter on force import type (optional)</param>
        /// <param name="needToCheck">Filter on need to check (optional)</param>
        /// <returns>Task of TapeCollection</returns>
        public async System.Threading.Tasks.Task<TapeCollection> IndexTapesByPoolAsync (string poolId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string tapeLibraryId = default(string), string barcode = default(string), string location = default(string), string type = default(string), string locked = default(string), string scratch = default(string), string cleaning = default(string), string writeProtect = default(string), string mounted = default(string), string ejected = default(string), string known = default(string), string mountCount = default(string), string dateIn = default(string), string dateMove = default(string), string free = default(string), string max = default(string), string lastSizeUpdate = default(string), string lastMaintenance = default(string), string lastRepack = default(string), string repackStatus = default(string), string hash = default(string), string forceImportType = default(string), string needToCheck = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeCollection> localVarResponse = await IndexTapesByPoolAsyncWithHttpInfo(poolId, limit, offset, sortBy, id, tapeLibraryId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all tapes. **API Key Scope**: tapes / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="tapeLibraryId">Filter on tape library id (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="locked">Filter on locked (optional)</param>
        /// <param name="scratch">Filter on scratch (optional)</param>
        /// <param name="cleaning">Filter on cleaning (optional)</param>
        /// <param name="writeProtect">Filter on write protect (optional)</param>
        /// <param name="mounted">Filter on mounted (optional)</param>
        /// <param name="ejected">Filter on ejected (optional)</param>
        /// <param name="known">Filter on known (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="dateIn">Filter on date in (optional)</param>
        /// <param name="dateMove">Filter on date move (optional)</param>
        /// <param name="free">Filter on free (optional)</param>
        /// <param name="max">Filter on max (optional)</param>
        /// <param name="lastSizeUpdate">Filter on last size update (optional)</param>
        /// <param name="lastMaintenance">Filter on last maintenance (optional)</param>
        /// <param name="lastRepack">Filter on last repack (optional)</param>
        /// <param name="repackStatus">Filter on repack status (optional)</param>
        /// <param name="hash">Filter on hash (optional)</param>
        /// <param name="forceImportType">Filter on force import type (optional)</param>
        /// <param name="needToCheck">Filter on need to check (optional)</param>
        /// <returns>Task of ApiResponse (TapeCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TapeCollection>> IndexTapesByPoolAsyncWithHttpInfo (string poolId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string tapeLibraryId = default(string), string barcode = default(string), string location = default(string), string type = default(string), string locked = default(string), string scratch = default(string), string cleaning = default(string), string writeProtect = default(string), string mounted = default(string), string ejected = default(string), string known = default(string), string mountCount = default(string), string dateIn = default(string), string dateMove = default(string), string free = default(string), string max = default(string), string lastSizeUpdate = default(string), string lastMaintenance = default(string), string lastRepack = default(string), string repackStatus = default(string), string hash = default(string), string forceImportType = default(string), string needToCheck = default(string))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling TapesApi->IndexTapesByPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (tapeLibraryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "tape_library_id", tapeLibraryId));
            }
            if (barcode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "barcode", barcode));
            }
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (locked != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "locked", locked));
            }
            if (scratch != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scratch", scratch));
            }
            if (cleaning != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "cleaning", cleaning));
            }
            if (writeProtect != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "write_protect", writeProtect));
            }
            if (mounted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "mounted", mounted));
            }
            if (ejected != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "ejected", ejected));
            }
            if (known != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "known", known));
            }
            if (mountCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "mount_count", mountCount));
            }
            if (dateIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_in", dateIn));
            }
            if (dateMove != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_move", dateMove));
            }
            if (free != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "free", free));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }
            if (lastSizeUpdate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_size_update", lastSizeUpdate));
            }
            if (lastMaintenance != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_maintenance", lastMaintenance));
            }
            if (lastRepack != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_repack", lastRepack));
            }
            if (repackStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "repack_status", repackStatus));
            }
            if (hash != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));
            }
            if (forceImportType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "force_import_type", forceImportType));
            }
            if (needToCheck != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "need_to_check", needToCheck));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TapeCollection>("/pools/{pool_id}/tapes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTapesByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all tapes. **API Key Scope**: tapes / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="locked">Filter on locked (optional)</param>
        /// <param name="scratch">Filter on scratch (optional)</param>
        /// <param name="cleaning">Filter on cleaning (optional)</param>
        /// <param name="writeProtect">Filter on write protect (optional)</param>
        /// <param name="mounted">Filter on mounted (optional)</param>
        /// <param name="ejected">Filter on ejected (optional)</param>
        /// <param name="known">Filter on known (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="dateIn">Filter on date in (optional)</param>
        /// <param name="dateMove">Filter on date move (optional)</param>
        /// <param name="free">Filter on free (optional)</param>
        /// <param name="max">Filter on max (optional)</param>
        /// <param name="lastSizeUpdate">Filter on last size update (optional)</param>
        /// <param name="lastMaintenance">Filter on last maintenance (optional)</param>
        /// <param name="lastRepack">Filter on last repack (optional)</param>
        /// <param name="repackStatus">Filter on repack status (optional)</param>
        /// <param name="hash">Filter on hash (optional)</param>
        /// <param name="forceImportType">Filter on force import type (optional)</param>
        /// <param name="needToCheck">Filter on need to check (optional)</param>
        /// <returns>TapeCollection</returns>
        public TapeCollection IndexTapesByTapeLibrary (string tapeLibraryId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string poolId = default(string), string barcode = default(string), string location = default(string), string type = default(string), string locked = default(string), string scratch = default(string), string cleaning = default(string), string writeProtect = default(string), string mounted = default(string), string ejected = default(string), string known = default(string), string mountCount = default(string), string dateIn = default(string), string dateMove = default(string), string free = default(string), string max = default(string), string lastSizeUpdate = default(string), string lastMaintenance = default(string), string lastRepack = default(string), string repackStatus = default(string), string hash = default(string), string forceImportType = default(string), string needToCheck = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeCollection> localVarResponse = IndexTapesByTapeLibraryWithHttpInfo(tapeLibraryId, limit, offset, sortBy, id, poolId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all tapes. **API Key Scope**: tapes / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="locked">Filter on locked (optional)</param>
        /// <param name="scratch">Filter on scratch (optional)</param>
        /// <param name="cleaning">Filter on cleaning (optional)</param>
        /// <param name="writeProtect">Filter on write protect (optional)</param>
        /// <param name="mounted">Filter on mounted (optional)</param>
        /// <param name="ejected">Filter on ejected (optional)</param>
        /// <param name="known">Filter on known (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="dateIn">Filter on date in (optional)</param>
        /// <param name="dateMove">Filter on date move (optional)</param>
        /// <param name="free">Filter on free (optional)</param>
        /// <param name="max">Filter on max (optional)</param>
        /// <param name="lastSizeUpdate">Filter on last size update (optional)</param>
        /// <param name="lastMaintenance">Filter on last maintenance (optional)</param>
        /// <param name="lastRepack">Filter on last repack (optional)</param>
        /// <param name="repackStatus">Filter on repack status (optional)</param>
        /// <param name="hash">Filter on hash (optional)</param>
        /// <param name="forceImportType">Filter on force import type (optional)</param>
        /// <param name="needToCheck">Filter on need to check (optional)</param>
        /// <returns>ApiResponse of TapeCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TapeCollection > IndexTapesByTapeLibraryWithHttpInfo (string tapeLibraryId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string poolId = default(string), string barcode = default(string), string location = default(string), string type = default(string), string locked = default(string), string scratch = default(string), string cleaning = default(string), string writeProtect = default(string), string mounted = default(string), string ejected = default(string), string known = default(string), string mountCount = default(string), string dateIn = default(string), string dateMove = default(string), string free = default(string), string max = default(string), string lastSizeUpdate = default(string), string lastMaintenance = default(string), string lastRepack = default(string), string repackStatus = default(string), string hash = default(string), string forceImportType = default(string), string needToCheck = default(string))
        {
            // verify the required parameter 'tapeLibraryId' is set
            if (tapeLibraryId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryId' when calling TapesApi->IndexTapesByTapeLibrary");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tapeLibraryId != null)
                localVarRequestOptions.PathParameters.Add("tape_library_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeLibraryId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (poolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pool_id", poolId));
            }
            if (barcode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "barcode", barcode));
            }
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (locked != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "locked", locked));
            }
            if (scratch != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scratch", scratch));
            }
            if (cleaning != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "cleaning", cleaning));
            }
            if (writeProtect != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "write_protect", writeProtect));
            }
            if (mounted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "mounted", mounted));
            }
            if (ejected != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "ejected", ejected));
            }
            if (known != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "known", known));
            }
            if (mountCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "mount_count", mountCount));
            }
            if (dateIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_in", dateIn));
            }
            if (dateMove != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_move", dateMove));
            }
            if (free != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "free", free));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }
            if (lastSizeUpdate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_size_update", lastSizeUpdate));
            }
            if (lastMaintenance != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_maintenance", lastMaintenance));
            }
            if (lastRepack != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_repack", lastRepack));
            }
            if (repackStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "repack_status", repackStatus));
            }
            if (hash != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));
            }
            if (forceImportType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "force_import_type", forceImportType));
            }
            if (needToCheck != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "need_to_check", needToCheck));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TapeCollection >("/tape_libraries/{tape_library_id}/tapes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTapesByTapeLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all tapes. **API Key Scope**: tapes / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="locked">Filter on locked (optional)</param>
        /// <param name="scratch">Filter on scratch (optional)</param>
        /// <param name="cleaning">Filter on cleaning (optional)</param>
        /// <param name="writeProtect">Filter on write protect (optional)</param>
        /// <param name="mounted">Filter on mounted (optional)</param>
        /// <param name="ejected">Filter on ejected (optional)</param>
        /// <param name="known">Filter on known (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="dateIn">Filter on date in (optional)</param>
        /// <param name="dateMove">Filter on date move (optional)</param>
        /// <param name="free">Filter on free (optional)</param>
        /// <param name="max">Filter on max (optional)</param>
        /// <param name="lastSizeUpdate">Filter on last size update (optional)</param>
        /// <param name="lastMaintenance">Filter on last maintenance (optional)</param>
        /// <param name="lastRepack">Filter on last repack (optional)</param>
        /// <param name="repackStatus">Filter on repack status (optional)</param>
        /// <param name="hash">Filter on hash (optional)</param>
        /// <param name="forceImportType">Filter on force import type (optional)</param>
        /// <param name="needToCheck">Filter on need to check (optional)</param>
        /// <returns>Task of TapeCollection</returns>
        public async System.Threading.Tasks.Task<TapeCollection> IndexTapesByTapeLibraryAsync (string tapeLibraryId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string poolId = default(string), string barcode = default(string), string location = default(string), string type = default(string), string locked = default(string), string scratch = default(string), string cleaning = default(string), string writeProtect = default(string), string mounted = default(string), string ejected = default(string), string known = default(string), string mountCount = default(string), string dateIn = default(string), string dateMove = default(string), string free = default(string), string max = default(string), string lastSizeUpdate = default(string), string lastMaintenance = default(string), string lastRepack = default(string), string repackStatus = default(string), string hash = default(string), string forceImportType = default(string), string needToCheck = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeCollection> localVarResponse = await IndexTapesByTapeLibraryAsyncWithHttpInfo(tapeLibraryId, limit, offset, sortBy, id, poolId, barcode, location, type, locked, scratch, cleaning, writeProtect, mounted, ejected, known, mountCount, dateIn, dateMove, free, max, lastSizeUpdate, lastMaintenance, lastRepack, repackStatus, hash, forceImportType, needToCheck);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all tapes. **API Key Scope**: tapes / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="locked">Filter on locked (optional)</param>
        /// <param name="scratch">Filter on scratch (optional)</param>
        /// <param name="cleaning">Filter on cleaning (optional)</param>
        /// <param name="writeProtect">Filter on write protect (optional)</param>
        /// <param name="mounted">Filter on mounted (optional)</param>
        /// <param name="ejected">Filter on ejected (optional)</param>
        /// <param name="known">Filter on known (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="dateIn">Filter on date in (optional)</param>
        /// <param name="dateMove">Filter on date move (optional)</param>
        /// <param name="free">Filter on free (optional)</param>
        /// <param name="max">Filter on max (optional)</param>
        /// <param name="lastSizeUpdate">Filter on last size update (optional)</param>
        /// <param name="lastMaintenance">Filter on last maintenance (optional)</param>
        /// <param name="lastRepack">Filter on last repack (optional)</param>
        /// <param name="repackStatus">Filter on repack status (optional)</param>
        /// <param name="hash">Filter on hash (optional)</param>
        /// <param name="forceImportType">Filter on force import type (optional)</param>
        /// <param name="needToCheck">Filter on need to check (optional)</param>
        /// <returns>Task of ApiResponse (TapeCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TapeCollection>> IndexTapesByTapeLibraryAsyncWithHttpInfo (string tapeLibraryId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string poolId = default(string), string barcode = default(string), string location = default(string), string type = default(string), string locked = default(string), string scratch = default(string), string cleaning = default(string), string writeProtect = default(string), string mounted = default(string), string ejected = default(string), string known = default(string), string mountCount = default(string), string dateIn = default(string), string dateMove = default(string), string free = default(string), string max = default(string), string lastSizeUpdate = default(string), string lastMaintenance = default(string), string lastRepack = default(string), string repackStatus = default(string), string hash = default(string), string forceImportType = default(string), string needToCheck = default(string))
        {
            // verify the required parameter 'tapeLibraryId' is set
            if (tapeLibraryId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryId' when calling TapesApi->IndexTapesByTapeLibrary");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tapeLibraryId != null)
                localVarRequestOptions.PathParameters.Add("tape_library_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeLibraryId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (poolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pool_id", poolId));
            }
            if (barcode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "barcode", barcode));
            }
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (locked != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "locked", locked));
            }
            if (scratch != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scratch", scratch));
            }
            if (cleaning != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "cleaning", cleaning));
            }
            if (writeProtect != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "write_protect", writeProtect));
            }
            if (mounted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "mounted", mounted));
            }
            if (ejected != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "ejected", ejected));
            }
            if (known != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "known", known));
            }
            if (mountCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "mount_count", mountCount));
            }
            if (dateIn != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_in", dateIn));
            }
            if (dateMove != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_move", dateMove));
            }
            if (free != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "free", free));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }
            if (lastSizeUpdate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_size_update", lastSizeUpdate));
            }
            if (lastMaintenance != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_maintenance", lastMaintenance));
            }
            if (lastRepack != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_repack", lastRepack));
            }
            if (repackStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "repack_status", repackStatus));
            }
            if (hash != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "hash", hash));
            }
            if (forceImportType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "force_import_type", forceImportType));
            }
            if (needToCheck != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "need_to_check", needToCheck));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TapeCollection>("/tape_libraries/{tape_library_id}/tapes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTapesByTapeLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mount status of Tape. **API Key Scope**: tapes / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>MountStatus</returns>
        public MountStatus MountStatusTape (string tapeId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<MountStatus> localVarResponse = MountStatusTapeWithHttpInfo(tapeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get mount status of Tape. **API Key Scope**: tapes / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>ApiResponse of MountStatus</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< MountStatus > MountStatusTapeWithHttpInfo (string tapeId)
        {
            // verify the required parameter 'tapeId' is set
            if (tapeId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeId' when calling TapesApi->MountStatusTape");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tapeId != null)
                localVarRequestOptions.PathParameters.Add("tape_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< MountStatus >("/tapes/{tape_id}/mount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MountStatusTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mount status of Tape. **API Key Scope**: tapes / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of MountStatus</returns>
        public async System.Threading.Tasks.Task<MountStatus> MountStatusTapeAsync (string tapeId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<MountStatus> localVarResponse = await MountStatusTapeAsyncWithHttpInfo(tapeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get mount status of Tape. **API Key Scope**: tapes / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of ApiResponse (MountStatus)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<MountStatus>> MountStatusTapeAsyncWithHttpInfo (string tapeId)
        {
            // verify the required parameter 'tapeId' is set
            if (tapeId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeId' when calling TapesApi->MountStatusTape");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tapeId != null)
                localVarRequestOptions.PathParameters.Add("tape_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MountStatus>("/tapes/{tape_id}/mount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MountStatusTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mount status of Tape. **API Key Scope**: tapes / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>MountStatus</returns>
        public MountStatus MountStatusTapeByPool (string poolId, string tapeId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<MountStatus> localVarResponse = MountStatusTapeByPoolWithHttpInfo(poolId, tapeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get mount status of Tape. **API Key Scope**: tapes / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>ApiResponse of MountStatus</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< MountStatus > MountStatusTapeByPoolWithHttpInfo (string poolId, string tapeId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling TapesApi->MountStatusTapeByPool");

            // verify the required parameter 'tapeId' is set
            if (tapeId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeId' when calling TapesApi->MountStatusTapeByPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (tapeId != null)
                localVarRequestOptions.PathParameters.Add("tape_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< MountStatus >("/pools/{pool_id}/tapes/{tape_id}/mount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MountStatusTapeByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mount status of Tape. **API Key Scope**: tapes / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of MountStatus</returns>
        public async System.Threading.Tasks.Task<MountStatus> MountStatusTapeByPoolAsync (string poolId, string tapeId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<MountStatus> localVarResponse = await MountStatusTapeByPoolAsyncWithHttpInfo(poolId, tapeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get mount status of Tape. **API Key Scope**: tapes / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of ApiResponse (MountStatus)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<MountStatus>> MountStatusTapeByPoolAsyncWithHttpInfo (string poolId, string tapeId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling TapesApi->MountStatusTapeByPool");

            // verify the required parameter 'tapeId' is set
            if (tapeId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeId' when calling TapesApi->MountStatusTapeByPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (tapeId != null)
                localVarRequestOptions.PathParameters.Add("tape_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MountStatus>("/pools/{pool_id}/tapes/{tape_id}/mount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MountStatusTapeByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mount status of Tape. **API Key Scope**: tapes / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>MountStatus</returns>
        public MountStatus MountStatusTapeByTapeLibrary (string tapeLibraryId, string tapeId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<MountStatus> localVarResponse = MountStatusTapeByTapeLibraryWithHttpInfo(tapeLibraryId, tapeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get mount status of Tape. **API Key Scope**: tapes / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>ApiResponse of MountStatus</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< MountStatus > MountStatusTapeByTapeLibraryWithHttpInfo (string tapeLibraryId, string tapeId)
        {
            // verify the required parameter 'tapeLibraryId' is set
            if (tapeLibraryId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryId' when calling TapesApi->MountStatusTapeByTapeLibrary");

            // verify the required parameter 'tapeId' is set
            if (tapeId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeId' when calling TapesApi->MountStatusTapeByTapeLibrary");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tapeLibraryId != null)
                localVarRequestOptions.PathParameters.Add("tape_library_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeLibraryId)); // path parameter
            if (tapeId != null)
                localVarRequestOptions.PathParameters.Add("tape_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< MountStatus >("/tape_libraries/{tape_library_id}/tapes/{tape_id}/mount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MountStatusTapeByTapeLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mount status of Tape. **API Key Scope**: tapes / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of MountStatus</returns>
        public async System.Threading.Tasks.Task<MountStatus> MountStatusTapeByTapeLibraryAsync (string tapeLibraryId, string tapeId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<MountStatus> localVarResponse = await MountStatusTapeByTapeLibraryAsyncWithHttpInfo(tapeLibraryId, tapeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get mount status of Tape. **API Key Scope**: tapes / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of ApiResponse (MountStatus)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<MountStatus>> MountStatusTapeByTapeLibraryAsyncWithHttpInfo (string tapeLibraryId, string tapeId)
        {
            // verify the required parameter 'tapeLibraryId' is set
            if (tapeLibraryId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryId' when calling TapesApi->MountStatusTapeByTapeLibrary");

            // verify the required parameter 'tapeId' is set
            if (tapeId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeId' when calling TapesApi->MountStatusTapeByTapeLibrary");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tapeLibraryId != null)
                localVarRequestOptions.PathParameters.Add("tape_library_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeLibraryId)); // path parameter
            if (tapeId != null)
                localVarRequestOptions.PathParameters.Add("tape_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MountStatus>("/tape_libraries/{tape_library_id}/tapes/{tape_id}/mount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MountStatusTapeByTapeLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific tape. **API Key Scope**: tapes / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Tape</returns>
        public Tape ShowTape (string tapeId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Tape> localVarResponse = ShowTapeWithHttpInfo(tapeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific tape. **API Key Scope**: tapes / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>ApiResponse of Tape</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< Tape > ShowTapeWithHttpInfo (string tapeId)
        {
            // verify the required parameter 'tapeId' is set
            if (tapeId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeId' when calling TapesApi->ShowTape");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tapeId != null)
                localVarRequestOptions.PathParameters.Add("tape_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Tape >("/tapes/{tape_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific tape. **API Key Scope**: tapes / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of Tape</returns>
        public async System.Threading.Tasks.Task<Tape> ShowTapeAsync (string tapeId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Tape> localVarResponse = await ShowTapeAsyncWithHttpInfo(tapeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific tape. **API Key Scope**: tapes / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of ApiResponse (Tape)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Tape>> ShowTapeAsyncWithHttpInfo (string tapeId)
        {
            // verify the required parameter 'tapeId' is set
            if (tapeId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeId' when calling TapesApi->ShowTape");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tapeId != null)
                localVarRequestOptions.PathParameters.Add("tape_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Tape>("/tapes/{tape_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific tape. **API Key Scope**: tapes / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Tape</returns>
        public Tape ShowTapeByPool (string poolId, string tapeId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Tape> localVarResponse = ShowTapeByPoolWithHttpInfo(poolId, tapeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific tape. **API Key Scope**: tapes / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>ApiResponse of Tape</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< Tape > ShowTapeByPoolWithHttpInfo (string poolId, string tapeId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling TapesApi->ShowTapeByPool");

            // verify the required parameter 'tapeId' is set
            if (tapeId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeId' when calling TapesApi->ShowTapeByPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (tapeId != null)
                localVarRequestOptions.PathParameters.Add("tape_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Tape >("/pools/{pool_id}/tapes/{tape_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTapeByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific tape. **API Key Scope**: tapes / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of Tape</returns>
        public async System.Threading.Tasks.Task<Tape> ShowTapeByPoolAsync (string poolId, string tapeId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Tape> localVarResponse = await ShowTapeByPoolAsyncWithHttpInfo(poolId, tapeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific tape. **API Key Scope**: tapes / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of ApiResponse (Tape)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Tape>> ShowTapeByPoolAsyncWithHttpInfo (string poolId, string tapeId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling TapesApi->ShowTapeByPool");

            // verify the required parameter 'tapeId' is set
            if (tapeId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeId' when calling TapesApi->ShowTapeByPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (tapeId != null)
                localVarRequestOptions.PathParameters.Add("tape_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Tape>("/pools/{pool_id}/tapes/{tape_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTapeByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific tape. **API Key Scope**: tapes / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Tape</returns>
        public Tape ShowTapeByTapeLibrary (string tapeLibraryId, string tapeId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Tape> localVarResponse = ShowTapeByTapeLibraryWithHttpInfo(tapeLibraryId, tapeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific tape. **API Key Scope**: tapes / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>ApiResponse of Tape</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< Tape > ShowTapeByTapeLibraryWithHttpInfo (string tapeLibraryId, string tapeId)
        {
            // verify the required parameter 'tapeLibraryId' is set
            if (tapeLibraryId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryId' when calling TapesApi->ShowTapeByTapeLibrary");

            // verify the required parameter 'tapeId' is set
            if (tapeId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeId' when calling TapesApi->ShowTapeByTapeLibrary");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tapeLibraryId != null)
                localVarRequestOptions.PathParameters.Add("tape_library_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeLibraryId)); // path parameter
            if (tapeId != null)
                localVarRequestOptions.PathParameters.Add("tape_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Tape >("/tape_libraries/{tape_library_id}/tapes/{tape_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTapeByTapeLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific tape. **API Key Scope**: tapes / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of Tape</returns>
        public async System.Threading.Tasks.Task<Tape> ShowTapeByTapeLibraryAsync (string tapeLibraryId, string tapeId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Tape> localVarResponse = await ShowTapeByTapeLibraryAsyncWithHttpInfo(tapeLibraryId, tapeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific tape. **API Key Scope**: tapes / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of ApiResponse (Tape)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Tape>> ShowTapeByTapeLibraryAsyncWithHttpInfo (string tapeLibraryId, string tapeId)
        {
            // verify the required parameter 'tapeLibraryId' is set
            if (tapeLibraryId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryId' when calling TapesApi->ShowTapeByTapeLibrary");

            // verify the required parameter 'tapeId' is set
            if (tapeId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeId' when calling TapesApi->ShowTapeByTapeLibrary");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tapeLibraryId != null)
                localVarRequestOptions.PathParameters.Add("tape_library_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeLibraryId)); // path parameter
            if (tapeId != null)
                localVarRequestOptions.PathParameters.Add("tape_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Tape>("/tape_libraries/{tape_library_id}/tapes/{tape_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTapeByTapeLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Display statistic for a specific tape. **API Key Scope**: tape_stats / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>TapeStat</returns>
        public TapeStat ShowTapeStat (string tapeId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeStat> localVarResponse = ShowTapeStatWithHttpInfo(tapeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Display statistic for a specific tape. **API Key Scope**: tape_stats / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>ApiResponse of TapeStat</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TapeStat > ShowTapeStatWithHttpInfo (string tapeId)
        {
            // verify the required parameter 'tapeId' is set
            if (tapeId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeId' when calling TapesApi->ShowTapeStat");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tapeId != null)
                localVarRequestOptions.PathParameters.Add("tape_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TapeStat >("/tapes/{tape_id}/tape_stat", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTapeStat", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Display statistic for a specific tape. **API Key Scope**: tape_stats / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of TapeStat</returns>
        public async System.Threading.Tasks.Task<TapeStat> ShowTapeStatAsync (string tapeId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeStat> localVarResponse = await ShowTapeStatAsyncWithHttpInfo(tapeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Display statistic for a specific tape. **API Key Scope**: tape_stats / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of ApiResponse (TapeStat)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TapeStat>> ShowTapeStatAsyncWithHttpInfo (string tapeId)
        {
            // verify the required parameter 'tapeId' is set
            if (tapeId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeId' when calling TapesApi->ShowTapeStat");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tapeId != null)
                localVarRequestOptions.PathParameters.Add("tape_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TapeStat>("/tapes/{tape_id}/tape_stat", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTapeStat", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Display statistic for a specific tape. **API Key Scope**: tape_stats / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>TapeStat</returns>
        public TapeStat ShowTapeStatByPool (string poolId, string tapeId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeStat> localVarResponse = ShowTapeStatByPoolWithHttpInfo(poolId, tapeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Display statistic for a specific tape. **API Key Scope**: tape_stats / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>ApiResponse of TapeStat</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TapeStat > ShowTapeStatByPoolWithHttpInfo (string poolId, string tapeId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling TapesApi->ShowTapeStatByPool");

            // verify the required parameter 'tapeId' is set
            if (tapeId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeId' when calling TapesApi->ShowTapeStatByPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (tapeId != null)
                localVarRequestOptions.PathParameters.Add("tape_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TapeStat >("/pools/{pool_id}/tapes/{tape_id}/tape_stat", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTapeStatByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Display statistic for a specific tape. **API Key Scope**: tape_stats / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of TapeStat</returns>
        public async System.Threading.Tasks.Task<TapeStat> ShowTapeStatByPoolAsync (string poolId, string tapeId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeStat> localVarResponse = await ShowTapeStatByPoolAsyncWithHttpInfo(poolId, tapeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Display statistic for a specific tape. **API Key Scope**: tape_stats / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of ApiResponse (TapeStat)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TapeStat>> ShowTapeStatByPoolAsyncWithHttpInfo (string poolId, string tapeId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling TapesApi->ShowTapeStatByPool");

            // verify the required parameter 'tapeId' is set
            if (tapeId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeId' when calling TapesApi->ShowTapeStatByPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (tapeId != null)
                localVarRequestOptions.PathParameters.Add("tape_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TapeStat>("/pools/{pool_id}/tapes/{tape_id}/tape_stat", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTapeStatByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Display statistic for a specific tape. **API Key Scope**: tape_stats / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>TapeStat</returns>
        public TapeStat ShowTapeStatByTapeLibrary (string tapeLibraryId, string tapeId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeStat> localVarResponse = ShowTapeStatByTapeLibraryWithHttpInfo(tapeLibraryId, tapeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Display statistic for a specific tape. **API Key Scope**: tape_stats / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>ApiResponse of TapeStat</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TapeStat > ShowTapeStatByTapeLibraryWithHttpInfo (string tapeLibraryId, string tapeId)
        {
            // verify the required parameter 'tapeLibraryId' is set
            if (tapeLibraryId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryId' when calling TapesApi->ShowTapeStatByTapeLibrary");

            // verify the required parameter 'tapeId' is set
            if (tapeId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeId' when calling TapesApi->ShowTapeStatByTapeLibrary");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tapeLibraryId != null)
                localVarRequestOptions.PathParameters.Add("tape_library_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeLibraryId)); // path parameter
            if (tapeId != null)
                localVarRequestOptions.PathParameters.Add("tape_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TapeStat >("/tape_libraries/{tape_library_id}/tapes/{tape_id}/tape_stat", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTapeStatByTapeLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Display statistic for a specific tape. **API Key Scope**: tape_stats / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of TapeStat</returns>
        public async System.Threading.Tasks.Task<TapeStat> ShowTapeStatByTapeLibraryAsync (string tapeLibraryId, string tapeId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeStat> localVarResponse = await ShowTapeStatByTapeLibraryAsyncWithHttpInfo(tapeLibraryId, tapeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Display statistic for a specific tape. **API Key Scope**: tape_stats / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeId">Numeric ID, or barcode of tape.</param>
        /// <returns>Task of ApiResponse (TapeStat)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TapeStat>> ShowTapeStatByTapeLibraryAsyncWithHttpInfo (string tapeLibraryId, string tapeId)
        {
            // verify the required parameter 'tapeLibraryId' is set
            if (tapeLibraryId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryId' when calling TapesApi->ShowTapeStatByTapeLibrary");

            // verify the required parameter 'tapeId' is set
            if (tapeId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeId' when calling TapesApi->ShowTapeStatByTapeLibrary");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tapeLibraryId != null)
                localVarRequestOptions.PathParameters.Add("tape_library_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeLibraryId)); // path parameter
            if (tapeId != null)
                localVarRequestOptions.PathParameters.Add("tape_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TapeStat>("/tape_libraries/{tape_library_id}/tapes/{tape_id}/tape_stat", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTapeStatByTapeLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
