/* 
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Io.Nodeum.Sdk.Client;
using Io.Nodeum.Sdk.Model;

namespace Io.Nodeum.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatisticsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get statistics about files, grouped by date
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_date
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>ByDateFacet</returns>
        ByDateFacet StatisticsByDate (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string));

        /// <summary>
        /// Get statistics about files, grouped by date
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_date
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>ApiResponse of ByDateFacet</returns>
        ApiResponse<ByDateFacet> StatisticsByDateWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string));
        /// <summary>
        /// Get statistics about files, grouped by file extension
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_file_extension
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ByFileExtensionFacet</returns>
        ByFileExtensionFacet StatisticsByFileExtension (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));

        /// <summary>
        /// Get statistics about files, grouped by file extension
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_file_extension
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ApiResponse of ByFileExtensionFacet</returns>
        ApiResponse<ByFileExtensionFacet> StatisticsByFileExtensionWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));
        /// <summary>
        /// Get statistics about files, grouped by owner (group)
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_group_owner
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ByGroupOwnerFacet</returns>
        ByGroupOwnerFacet StatisticsByGroupOwner (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));

        /// <summary>
        /// Get statistics about files, grouped by owner (group)
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_group_owner
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ApiResponse of ByGroupOwnerFacet</returns>
        ApiResponse<ByGroupOwnerFacet> StatisticsByGroupOwnerWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));
        /// <summary>
        /// Get statistics about files, grouped by primary Cloud
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_primary_cloud
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ByPrimaryCloudFacet</returns>
        ByPrimaryCloudFacet StatisticsByPrimaryCloud (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));

        /// <summary>
        /// Get statistics about files, grouped by primary Cloud
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_primary_cloud
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ApiResponse of ByPrimaryCloudFacet</returns>
        ApiResponse<ByPrimaryCloudFacet> StatisticsByPrimaryCloudWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));
        /// <summary>
        /// Get statistics about files, grouped by primary storages
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_primary_name
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ByPrimaryFacet</returns>
        ByPrimaryFacet StatisticsByPrimaryName (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));

        /// <summary>
        /// Get statistics about files, grouped by primary storages
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_primary_name
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ApiResponse of ByPrimaryFacet</returns>
        ApiResponse<ByPrimaryFacet> StatisticsByPrimaryNameWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));
        /// <summary>
        /// Get statistics about files, grouped by primary NAS
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_primary_nas
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ByPrimaryNasFacet</returns>
        ByPrimaryNasFacet StatisticsByPrimaryNas (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));

        /// <summary>
        /// Get statistics about files, grouped by primary NAS
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_primary_nas
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ApiResponse of ByPrimaryNasFacet</returns>
        ApiResponse<ByPrimaryNasFacet> StatisticsByPrimaryNasWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));
        /// <summary>
        /// Get statistics about files, grouped by primary storage
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_primary_storage
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ByPrimaryStorageFacet</returns>
        ByPrimaryStorageFacet StatisticsByPrimaryStorage (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));

        /// <summary>
        /// Get statistics about files, grouped by primary storage
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_primary_storage
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ApiResponse of ByPrimaryStorageFacet</returns>
        ApiResponse<ByPrimaryStorageFacet> StatisticsByPrimaryStorageWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));
        /// <summary>
        /// Get statistics about files, grouped by secondary Cloud
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_secondary_cloud
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>BySecondaryCloudFacet</returns>
        BySecondaryCloudFacet StatisticsBySecondaryCloud (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));

        /// <summary>
        /// Get statistics about files, grouped by secondary Cloud
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_secondary_cloud
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ApiResponse of BySecondaryCloudFacet</returns>
        ApiResponse<BySecondaryCloudFacet> StatisticsBySecondaryCloudWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));
        /// <summary>
        /// Get statistics about files, grouped by secondary NAS
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_secondary_nas
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>BySecondaryNasFacet</returns>
        BySecondaryNasFacet StatisticsBySecondaryNas (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));

        /// <summary>
        /// Get statistics about files, grouped by secondary NAS
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_secondary_nas
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ApiResponse of BySecondaryNasFacet</returns>
        ApiResponse<BySecondaryNasFacet> StatisticsBySecondaryNasWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));
        /// <summary>
        /// Get statistics about files, grouped by secondary storage
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_secondary_storage
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>BySecondaryStorageFacet</returns>
        BySecondaryStorageFacet StatisticsBySecondaryStorage (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));

        /// <summary>
        /// Get statistics about files, grouped by secondary storage
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_secondary_storage
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ApiResponse of BySecondaryStorageFacet</returns>
        ApiResponse<BySecondaryStorageFacet> StatisticsBySecondaryStorageWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));
        /// <summary>
        /// Get statistics about files, grouped by secondary Tape
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_secondary_tape
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>BySecondaryTapeFacet</returns>
        BySecondaryTapeFacet StatisticsBySecondaryTape (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));

        /// <summary>
        /// Get statistics about files, grouped by secondary Tape
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_secondary_tape
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ApiResponse of BySecondaryTapeFacet</returns>
        ApiResponse<BySecondaryTapeFacet> StatisticsBySecondaryTapeWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));
        /// <summary>
        /// Get statistics about files, grouped by size
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_size
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>BySizeFacet</returns>
        BySizeFacet StatisticsBySize (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string));

        /// <summary>
        /// Get statistics about files, grouped by size
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_size
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>ApiResponse of BySizeFacet</returns>
        ApiResponse<BySizeFacet> StatisticsBySizeWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string));
        /// <summary>
        /// Get statistics about files, grouped by owner (user)
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_user_owner
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ByUserOwnerFacet</returns>
        ByUserOwnerFacet StatisticsByUserOwner (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));

        /// <summary>
        /// Get statistics about files, grouped by owner (user)
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_user_owner
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ApiResponse of ByUserOwnerFacet</returns>
        ApiResponse<ByUserOwnerFacet> StatisticsByUserOwnerWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));
        /// <summary>
        /// Get statistics about storages, grouped by types
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / storages
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>StorageFacet</returns>
        StorageFacet StatisticsStorage (string q = default(string), List<string> fq = default(List<string>));

        /// <summary>
        /// Get statistics about storages, grouped by types
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / storages
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>ApiResponse of StorageFacet</returns>
        ApiResponse<StorageFacet> StatisticsStorageWithHttpInfo (string q = default(string), List<string> fq = default(List<string>));
        /// <summary>
        /// Get statistics about tasks executions, grouped by status
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / task_by_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>ByTaskStatusFacet</returns>
        ByTaskStatusFacet StatisticsTaskByStatus (string q = default(string), List<string> fq = default(List<string>));

        /// <summary>
        /// Get statistics about tasks executions, grouped by status
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / task_by_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>ApiResponse of ByTaskStatusFacet</returns>
        ApiResponse<ByTaskStatusFacet> StatisticsTaskByStatusWithHttpInfo (string q = default(string), List<string> fq = default(List<string>));
        /// <summary>
        /// Get statistics about tasks executions, grouped by source and destination
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / task_by_storage
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>ByTaskStorageFacet</returns>
        ByTaskStorageFacet StatisticsTaskByStorage (string q = default(string), List<string> fq = default(List<string>));

        /// <summary>
        /// Get statistics about tasks executions, grouped by source and destination
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / task_by_storage
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>ApiResponse of ByTaskStorageFacet</returns>
        ApiResponse<ByTaskStorageFacet> StatisticsTaskByStorageWithHttpInfo (string q = default(string), List<string> fq = default(List<string>));
        /// <summary>
        /// Get statistics about tasks executions, grouped by workflow
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / task_by_workflow
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>ByTaskWorkflowFacet</returns>
        ByTaskWorkflowFacet StatisticsTaskByWorkflow (string q = default(string), List<string> fq = default(List<string>));

        /// <summary>
        /// Get statistics about tasks executions, grouped by workflow
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / task_by_workflow
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>ApiResponse of ByTaskWorkflowFacet</returns>
        ApiResponse<ByTaskWorkflowFacet> StatisticsTaskByWorkflowWithHttpInfo (string q = default(string), List<string> fq = default(List<string>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatisticsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get statistics about files, grouped by date
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_date
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of ByDateFacet</returns>
        System.Threading.Tasks.Task<ByDateFacet> StatisticsByDateAsync (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string));

        /// <summary>
        /// Get statistics about files, grouped by date
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_date
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of ApiResponse (ByDateFacet)</returns>
        System.Threading.Tasks.Task<ApiResponse<ByDateFacet>> StatisticsByDateAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string));
        /// <summary>
        /// Get statistics about files, grouped by file extension
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_file_extension
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ByFileExtensionFacet</returns>
        System.Threading.Tasks.Task<ByFileExtensionFacet> StatisticsByFileExtensionAsync (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));

        /// <summary>
        /// Get statistics about files, grouped by file extension
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_file_extension
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (ByFileExtensionFacet)</returns>
        System.Threading.Tasks.Task<ApiResponse<ByFileExtensionFacet>> StatisticsByFileExtensionAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));
        /// <summary>
        /// Get statistics about files, grouped by owner (group)
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_group_owner
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ByGroupOwnerFacet</returns>
        System.Threading.Tasks.Task<ByGroupOwnerFacet> StatisticsByGroupOwnerAsync (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));

        /// <summary>
        /// Get statistics about files, grouped by owner (group)
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_group_owner
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (ByGroupOwnerFacet)</returns>
        System.Threading.Tasks.Task<ApiResponse<ByGroupOwnerFacet>> StatisticsByGroupOwnerAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));
        /// <summary>
        /// Get statistics about files, grouped by primary Cloud
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_primary_cloud
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ByPrimaryCloudFacet</returns>
        System.Threading.Tasks.Task<ByPrimaryCloudFacet> StatisticsByPrimaryCloudAsync (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));

        /// <summary>
        /// Get statistics about files, grouped by primary Cloud
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_primary_cloud
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (ByPrimaryCloudFacet)</returns>
        System.Threading.Tasks.Task<ApiResponse<ByPrimaryCloudFacet>> StatisticsByPrimaryCloudAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));
        /// <summary>
        /// Get statistics about files, grouped by primary storages
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_primary_name
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ByPrimaryFacet</returns>
        System.Threading.Tasks.Task<ByPrimaryFacet> StatisticsByPrimaryNameAsync (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));

        /// <summary>
        /// Get statistics about files, grouped by primary storages
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_primary_name
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (ByPrimaryFacet)</returns>
        System.Threading.Tasks.Task<ApiResponse<ByPrimaryFacet>> StatisticsByPrimaryNameAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));
        /// <summary>
        /// Get statistics about files, grouped by primary NAS
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_primary_nas
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ByPrimaryNasFacet</returns>
        System.Threading.Tasks.Task<ByPrimaryNasFacet> StatisticsByPrimaryNasAsync (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));

        /// <summary>
        /// Get statistics about files, grouped by primary NAS
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_primary_nas
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (ByPrimaryNasFacet)</returns>
        System.Threading.Tasks.Task<ApiResponse<ByPrimaryNasFacet>> StatisticsByPrimaryNasAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));
        /// <summary>
        /// Get statistics about files, grouped by primary storage
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_primary_storage
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ByPrimaryStorageFacet</returns>
        System.Threading.Tasks.Task<ByPrimaryStorageFacet> StatisticsByPrimaryStorageAsync (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));

        /// <summary>
        /// Get statistics about files, grouped by primary storage
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_primary_storage
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (ByPrimaryStorageFacet)</returns>
        System.Threading.Tasks.Task<ApiResponse<ByPrimaryStorageFacet>> StatisticsByPrimaryStorageAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));
        /// <summary>
        /// Get statistics about files, grouped by secondary Cloud
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_secondary_cloud
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of BySecondaryCloudFacet</returns>
        System.Threading.Tasks.Task<BySecondaryCloudFacet> StatisticsBySecondaryCloudAsync (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));

        /// <summary>
        /// Get statistics about files, grouped by secondary Cloud
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_secondary_cloud
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (BySecondaryCloudFacet)</returns>
        System.Threading.Tasks.Task<ApiResponse<BySecondaryCloudFacet>> StatisticsBySecondaryCloudAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));
        /// <summary>
        /// Get statistics about files, grouped by secondary NAS
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_secondary_nas
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of BySecondaryNasFacet</returns>
        System.Threading.Tasks.Task<BySecondaryNasFacet> StatisticsBySecondaryNasAsync (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));

        /// <summary>
        /// Get statistics about files, grouped by secondary NAS
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_secondary_nas
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (BySecondaryNasFacet)</returns>
        System.Threading.Tasks.Task<ApiResponse<BySecondaryNasFacet>> StatisticsBySecondaryNasAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));
        /// <summary>
        /// Get statistics about files, grouped by secondary storage
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_secondary_storage
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of BySecondaryStorageFacet</returns>
        System.Threading.Tasks.Task<BySecondaryStorageFacet> StatisticsBySecondaryStorageAsync (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));

        /// <summary>
        /// Get statistics about files, grouped by secondary storage
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_secondary_storage
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (BySecondaryStorageFacet)</returns>
        System.Threading.Tasks.Task<ApiResponse<BySecondaryStorageFacet>> StatisticsBySecondaryStorageAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));
        /// <summary>
        /// Get statistics about files, grouped by secondary Tape
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_secondary_tape
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of BySecondaryTapeFacet</returns>
        System.Threading.Tasks.Task<BySecondaryTapeFacet> StatisticsBySecondaryTapeAsync (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));

        /// <summary>
        /// Get statistics about files, grouped by secondary Tape
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_secondary_tape
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (BySecondaryTapeFacet)</returns>
        System.Threading.Tasks.Task<ApiResponse<BySecondaryTapeFacet>> StatisticsBySecondaryTapeAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));
        /// <summary>
        /// Get statistics about files, grouped by size
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_size
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of BySizeFacet</returns>
        System.Threading.Tasks.Task<BySizeFacet> StatisticsBySizeAsync (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string));

        /// <summary>
        /// Get statistics about files, grouped by size
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_size
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of ApiResponse (BySizeFacet)</returns>
        System.Threading.Tasks.Task<ApiResponse<BySizeFacet>> StatisticsBySizeAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string));
        /// <summary>
        /// Get statistics about files, grouped by owner (user)
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_user_owner
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ByUserOwnerFacet</returns>
        System.Threading.Tasks.Task<ByUserOwnerFacet> StatisticsByUserOwnerAsync (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));

        /// <summary>
        /// Get statistics about files, grouped by owner (user)
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_user_owner
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (ByUserOwnerFacet)</returns>
        System.Threading.Tasks.Task<ApiResponse<ByUserOwnerFacet>> StatisticsByUserOwnerAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?));
        /// <summary>
        /// Get statistics about storages, grouped by types
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / storages
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>Task of StorageFacet</returns>
        System.Threading.Tasks.Task<StorageFacet> StatisticsStorageAsync (string q = default(string), List<string> fq = default(List<string>));

        /// <summary>
        /// Get statistics about storages, grouped by types
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / storages
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (StorageFacet)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageFacet>> StatisticsStorageAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>));
        /// <summary>
        /// Get statistics about tasks executions, grouped by status
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / task_by_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>Task of ByTaskStatusFacet</returns>
        System.Threading.Tasks.Task<ByTaskStatusFacet> StatisticsTaskByStatusAsync (string q = default(string), List<string> fq = default(List<string>));

        /// <summary>
        /// Get statistics about tasks executions, grouped by status
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / task_by_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (ByTaskStatusFacet)</returns>
        System.Threading.Tasks.Task<ApiResponse<ByTaskStatusFacet>> StatisticsTaskByStatusAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>));
        /// <summary>
        /// Get statistics about tasks executions, grouped by source and destination
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / task_by_storage
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>Task of ByTaskStorageFacet</returns>
        System.Threading.Tasks.Task<ByTaskStorageFacet> StatisticsTaskByStorageAsync (string q = default(string), List<string> fq = default(List<string>));

        /// <summary>
        /// Get statistics about tasks executions, grouped by source and destination
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / task_by_storage
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (ByTaskStorageFacet)</returns>
        System.Threading.Tasks.Task<ApiResponse<ByTaskStorageFacet>> StatisticsTaskByStorageAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>));
        /// <summary>
        /// Get statistics about tasks executions, grouped by workflow
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / task_by_workflow
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>Task of ByTaskWorkflowFacet</returns>
        System.Threading.Tasks.Task<ByTaskWorkflowFacet> StatisticsTaskByWorkflowAsync (string q = default(string), List<string> fq = default(List<string>));

        /// <summary>
        /// Get statistics about tasks executions, grouped by workflow
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / task_by_workflow
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (ByTaskWorkflowFacet)</returns>
        System.Threading.Tasks.Task<ApiResponse<ByTaskWorkflowFacet>> StatisticsTaskByWorkflowAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatisticsApi : IStatisticsApiSync, IStatisticsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StatisticsApi : IStatisticsApi
    {
        private Io.Nodeum.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatisticsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatisticsApi(String basePath)
        {
            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                new Io.Nodeum.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StatisticsApi(Io.Nodeum.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public StatisticsApi(Io.Nodeum.Sdk.Client.ISynchronousClient client,Io.Nodeum.Sdk.Client.IAsynchronousClient asyncClient, Io.Nodeum.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Io.Nodeum.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get statistics about files, grouped by date **API Key Scope**: statistics / by_date
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>ByDateFacet</returns>
        public ByDateFacet StatisticsByDate (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByDateFacet> localVarResponse = StatisticsByDateWithHttpInfo(q, fq, dateAttr);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get statistics about files, grouped by date **API Key Scope**: statistics / by_date
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>ApiResponse of ByDateFacet</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ByDateFacet > StatisticsByDateWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ByDateFacet >("/statistics/by_date", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsByDate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about files, grouped by date **API Key Scope**: statistics / by_date
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of ByDateFacet</returns>
        public async System.Threading.Tasks.Task<ByDateFacet> StatisticsByDateAsync (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByDateFacet> localVarResponse = await StatisticsByDateAsyncWithHttpInfo(q, fq, dateAttr);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get statistics about files, grouped by date **API Key Scope**: statistics / by_date
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of ApiResponse (ByDateFacet)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ByDateFacet>> StatisticsByDateAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ByDateFacet>("/statistics/by_date", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsByDate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about files, grouped by file extension **API Key Scope**: statistics / by_file_extension
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ByFileExtensionFacet</returns>
        public ByFileExtensionFacet StatisticsByFileExtension (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByFileExtensionFacet> localVarResponse = StatisticsByFileExtensionWithHttpInfo(q, fq, dateAttr, sort, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get statistics about files, grouped by file extension **API Key Scope**: statistics / by_file_extension
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ApiResponse of ByFileExtensionFacet</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ByFileExtensionFacet > StatisticsByFileExtensionWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ByFileExtensionFacet >("/statistics/by_file_extension", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsByFileExtension", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about files, grouped by file extension **API Key Scope**: statistics / by_file_extension
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ByFileExtensionFacet</returns>
        public async System.Threading.Tasks.Task<ByFileExtensionFacet> StatisticsByFileExtensionAsync (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByFileExtensionFacet> localVarResponse = await StatisticsByFileExtensionAsyncWithHttpInfo(q, fq, dateAttr, sort, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get statistics about files, grouped by file extension **API Key Scope**: statistics / by_file_extension
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (ByFileExtensionFacet)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ByFileExtensionFacet>> StatisticsByFileExtensionAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ByFileExtensionFacet>("/statistics/by_file_extension", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsByFileExtension", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about files, grouped by owner (group) **API Key Scope**: statistics / by_group_owner
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ByGroupOwnerFacet</returns>
        public ByGroupOwnerFacet StatisticsByGroupOwner (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByGroupOwnerFacet> localVarResponse = StatisticsByGroupOwnerWithHttpInfo(q, fq, dateAttr, sort, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get statistics about files, grouped by owner (group) **API Key Scope**: statistics / by_group_owner
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ApiResponse of ByGroupOwnerFacet</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ByGroupOwnerFacet > StatisticsByGroupOwnerWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ByGroupOwnerFacet >("/statistics/by_group_owner", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsByGroupOwner", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about files, grouped by owner (group) **API Key Scope**: statistics / by_group_owner
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ByGroupOwnerFacet</returns>
        public async System.Threading.Tasks.Task<ByGroupOwnerFacet> StatisticsByGroupOwnerAsync (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByGroupOwnerFacet> localVarResponse = await StatisticsByGroupOwnerAsyncWithHttpInfo(q, fq, dateAttr, sort, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get statistics about files, grouped by owner (group) **API Key Scope**: statistics / by_group_owner
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (ByGroupOwnerFacet)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ByGroupOwnerFacet>> StatisticsByGroupOwnerAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ByGroupOwnerFacet>("/statistics/by_group_owner", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsByGroupOwner", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about files, grouped by primary Cloud **API Key Scope**: statistics / by_primary_cloud
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ByPrimaryCloudFacet</returns>
        public ByPrimaryCloudFacet StatisticsByPrimaryCloud (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByPrimaryCloudFacet> localVarResponse = StatisticsByPrimaryCloudWithHttpInfo(q, fq, dateAttr, sort, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get statistics about files, grouped by primary Cloud **API Key Scope**: statistics / by_primary_cloud
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ApiResponse of ByPrimaryCloudFacet</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ByPrimaryCloudFacet > StatisticsByPrimaryCloudWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ByPrimaryCloudFacet >("/statistics/by_primary_cloud", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsByPrimaryCloud", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about files, grouped by primary Cloud **API Key Scope**: statistics / by_primary_cloud
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ByPrimaryCloudFacet</returns>
        public async System.Threading.Tasks.Task<ByPrimaryCloudFacet> StatisticsByPrimaryCloudAsync (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByPrimaryCloudFacet> localVarResponse = await StatisticsByPrimaryCloudAsyncWithHttpInfo(q, fq, dateAttr, sort, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get statistics about files, grouped by primary Cloud **API Key Scope**: statistics / by_primary_cloud
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (ByPrimaryCloudFacet)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ByPrimaryCloudFacet>> StatisticsByPrimaryCloudAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ByPrimaryCloudFacet>("/statistics/by_primary_cloud", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsByPrimaryCloud", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about files, grouped by primary storages **API Key Scope**: statistics / by_primary_name
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ByPrimaryFacet</returns>
        public ByPrimaryFacet StatisticsByPrimaryName (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByPrimaryFacet> localVarResponse = StatisticsByPrimaryNameWithHttpInfo(q, fq, dateAttr, sort, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get statistics about files, grouped by primary storages **API Key Scope**: statistics / by_primary_name
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ApiResponse of ByPrimaryFacet</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ByPrimaryFacet > StatisticsByPrimaryNameWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ByPrimaryFacet >("/statistics/by_primary_name", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsByPrimaryName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about files, grouped by primary storages **API Key Scope**: statistics / by_primary_name
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ByPrimaryFacet</returns>
        public async System.Threading.Tasks.Task<ByPrimaryFacet> StatisticsByPrimaryNameAsync (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByPrimaryFacet> localVarResponse = await StatisticsByPrimaryNameAsyncWithHttpInfo(q, fq, dateAttr, sort, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get statistics about files, grouped by primary storages **API Key Scope**: statistics / by_primary_name
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (ByPrimaryFacet)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ByPrimaryFacet>> StatisticsByPrimaryNameAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ByPrimaryFacet>("/statistics/by_primary_name", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsByPrimaryName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about files, grouped by primary NAS **API Key Scope**: statistics / by_primary_nas
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ByPrimaryNasFacet</returns>
        public ByPrimaryNasFacet StatisticsByPrimaryNas (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByPrimaryNasFacet> localVarResponse = StatisticsByPrimaryNasWithHttpInfo(q, fq, dateAttr, sort, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get statistics about files, grouped by primary NAS **API Key Scope**: statistics / by_primary_nas
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ApiResponse of ByPrimaryNasFacet</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ByPrimaryNasFacet > StatisticsByPrimaryNasWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ByPrimaryNasFacet >("/statistics/by_primary_nas", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsByPrimaryNas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about files, grouped by primary NAS **API Key Scope**: statistics / by_primary_nas
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ByPrimaryNasFacet</returns>
        public async System.Threading.Tasks.Task<ByPrimaryNasFacet> StatisticsByPrimaryNasAsync (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByPrimaryNasFacet> localVarResponse = await StatisticsByPrimaryNasAsyncWithHttpInfo(q, fq, dateAttr, sort, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get statistics about files, grouped by primary NAS **API Key Scope**: statistics / by_primary_nas
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (ByPrimaryNasFacet)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ByPrimaryNasFacet>> StatisticsByPrimaryNasAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ByPrimaryNasFacet>("/statistics/by_primary_nas", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsByPrimaryNas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about files, grouped by primary storage **API Key Scope**: statistics / by_primary_storage
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ByPrimaryStorageFacet</returns>
        public ByPrimaryStorageFacet StatisticsByPrimaryStorage (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByPrimaryStorageFacet> localVarResponse = StatisticsByPrimaryStorageWithHttpInfo(q, fq, dateAttr, sort, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get statistics about files, grouped by primary storage **API Key Scope**: statistics / by_primary_storage
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ApiResponse of ByPrimaryStorageFacet</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ByPrimaryStorageFacet > StatisticsByPrimaryStorageWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ByPrimaryStorageFacet >("/statistics/by_primary_storage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsByPrimaryStorage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about files, grouped by primary storage **API Key Scope**: statistics / by_primary_storage
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ByPrimaryStorageFacet</returns>
        public async System.Threading.Tasks.Task<ByPrimaryStorageFacet> StatisticsByPrimaryStorageAsync (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByPrimaryStorageFacet> localVarResponse = await StatisticsByPrimaryStorageAsyncWithHttpInfo(q, fq, dateAttr, sort, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get statistics about files, grouped by primary storage **API Key Scope**: statistics / by_primary_storage
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (ByPrimaryStorageFacet)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ByPrimaryStorageFacet>> StatisticsByPrimaryStorageAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ByPrimaryStorageFacet>("/statistics/by_primary_storage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsByPrimaryStorage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about files, grouped by secondary Cloud **API Key Scope**: statistics / by_secondary_cloud
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>BySecondaryCloudFacet</returns>
        public BySecondaryCloudFacet StatisticsBySecondaryCloud (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<BySecondaryCloudFacet> localVarResponse = StatisticsBySecondaryCloudWithHttpInfo(q, fq, dateAttr, sort, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get statistics about files, grouped by secondary Cloud **API Key Scope**: statistics / by_secondary_cloud
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ApiResponse of BySecondaryCloudFacet</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< BySecondaryCloudFacet > StatisticsBySecondaryCloudWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< BySecondaryCloudFacet >("/statistics/by_secondary_cloud", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsBySecondaryCloud", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about files, grouped by secondary Cloud **API Key Scope**: statistics / by_secondary_cloud
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of BySecondaryCloudFacet</returns>
        public async System.Threading.Tasks.Task<BySecondaryCloudFacet> StatisticsBySecondaryCloudAsync (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<BySecondaryCloudFacet> localVarResponse = await StatisticsBySecondaryCloudAsyncWithHttpInfo(q, fq, dateAttr, sort, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get statistics about files, grouped by secondary Cloud **API Key Scope**: statistics / by_secondary_cloud
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (BySecondaryCloudFacet)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<BySecondaryCloudFacet>> StatisticsBySecondaryCloudAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BySecondaryCloudFacet>("/statistics/by_secondary_cloud", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsBySecondaryCloud", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about files, grouped by secondary NAS **API Key Scope**: statistics / by_secondary_nas
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>BySecondaryNasFacet</returns>
        public BySecondaryNasFacet StatisticsBySecondaryNas (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<BySecondaryNasFacet> localVarResponse = StatisticsBySecondaryNasWithHttpInfo(q, fq, dateAttr, sort, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get statistics about files, grouped by secondary NAS **API Key Scope**: statistics / by_secondary_nas
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ApiResponse of BySecondaryNasFacet</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< BySecondaryNasFacet > StatisticsBySecondaryNasWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< BySecondaryNasFacet >("/statistics/by_secondary_nas", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsBySecondaryNas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about files, grouped by secondary NAS **API Key Scope**: statistics / by_secondary_nas
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of BySecondaryNasFacet</returns>
        public async System.Threading.Tasks.Task<BySecondaryNasFacet> StatisticsBySecondaryNasAsync (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<BySecondaryNasFacet> localVarResponse = await StatisticsBySecondaryNasAsyncWithHttpInfo(q, fq, dateAttr, sort, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get statistics about files, grouped by secondary NAS **API Key Scope**: statistics / by_secondary_nas
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (BySecondaryNasFacet)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<BySecondaryNasFacet>> StatisticsBySecondaryNasAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BySecondaryNasFacet>("/statistics/by_secondary_nas", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsBySecondaryNas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about files, grouped by secondary storage **API Key Scope**: statistics / by_secondary_storage
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>BySecondaryStorageFacet</returns>
        public BySecondaryStorageFacet StatisticsBySecondaryStorage (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<BySecondaryStorageFacet> localVarResponse = StatisticsBySecondaryStorageWithHttpInfo(q, fq, dateAttr, sort, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get statistics about files, grouped by secondary storage **API Key Scope**: statistics / by_secondary_storage
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ApiResponse of BySecondaryStorageFacet</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< BySecondaryStorageFacet > StatisticsBySecondaryStorageWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< BySecondaryStorageFacet >("/statistics/by_secondary_storage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsBySecondaryStorage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about files, grouped by secondary storage **API Key Scope**: statistics / by_secondary_storage
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of BySecondaryStorageFacet</returns>
        public async System.Threading.Tasks.Task<BySecondaryStorageFacet> StatisticsBySecondaryStorageAsync (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<BySecondaryStorageFacet> localVarResponse = await StatisticsBySecondaryStorageAsyncWithHttpInfo(q, fq, dateAttr, sort, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get statistics about files, grouped by secondary storage **API Key Scope**: statistics / by_secondary_storage
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (BySecondaryStorageFacet)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<BySecondaryStorageFacet>> StatisticsBySecondaryStorageAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BySecondaryStorageFacet>("/statistics/by_secondary_storage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsBySecondaryStorage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about files, grouped by secondary Tape **API Key Scope**: statistics / by_secondary_tape
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>BySecondaryTapeFacet</returns>
        public BySecondaryTapeFacet StatisticsBySecondaryTape (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<BySecondaryTapeFacet> localVarResponse = StatisticsBySecondaryTapeWithHttpInfo(q, fq, dateAttr, sort, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get statistics about files, grouped by secondary Tape **API Key Scope**: statistics / by_secondary_tape
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ApiResponse of BySecondaryTapeFacet</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< BySecondaryTapeFacet > StatisticsBySecondaryTapeWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< BySecondaryTapeFacet >("/statistics/by_secondary_tape", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsBySecondaryTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about files, grouped by secondary Tape **API Key Scope**: statistics / by_secondary_tape
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of BySecondaryTapeFacet</returns>
        public async System.Threading.Tasks.Task<BySecondaryTapeFacet> StatisticsBySecondaryTapeAsync (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<BySecondaryTapeFacet> localVarResponse = await StatisticsBySecondaryTapeAsyncWithHttpInfo(q, fq, dateAttr, sort, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get statistics about files, grouped by secondary Tape **API Key Scope**: statistics / by_secondary_tape
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (BySecondaryTapeFacet)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<BySecondaryTapeFacet>> StatisticsBySecondaryTapeAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BySecondaryTapeFacet>("/statistics/by_secondary_tape", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsBySecondaryTape", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about files, grouped by size **API Key Scope**: statistics / by_size
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>BySizeFacet</returns>
        public BySizeFacet StatisticsBySize (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<BySizeFacet> localVarResponse = StatisticsBySizeWithHttpInfo(q, fq, dateAttr);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get statistics about files, grouped by size **API Key Scope**: statistics / by_size
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>ApiResponse of BySizeFacet</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< BySizeFacet > StatisticsBySizeWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< BySizeFacet >("/statistics/by_size", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsBySize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about files, grouped by size **API Key Scope**: statistics / by_size
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of BySizeFacet</returns>
        public async System.Threading.Tasks.Task<BySizeFacet> StatisticsBySizeAsync (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<BySizeFacet> localVarResponse = await StatisticsBySizeAsyncWithHttpInfo(q, fq, dateAttr);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get statistics about files, grouped by size **API Key Scope**: statistics / by_size
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of ApiResponse (BySizeFacet)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<BySizeFacet>> StatisticsBySizeAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BySizeFacet>("/statistics/by_size", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsBySize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about files, grouped by owner (user) **API Key Scope**: statistics / by_user_owner
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ByUserOwnerFacet</returns>
        public ByUserOwnerFacet StatisticsByUserOwner (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByUserOwnerFacet> localVarResponse = StatisticsByUserOwnerWithHttpInfo(q, fq, dateAttr, sort, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get statistics about files, grouped by owner (user) **API Key Scope**: statistics / by_user_owner
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>ApiResponse of ByUserOwnerFacet</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ByUserOwnerFacet > StatisticsByUserOwnerWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ByUserOwnerFacet >("/statistics/by_user_owner", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsByUserOwner", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about files, grouped by owner (user) **API Key Scope**: statistics / by_user_owner
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ByUserOwnerFacet</returns>
        public async System.Threading.Tasks.Task<ByUserOwnerFacet> StatisticsByUserOwnerAsync (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByUserOwnerFacet> localVarResponse = await StatisticsByUserOwnerAsyncWithHttpInfo(q, fq, dateAttr, sort, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get statistics about files, grouped by owner (user) **API Key Scope**: statistics / by_user_owner
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <param name="sort">Sort results of facet (optional, default to count)</param>
        /// <param name="limit">Limit results of facet (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (ByUserOwnerFacet)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ByUserOwnerFacet>> StatisticsByUserOwnerAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>), string dateAttr = default(string), string sort = default(string), int? limit = default(int?))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ByUserOwnerFacet>("/statistics/by_user_owner", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsByUserOwner", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about storages, grouped by types **API Key Scope**: statistics / storages
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>StorageFacet</returns>
        public StorageFacet StatisticsStorage (string q = default(string), List<string> fq = default(List<string>))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<StorageFacet> localVarResponse = StatisticsStorageWithHttpInfo(q, fq);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get statistics about storages, grouped by types **API Key Scope**: statistics / storages
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>ApiResponse of StorageFacet</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< StorageFacet > StatisticsStorageWithHttpInfo (string q = default(string), List<string> fq = default(List<string>))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< StorageFacet >("/statistics/storage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsStorage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about storages, grouped by types **API Key Scope**: statistics / storages
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>Task of StorageFacet</returns>
        public async System.Threading.Tasks.Task<StorageFacet> StatisticsStorageAsync (string q = default(string), List<string> fq = default(List<string>))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<StorageFacet> localVarResponse = await StatisticsStorageAsyncWithHttpInfo(q, fq);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get statistics about storages, grouped by types **API Key Scope**: statistics / storages
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (StorageFacet)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<StorageFacet>> StatisticsStorageAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<StorageFacet>("/statistics/storage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsStorage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about tasks executions, grouped by status **API Key Scope**: statistics / task_by_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>ByTaskStatusFacet</returns>
        public ByTaskStatusFacet StatisticsTaskByStatus (string q = default(string), List<string> fq = default(List<string>))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByTaskStatusFacet> localVarResponse = StatisticsTaskByStatusWithHttpInfo(q, fq);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get statistics about tasks executions, grouped by status **API Key Scope**: statistics / task_by_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>ApiResponse of ByTaskStatusFacet</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ByTaskStatusFacet > StatisticsTaskByStatusWithHttpInfo (string q = default(string), List<string> fq = default(List<string>))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ByTaskStatusFacet >("/statistics/task_by_status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsTaskByStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about tasks executions, grouped by status **API Key Scope**: statistics / task_by_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>Task of ByTaskStatusFacet</returns>
        public async System.Threading.Tasks.Task<ByTaskStatusFacet> StatisticsTaskByStatusAsync (string q = default(string), List<string> fq = default(List<string>))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByTaskStatusFacet> localVarResponse = await StatisticsTaskByStatusAsyncWithHttpInfo(q, fq);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get statistics about tasks executions, grouped by status **API Key Scope**: statistics / task_by_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (ByTaskStatusFacet)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ByTaskStatusFacet>> StatisticsTaskByStatusAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ByTaskStatusFacet>("/statistics/task_by_status", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsTaskByStatus", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about tasks executions, grouped by source and destination **API Key Scope**: statistics / task_by_storage
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>ByTaskStorageFacet</returns>
        public ByTaskStorageFacet StatisticsTaskByStorage (string q = default(string), List<string> fq = default(List<string>))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByTaskStorageFacet> localVarResponse = StatisticsTaskByStorageWithHttpInfo(q, fq);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get statistics about tasks executions, grouped by source and destination **API Key Scope**: statistics / task_by_storage
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>ApiResponse of ByTaskStorageFacet</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ByTaskStorageFacet > StatisticsTaskByStorageWithHttpInfo (string q = default(string), List<string> fq = default(List<string>))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ByTaskStorageFacet >("/statistics/task_by_storage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsTaskByStorage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about tasks executions, grouped by source and destination **API Key Scope**: statistics / task_by_storage
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>Task of ByTaskStorageFacet</returns>
        public async System.Threading.Tasks.Task<ByTaskStorageFacet> StatisticsTaskByStorageAsync (string q = default(string), List<string> fq = default(List<string>))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByTaskStorageFacet> localVarResponse = await StatisticsTaskByStorageAsyncWithHttpInfo(q, fq);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get statistics about tasks executions, grouped by source and destination **API Key Scope**: statistics / task_by_storage
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (ByTaskStorageFacet)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ByTaskStorageFacet>> StatisticsTaskByStorageAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ByTaskStorageFacet>("/statistics/task_by_storage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsTaskByStorage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about tasks executions, grouped by workflow **API Key Scope**: statistics / task_by_workflow
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>ByTaskWorkflowFacet</returns>
        public ByTaskWorkflowFacet StatisticsTaskByWorkflow (string q = default(string), List<string> fq = default(List<string>))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByTaskWorkflowFacet> localVarResponse = StatisticsTaskByWorkflowWithHttpInfo(q, fq);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get statistics about tasks executions, grouped by workflow **API Key Scope**: statistics / task_by_workflow
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>ApiResponse of ByTaskWorkflowFacet</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ByTaskWorkflowFacet > StatisticsTaskByWorkflowWithHttpInfo (string q = default(string), List<string> fq = default(List<string>))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ByTaskWorkflowFacet >("/statistics/task_by_workflow", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsTaskByWorkflow", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics about tasks executions, grouped by workflow **API Key Scope**: statistics / task_by_workflow
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>Task of ByTaskWorkflowFacet</returns>
        public async System.Threading.Tasks.Task<ByTaskWorkflowFacet> StatisticsTaskByWorkflowAsync (string q = default(string), List<string> fq = default(List<string>))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByTaskWorkflowFacet> localVarResponse = await StatisticsTaskByWorkflowAsyncWithHttpInfo(q, fq);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get statistics about tasks executions, grouped by workflow **API Key Scope**: statistics / task_by_workflow
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="fq">Solr filter query  Multiple query can be separated by &#x60;|&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (ByTaskWorkflowFacet)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ByTaskWorkflowFacet>> StatisticsTaskByWorkflowAsyncWithHttpInfo (string q = default(string), List<string> fq = default(List<string>))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (fq != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "fq", fq));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ByTaskWorkflowFacet>("/statistics/task_by_workflow", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsTaskByWorkflow", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
