/* 
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Io.Nodeum.Sdk.Client;
using Io.Nodeum.Sdk.Model;

namespace Io.Nodeum.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatisticsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_file_extension
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>ByFileExtensionFacet</returns>
        ByFileExtensionFacet StatisticsByFileExtension (string q = default(string), string dateAttr = default(string));

        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_file_extension
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>ApiResponse of ByFileExtensionFacet</returns>
        ApiResponse<ByFileExtensionFacet> StatisticsByFileExtensionWithHttpInfo (string q = default(string), string dateAttr = default(string));
        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_group_owner
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>ByGroupOwnerFacet</returns>
        ByGroupOwnerFacet StatisticsByGroupOwner (string q = default(string), string dateAttr = default(string));

        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_group_owner
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>ApiResponse of ByGroupOwnerFacet</returns>
        ApiResponse<ByGroupOwnerFacet> StatisticsByGroupOwnerWithHttpInfo (string q = default(string), string dateAttr = default(string));
        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_primary_name
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>ByPrimaryFacet</returns>
        ByPrimaryFacet StatisticsByPrimaryName (string q = default(string), string dateAttr = default(string));

        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_primary_name
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>ApiResponse of ByPrimaryFacet</returns>
        ApiResponse<ByPrimaryFacet> StatisticsByPrimaryNameWithHttpInfo (string q = default(string), string dateAttr = default(string));
        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_secondary_storage
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>BySecondaryFacet</returns>
        BySecondaryFacet StatisticsBySecondaryStorage (string q = default(string), string dateAttr = default(string));

        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_secondary_storage
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>ApiResponse of BySecondaryFacet</returns>
        ApiResponse<BySecondaryFacet> StatisticsBySecondaryStorageWithHttpInfo (string q = default(string), string dateAttr = default(string));
        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_size
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>BySizeFacet</returns>
        BySizeFacet StatisticsBySize (string q = default(string), string dateAttr = default(string));

        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_size
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>ApiResponse of BySizeFacet</returns>
        ApiResponse<BySizeFacet> StatisticsBySizeWithHttpInfo (string q = default(string), string dateAttr = default(string));
        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_user_owner
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>ByUserOwnerFacet</returns>
        ByUserOwnerFacet StatisticsByUserOwner (string q = default(string), string dateAttr = default(string));

        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_user_owner
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>ApiResponse of ByUserOwnerFacet</returns>
        ApiResponse<ByUserOwnerFacet> StatisticsByUserOwnerWithHttpInfo (string q = default(string), string dateAttr = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatisticsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_file_extension
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of ByFileExtensionFacet</returns>
        System.Threading.Tasks.Task<ByFileExtensionFacet> StatisticsByFileExtensionAsync (string q = default(string), string dateAttr = default(string));

        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_file_extension
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of ApiResponse (ByFileExtensionFacet)</returns>
        System.Threading.Tasks.Task<ApiResponse<ByFileExtensionFacet>> StatisticsByFileExtensionAsyncWithHttpInfo (string q = default(string), string dateAttr = default(string));
        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_group_owner
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of ByGroupOwnerFacet</returns>
        System.Threading.Tasks.Task<ByGroupOwnerFacet> StatisticsByGroupOwnerAsync (string q = default(string), string dateAttr = default(string));

        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_group_owner
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of ApiResponse (ByGroupOwnerFacet)</returns>
        System.Threading.Tasks.Task<ApiResponse<ByGroupOwnerFacet>> StatisticsByGroupOwnerAsyncWithHttpInfo (string q = default(string), string dateAttr = default(string));
        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_primary_name
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of ByPrimaryFacet</returns>
        System.Threading.Tasks.Task<ByPrimaryFacet> StatisticsByPrimaryNameAsync (string q = default(string), string dateAttr = default(string));

        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_primary_name
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of ApiResponse (ByPrimaryFacet)</returns>
        System.Threading.Tasks.Task<ApiResponse<ByPrimaryFacet>> StatisticsByPrimaryNameAsyncWithHttpInfo (string q = default(string), string dateAttr = default(string));
        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_secondary_storage
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of BySecondaryFacet</returns>
        System.Threading.Tasks.Task<BySecondaryFacet> StatisticsBySecondaryStorageAsync (string q = default(string), string dateAttr = default(string));

        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_secondary_storage
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of ApiResponse (BySecondaryFacet)</returns>
        System.Threading.Tasks.Task<ApiResponse<BySecondaryFacet>> StatisticsBySecondaryStorageAsyncWithHttpInfo (string q = default(string), string dateAttr = default(string));
        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_size
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of BySizeFacet</returns>
        System.Threading.Tasks.Task<BySizeFacet> StatisticsBySizeAsync (string q = default(string), string dateAttr = default(string));

        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_size
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of ApiResponse (BySizeFacet)</returns>
        System.Threading.Tasks.Task<ApiResponse<BySizeFacet>> StatisticsBySizeAsyncWithHttpInfo (string q = default(string), string dateAttr = default(string));
        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_user_owner
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of ByUserOwnerFacet</returns>
        System.Threading.Tasks.Task<ByUserOwnerFacet> StatisticsByUserOwnerAsync (string q = default(string), string dateAttr = default(string));

        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: statistics / by_user_owner
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of ApiResponse (ByUserOwnerFacet)</returns>
        System.Threading.Tasks.Task<ApiResponse<ByUserOwnerFacet>> StatisticsByUserOwnerAsyncWithHttpInfo (string q = default(string), string dateAttr = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatisticsApi : IStatisticsApiSync, IStatisticsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StatisticsApi : IStatisticsApi
    {
        private Io.Nodeum.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatisticsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatisticsApi(String basePath)
        {
            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                new Io.Nodeum.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StatisticsApi(Io.Nodeum.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public StatisticsApi(Io.Nodeum.Sdk.Client.ISynchronousClient client,Io.Nodeum.Sdk.Client.IAsynchronousClient asyncClient, Io.Nodeum.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Io.Nodeum.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// TODO **API Key Scope**: statistics / by_file_extension
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>ByFileExtensionFacet</returns>
        public ByFileExtensionFacet StatisticsByFileExtension (string q = default(string), string dateAttr = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByFileExtensionFacet> localVarResponse = StatisticsByFileExtensionWithHttpInfo(q, dateAttr);
             return localVarResponse.Data;
        }

        /// <summary>
        /// TODO **API Key Scope**: statistics / by_file_extension
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>ApiResponse of ByFileExtensionFacet</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ByFileExtensionFacet > StatisticsByFileExtensionWithHttpInfo (string q = default(string), string dateAttr = default(string))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ByFileExtensionFacet >("/statistics/by_file_extension", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsByFileExtension", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// TODO **API Key Scope**: statistics / by_file_extension
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of ByFileExtensionFacet</returns>
        public async System.Threading.Tasks.Task<ByFileExtensionFacet> StatisticsByFileExtensionAsync (string q = default(string), string dateAttr = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByFileExtensionFacet> localVarResponse = await StatisticsByFileExtensionAsyncWithHttpInfo(q, dateAttr);
             return localVarResponse.Data;

        }

        /// <summary>
        /// TODO **API Key Scope**: statistics / by_file_extension
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of ApiResponse (ByFileExtensionFacet)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ByFileExtensionFacet>> StatisticsByFileExtensionAsyncWithHttpInfo (string q = default(string), string dateAttr = default(string))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ByFileExtensionFacet>("/statistics/by_file_extension", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsByFileExtension", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// TODO **API Key Scope**: statistics / by_group_owner
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>ByGroupOwnerFacet</returns>
        public ByGroupOwnerFacet StatisticsByGroupOwner (string q = default(string), string dateAttr = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByGroupOwnerFacet> localVarResponse = StatisticsByGroupOwnerWithHttpInfo(q, dateAttr);
             return localVarResponse.Data;
        }

        /// <summary>
        /// TODO **API Key Scope**: statistics / by_group_owner
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>ApiResponse of ByGroupOwnerFacet</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ByGroupOwnerFacet > StatisticsByGroupOwnerWithHttpInfo (string q = default(string), string dateAttr = default(string))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ByGroupOwnerFacet >("/statistics/by_group_owner", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsByGroupOwner", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// TODO **API Key Scope**: statistics / by_group_owner
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of ByGroupOwnerFacet</returns>
        public async System.Threading.Tasks.Task<ByGroupOwnerFacet> StatisticsByGroupOwnerAsync (string q = default(string), string dateAttr = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByGroupOwnerFacet> localVarResponse = await StatisticsByGroupOwnerAsyncWithHttpInfo(q, dateAttr);
             return localVarResponse.Data;

        }

        /// <summary>
        /// TODO **API Key Scope**: statistics / by_group_owner
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of ApiResponse (ByGroupOwnerFacet)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ByGroupOwnerFacet>> StatisticsByGroupOwnerAsyncWithHttpInfo (string q = default(string), string dateAttr = default(string))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ByGroupOwnerFacet>("/statistics/by_group_owner", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsByGroupOwner", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// TODO **API Key Scope**: statistics / by_primary_name
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>ByPrimaryFacet</returns>
        public ByPrimaryFacet StatisticsByPrimaryName (string q = default(string), string dateAttr = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByPrimaryFacet> localVarResponse = StatisticsByPrimaryNameWithHttpInfo(q, dateAttr);
             return localVarResponse.Data;
        }

        /// <summary>
        /// TODO **API Key Scope**: statistics / by_primary_name
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>ApiResponse of ByPrimaryFacet</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ByPrimaryFacet > StatisticsByPrimaryNameWithHttpInfo (string q = default(string), string dateAttr = default(string))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ByPrimaryFacet >("/statistics/by_primary_name", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsByPrimaryName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// TODO **API Key Scope**: statistics / by_primary_name
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of ByPrimaryFacet</returns>
        public async System.Threading.Tasks.Task<ByPrimaryFacet> StatisticsByPrimaryNameAsync (string q = default(string), string dateAttr = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByPrimaryFacet> localVarResponse = await StatisticsByPrimaryNameAsyncWithHttpInfo(q, dateAttr);
             return localVarResponse.Data;

        }

        /// <summary>
        /// TODO **API Key Scope**: statistics / by_primary_name
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of ApiResponse (ByPrimaryFacet)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ByPrimaryFacet>> StatisticsByPrimaryNameAsyncWithHttpInfo (string q = default(string), string dateAttr = default(string))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ByPrimaryFacet>("/statistics/by_primary_name", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsByPrimaryName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// TODO **API Key Scope**: statistics / by_secondary_storage
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>BySecondaryFacet</returns>
        public BySecondaryFacet StatisticsBySecondaryStorage (string q = default(string), string dateAttr = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<BySecondaryFacet> localVarResponse = StatisticsBySecondaryStorageWithHttpInfo(q, dateAttr);
             return localVarResponse.Data;
        }

        /// <summary>
        /// TODO **API Key Scope**: statistics / by_secondary_storage
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>ApiResponse of BySecondaryFacet</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< BySecondaryFacet > StatisticsBySecondaryStorageWithHttpInfo (string q = default(string), string dateAttr = default(string))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< BySecondaryFacet >("/statistics/by_secondary_storage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsBySecondaryStorage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// TODO **API Key Scope**: statistics / by_secondary_storage
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of BySecondaryFacet</returns>
        public async System.Threading.Tasks.Task<BySecondaryFacet> StatisticsBySecondaryStorageAsync (string q = default(string), string dateAttr = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<BySecondaryFacet> localVarResponse = await StatisticsBySecondaryStorageAsyncWithHttpInfo(q, dateAttr);
             return localVarResponse.Data;

        }

        /// <summary>
        /// TODO **API Key Scope**: statistics / by_secondary_storage
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of ApiResponse (BySecondaryFacet)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<BySecondaryFacet>> StatisticsBySecondaryStorageAsyncWithHttpInfo (string q = default(string), string dateAttr = default(string))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BySecondaryFacet>("/statistics/by_secondary_storage", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsBySecondaryStorage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// TODO **API Key Scope**: statistics / by_size
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>BySizeFacet</returns>
        public BySizeFacet StatisticsBySize (string q = default(string), string dateAttr = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<BySizeFacet> localVarResponse = StatisticsBySizeWithHttpInfo(q, dateAttr);
             return localVarResponse.Data;
        }

        /// <summary>
        /// TODO **API Key Scope**: statistics / by_size
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>ApiResponse of BySizeFacet</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< BySizeFacet > StatisticsBySizeWithHttpInfo (string q = default(string), string dateAttr = default(string))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< BySizeFacet >("/statistics/by_size", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsBySize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// TODO **API Key Scope**: statistics / by_size
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of BySizeFacet</returns>
        public async System.Threading.Tasks.Task<BySizeFacet> StatisticsBySizeAsync (string q = default(string), string dateAttr = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<BySizeFacet> localVarResponse = await StatisticsBySizeAsyncWithHttpInfo(q, dateAttr);
             return localVarResponse.Data;

        }

        /// <summary>
        /// TODO **API Key Scope**: statistics / by_size
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of ApiResponse (BySizeFacet)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<BySizeFacet>> StatisticsBySizeAsyncWithHttpInfo (string q = default(string), string dateAttr = default(string))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BySizeFacet>("/statistics/by_size", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsBySize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// TODO **API Key Scope**: statistics / by_user_owner
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>ByUserOwnerFacet</returns>
        public ByUserOwnerFacet StatisticsByUserOwner (string q = default(string), string dateAttr = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByUserOwnerFacet> localVarResponse = StatisticsByUserOwnerWithHttpInfo(q, dateAttr);
             return localVarResponse.Data;
        }

        /// <summary>
        /// TODO **API Key Scope**: statistics / by_user_owner
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>ApiResponse of ByUserOwnerFacet</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ByUserOwnerFacet > StatisticsByUserOwnerWithHttpInfo (string q = default(string), string dateAttr = default(string))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ByUserOwnerFacet >("/statistics/by_user_owner", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsByUserOwner", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// TODO **API Key Scope**: statistics / by_user_owner
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of ByUserOwnerFacet</returns>
        public async System.Threading.Tasks.Task<ByUserOwnerFacet> StatisticsByUserOwnerAsync (string q = default(string), string dateAttr = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ByUserOwnerFacet> localVarResponse = await StatisticsByUserOwnerAsyncWithHttpInfo(q, dateAttr);
             return localVarResponse.Data;

        }

        /// <summary>
        /// TODO **API Key Scope**: statistics / by_user_owner
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Solr query (optional)</param>
        /// <param name="dateAttr">Type of date to facet on (optional)</param>
        /// <returns>Task of ApiResponse (ByUserOwnerFacet)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ByUserOwnerFacet>> StatisticsByUserOwnerAsyncWithHttpInfo (string q = default(string), string dateAttr = default(string))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (dateAttr != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "date_attr", dateAttr));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ByUserOwnerFacet>("/statistics/by_user_owner", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsByUserOwner", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
