/* 
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Io.Nodeum.Sdk.Client;
using Io.Nodeum.Sdk.Model;

namespace Io.Nodeum.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INasSharesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>NasShare</returns>
        NasShare CreateNasShareByNas (string nasId, NasShare nasShareBody);

        /// <summary>
        /// Creates a new NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>ApiResponse of NasShare</returns>
        ApiResponse<NasShare> CreateNasShareByNasWithHttpInfo (string nasId, NasShare nasShareBody);
        /// <summary>
        /// Destroys a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns></returns>
        void DestroyNasShare (string nasShareId);

        /// <summary>
        /// Destroys a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyNasShareWithHttpInfo (string nasShareId);
        /// <summary>
        /// Destroys a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns></returns>
        void DestroyNasShareByNas (string nasId, string nasShareId);

        /// <summary>
        /// Destroys a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyNasShareByNasWithHttpInfo (string nasId, string nasShareId);
        /// <summary>
        /// Destroys a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns></returns>
        void DestroyNasShareByPool (string poolId, string nasShareId);

        /// <summary>
        /// Destroys a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyNasShareByPoolWithHttpInfo (string poolId, string nasShareId);
        /// <summary>
        /// Lists all NAS shares.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="path">Filter on path (optional)</param>
        /// <param name="options">Filter on options (optional)</param>
        /// <param name="username">Filter on username (optional)</param>
        /// <param name="nasId">Filter on NAS id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <returns>NasShareCollection</returns>
        NasShareCollection IndexNasShares (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string path = default(string), string options = default(string), string username = default(string), string nasId = default(string), string poolId = default(string));

        /// <summary>
        /// Lists all NAS shares.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="path">Filter on path (optional)</param>
        /// <param name="options">Filter on options (optional)</param>
        /// <param name="username">Filter on username (optional)</param>
        /// <param name="nasId">Filter on NAS id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <returns>ApiResponse of NasShareCollection</returns>
        ApiResponse<NasShareCollection> IndexNasSharesWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string path = default(string), string options = default(string), string username = default(string), string nasId = default(string), string poolId = default(string));
        /// <summary>
        /// Lists all NAS shares.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="path">Filter on path (optional)</param>
        /// <param name="options">Filter on options (optional)</param>
        /// <param name="username">Filter on username (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <returns>NasShareCollection</returns>
        NasShareCollection IndexNasSharesByNas (string nasId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string path = default(string), string options = default(string), string username = default(string), string poolId = default(string));

        /// <summary>
        /// Lists all NAS shares.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="path">Filter on path (optional)</param>
        /// <param name="options">Filter on options (optional)</param>
        /// <param name="username">Filter on username (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <returns>ApiResponse of NasShareCollection</returns>
        ApiResponse<NasShareCollection> IndexNasSharesByNasWithHttpInfo (string nasId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string path = default(string), string options = default(string), string username = default(string), string poolId = default(string));
        /// <summary>
        /// Lists all NAS shares from pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="path">Filter on path (optional)</param>
        /// <param name="options">Filter on options (optional)</param>
        /// <param name="username">Filter on username (optional)</param>
        /// <param name="nasId">Filter on NAS id (optional)</param>
        /// <returns>NasShareCollection</returns>
        NasShareCollection IndexNasSharesByPool (string poolId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string path = default(string), string options = default(string), string username = default(string), string nasId = default(string));

        /// <summary>
        /// Lists all NAS shares from pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="path">Filter on path (optional)</param>
        /// <param name="options">Filter on options (optional)</param>
        /// <param name="username">Filter on username (optional)</param>
        /// <param name="nasId">Filter on NAS id (optional)</param>
        /// <returns>ApiResponse of NasShareCollection</returns>
        ApiResponse<NasShareCollection> IndexNasSharesByPoolWithHttpInfo (string poolId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string path = default(string), string options = default(string), string username = default(string), string nasId = default(string));
        /// <summary>
        /// Get mount status of NAS Share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>MountStatus</returns>
        MountStatus MountStatusNasShare (string nasShareId);

        /// <summary>
        /// Get mount status of NAS Share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>ApiResponse of MountStatus</returns>
        ApiResponse<MountStatus> MountStatusNasShareWithHttpInfo (string nasShareId);
        /// <summary>
        /// Get mount status of NAS Share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>MountStatus</returns>
        MountStatus MountStatusNasShareByNas (string nasId, string nasShareId);

        /// <summary>
        /// Get mount status of NAS Share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>ApiResponse of MountStatus</returns>
        ApiResponse<MountStatus> MountStatusNasShareByNasWithHttpInfo (string nasId, string nasShareId);
        /// <summary>
        /// Get mount status of NAS Share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>MountStatus</returns>
        MountStatus MountStatusNasShareByPool (string poolId, string nasShareId);

        /// <summary>
        /// Get mount status of NAS Share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>ApiResponse of MountStatus</returns>
        ApiResponse<MountStatus> MountStatusNasShareByPoolWithHttpInfo (string poolId, string nasShareId);
        /// <summary>
        /// Displays a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>NasShare</returns>
        NasShare ShowNasShare (string nasShareId);

        /// <summary>
        /// Displays a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>ApiResponse of NasShare</returns>
        ApiResponse<NasShare> ShowNasShareWithHttpInfo (string nasShareId);
        /// <summary>
        /// Displays a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>NasShare</returns>
        NasShare ShowNasShareByNas (string nasId, string nasShareId);

        /// <summary>
        /// Displays a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>ApiResponse of NasShare</returns>
        ApiResponse<NasShare> ShowNasShareByNasWithHttpInfo (string nasId, string nasShareId);
        /// <summary>
        /// Displays a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>NasShare</returns>
        NasShare ShowNasShareByPool (string poolId, string nasShareId);

        /// <summary>
        /// Displays a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>ApiResponse of NasShare</returns>
        ApiResponse<NasShare> ShowNasShareByPoolWithHttpInfo (string poolId, string nasShareId);
        /// <summary>
        /// Test an unsaved NAS Share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / test
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>ActiveJobStatus</returns>
        ActiveJobStatus TestNasShare (string nasId, NasShare nasShareBody);

        /// <summary>
        /// Test an unsaved NAS Share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / test
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>ApiResponse of ActiveJobStatus</returns>
        ApiResponse<ActiveJobStatus> TestNasShareWithHttpInfo (string nasId, NasShare nasShareBody);
        /// <summary>
        /// Check result of a NAS Share test job.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / test
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ActiveJobStatus</returns>
        ActiveJobStatus TestResultNasShare (string nasId, string jobId);

        /// <summary>
        /// Check result of a NAS Share test job.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / test
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ApiResponse of ActiveJobStatus</returns>
        ApiResponse<ActiveJobStatus> TestResultNasShareWithHttpInfo (string nasId, string jobId);
        /// <summary>
        /// Updates a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>NasShare</returns>
        NasShare UpdateNasShare (string nasShareId, NasShare nasShareBody);

        /// <summary>
        /// Updates a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>ApiResponse of NasShare</returns>
        ApiResponse<NasShare> UpdateNasShareWithHttpInfo (string nasShareId, NasShare nasShareBody);
        /// <summary>
        /// Updates a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>NasShare</returns>
        NasShare UpdateNasShareByNas (string nasId, string nasShareId, NasShare nasShareBody);

        /// <summary>
        /// Updates a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>ApiResponse of NasShare</returns>
        ApiResponse<NasShare> UpdateNasShareByNasWithHttpInfo (string nasId, string nasShareId, NasShare nasShareBody);
        /// <summary>
        /// Updates a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>NasShare</returns>
        NasShare UpdateNasShareByPool (string poolId, string nasShareId, NasShare nasShareBody);

        /// <summary>
        /// Updates a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>ApiResponse of NasShare</returns>
        ApiResponse<NasShare> UpdateNasShareByPoolWithHttpInfo (string poolId, string nasShareId, NasShare nasShareBody);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INasSharesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>Task of NasShare</returns>
        System.Threading.Tasks.Task<NasShare> CreateNasShareByNasAsync (string nasId, NasShare nasShareBody);

        /// <summary>
        /// Creates a new NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>Task of ApiResponse (NasShare)</returns>
        System.Threading.Tasks.Task<ApiResponse<NasShare>> CreateNasShareByNasAsyncWithHttpInfo (string nasId, NasShare nasShareBody);
        /// <summary>
        /// Destroys a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyNasShareAsync (string nasShareId);

        /// <summary>
        /// Destroys a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyNasShareAsyncWithHttpInfo (string nasShareId);
        /// <summary>
        /// Destroys a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyNasShareByNasAsync (string nasId, string nasShareId);

        /// <summary>
        /// Destroys a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyNasShareByNasAsyncWithHttpInfo (string nasId, string nasShareId);
        /// <summary>
        /// Destroys a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyNasShareByPoolAsync (string poolId, string nasShareId);

        /// <summary>
        /// Destroys a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyNasShareByPoolAsyncWithHttpInfo (string poolId, string nasShareId);
        /// <summary>
        /// Lists all NAS shares.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="path">Filter on path (optional)</param>
        /// <param name="options">Filter on options (optional)</param>
        /// <param name="username">Filter on username (optional)</param>
        /// <param name="nasId">Filter on NAS id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <returns>Task of NasShareCollection</returns>
        System.Threading.Tasks.Task<NasShareCollection> IndexNasSharesAsync (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string path = default(string), string options = default(string), string username = default(string), string nasId = default(string), string poolId = default(string));

        /// <summary>
        /// Lists all NAS shares.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="path">Filter on path (optional)</param>
        /// <param name="options">Filter on options (optional)</param>
        /// <param name="username">Filter on username (optional)</param>
        /// <param name="nasId">Filter on NAS id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <returns>Task of ApiResponse (NasShareCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NasShareCollection>> IndexNasSharesAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string path = default(string), string options = default(string), string username = default(string), string nasId = default(string), string poolId = default(string));
        /// <summary>
        /// Lists all NAS shares.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="path">Filter on path (optional)</param>
        /// <param name="options">Filter on options (optional)</param>
        /// <param name="username">Filter on username (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <returns>Task of NasShareCollection</returns>
        System.Threading.Tasks.Task<NasShareCollection> IndexNasSharesByNasAsync (string nasId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string path = default(string), string options = default(string), string username = default(string), string poolId = default(string));

        /// <summary>
        /// Lists all NAS shares.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="path">Filter on path (optional)</param>
        /// <param name="options">Filter on options (optional)</param>
        /// <param name="username">Filter on username (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <returns>Task of ApiResponse (NasShareCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NasShareCollection>> IndexNasSharesByNasAsyncWithHttpInfo (string nasId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string path = default(string), string options = default(string), string username = default(string), string poolId = default(string));
        /// <summary>
        /// Lists all NAS shares from pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="path">Filter on path (optional)</param>
        /// <param name="options">Filter on options (optional)</param>
        /// <param name="username">Filter on username (optional)</param>
        /// <param name="nasId">Filter on NAS id (optional)</param>
        /// <returns>Task of NasShareCollection</returns>
        System.Threading.Tasks.Task<NasShareCollection> IndexNasSharesByPoolAsync (string poolId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string path = default(string), string options = default(string), string username = default(string), string nasId = default(string));

        /// <summary>
        /// Lists all NAS shares from pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="path">Filter on path (optional)</param>
        /// <param name="options">Filter on options (optional)</param>
        /// <param name="username">Filter on username (optional)</param>
        /// <param name="nasId">Filter on NAS id (optional)</param>
        /// <returns>Task of ApiResponse (NasShareCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NasShareCollection>> IndexNasSharesByPoolAsyncWithHttpInfo (string poolId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string path = default(string), string options = default(string), string username = default(string), string nasId = default(string));
        /// <summary>
        /// Get mount status of NAS Share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of MountStatus</returns>
        System.Threading.Tasks.Task<MountStatus> MountStatusNasShareAsync (string nasShareId);

        /// <summary>
        /// Get mount status of NAS Share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of ApiResponse (MountStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<MountStatus>> MountStatusNasShareAsyncWithHttpInfo (string nasShareId);
        /// <summary>
        /// Get mount status of NAS Share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of MountStatus</returns>
        System.Threading.Tasks.Task<MountStatus> MountStatusNasShareByNasAsync (string nasId, string nasShareId);

        /// <summary>
        /// Get mount status of NAS Share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of ApiResponse (MountStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<MountStatus>> MountStatusNasShareByNasAsyncWithHttpInfo (string nasId, string nasShareId);
        /// <summary>
        /// Get mount status of NAS Share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of MountStatus</returns>
        System.Threading.Tasks.Task<MountStatus> MountStatusNasShareByPoolAsync (string poolId, string nasShareId);

        /// <summary>
        /// Get mount status of NAS Share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of ApiResponse (MountStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<MountStatus>> MountStatusNasShareByPoolAsyncWithHttpInfo (string poolId, string nasShareId);
        /// <summary>
        /// Displays a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of NasShare</returns>
        System.Threading.Tasks.Task<NasShare> ShowNasShareAsync (string nasShareId);

        /// <summary>
        /// Displays a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of ApiResponse (NasShare)</returns>
        System.Threading.Tasks.Task<ApiResponse<NasShare>> ShowNasShareAsyncWithHttpInfo (string nasShareId);
        /// <summary>
        /// Displays a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of NasShare</returns>
        System.Threading.Tasks.Task<NasShare> ShowNasShareByNasAsync (string nasId, string nasShareId);

        /// <summary>
        /// Displays a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of ApiResponse (NasShare)</returns>
        System.Threading.Tasks.Task<ApiResponse<NasShare>> ShowNasShareByNasAsyncWithHttpInfo (string nasId, string nasShareId);
        /// <summary>
        /// Displays a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of NasShare</returns>
        System.Threading.Tasks.Task<NasShare> ShowNasShareByPoolAsync (string poolId, string nasShareId);

        /// <summary>
        /// Displays a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of ApiResponse (NasShare)</returns>
        System.Threading.Tasks.Task<ApiResponse<NasShare>> ShowNasShareByPoolAsyncWithHttpInfo (string poolId, string nasShareId);
        /// <summary>
        /// Test an unsaved NAS Share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / test
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>Task of ActiveJobStatus</returns>
        System.Threading.Tasks.Task<ActiveJobStatus> TestNasShareAsync (string nasId, NasShare nasShareBody);

        /// <summary>
        /// Test an unsaved NAS Share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / test
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>Task of ApiResponse (ActiveJobStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActiveJobStatus>> TestNasShareAsyncWithHttpInfo (string nasId, NasShare nasShareBody);
        /// <summary>
        /// Check result of a NAS Share test job.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / test
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ActiveJobStatus</returns>
        System.Threading.Tasks.Task<ActiveJobStatus> TestResultNasShareAsync (string nasId, string jobId);

        /// <summary>
        /// Check result of a NAS Share test job.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / test
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ApiResponse (ActiveJobStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActiveJobStatus>> TestResultNasShareAsyncWithHttpInfo (string nasId, string jobId);
        /// <summary>
        /// Updates a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>Task of NasShare</returns>
        System.Threading.Tasks.Task<NasShare> UpdateNasShareAsync (string nasShareId, NasShare nasShareBody);

        /// <summary>
        /// Updates a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>Task of ApiResponse (NasShare)</returns>
        System.Threading.Tasks.Task<ApiResponse<NasShare>> UpdateNasShareAsyncWithHttpInfo (string nasShareId, NasShare nasShareBody);
        /// <summary>
        /// Updates a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>Task of NasShare</returns>
        System.Threading.Tasks.Task<NasShare> UpdateNasShareByNasAsync (string nasId, string nasShareId, NasShare nasShareBody);

        /// <summary>
        /// Updates a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>Task of ApiResponse (NasShare)</returns>
        System.Threading.Tasks.Task<ApiResponse<NasShare>> UpdateNasShareByNasAsyncWithHttpInfo (string nasId, string nasShareId, NasShare nasShareBody);
        /// <summary>
        /// Updates a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>Task of NasShare</returns>
        System.Threading.Tasks.Task<NasShare> UpdateNasShareByPoolAsync (string poolId, string nasShareId, NasShare nasShareBody);

        /// <summary>
        /// Updates a specific NAS share.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas_shares / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>Task of ApiResponse (NasShare)</returns>
        System.Threading.Tasks.Task<ApiResponse<NasShare>> UpdateNasShareByPoolAsyncWithHttpInfo (string poolId, string nasShareId, NasShare nasShareBody);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INasSharesApi : INasSharesApiSync, INasSharesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NasSharesApi : INasSharesApi
    {
        private Io.Nodeum.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NasSharesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NasSharesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NasSharesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NasSharesApi(String basePath)
        {
            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                new Io.Nodeum.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NasSharesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NasSharesApi(Io.Nodeum.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NasSharesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NasSharesApi(Io.Nodeum.Sdk.Client.ISynchronousClient client,Io.Nodeum.Sdk.Client.IAsynchronousClient asyncClient, Io.Nodeum.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Io.Nodeum.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a new NAS share. **API Key Scope**: nas_shares / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>NasShare</returns>
        public NasShare CreateNasShareByNas (string nasId, NasShare nasShareBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NasShare> localVarResponse = CreateNasShareByNasWithHttpInfo(nasId, nasShareBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new NAS share. **API Key Scope**: nas_shares / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>ApiResponse of NasShare</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NasShare > CreateNasShareByNasWithHttpInfo (string nasId, NasShare nasShareBody)
        {
            // verify the required parameter 'nasId' is set
            if (nasId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasId' when calling NasSharesApi->CreateNasShareByNas");

            // verify the required parameter 'nasShareBody' is set
            if (nasShareBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareBody' when calling NasSharesApi->CreateNasShareByNas");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (nasId != null)
                localVarRequestOptions.PathParameters.Add("nas_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasId)); // path parameter
            localVarRequestOptions.Data = nasShareBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< NasShare >("/nas/{nas_id}/nas_shares", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNasShareByNas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new NAS share. **API Key Scope**: nas_shares / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>Task of NasShare</returns>
        public async System.Threading.Tasks.Task<NasShare> CreateNasShareByNasAsync (string nasId, NasShare nasShareBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NasShare> localVarResponse = await CreateNasShareByNasAsyncWithHttpInfo(nasId, nasShareBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new NAS share. **API Key Scope**: nas_shares / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>Task of ApiResponse (NasShare)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NasShare>> CreateNasShareByNasAsyncWithHttpInfo (string nasId, NasShare nasShareBody)
        {
            // verify the required parameter 'nasId' is set
            if (nasId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasId' when calling NasSharesApi->CreateNasShareByNas");

            // verify the required parameter 'nasShareBody' is set
            if (nasShareBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareBody' when calling NasSharesApi->CreateNasShareByNas");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (nasId != null)
                localVarRequestOptions.PathParameters.Add("nas_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasId)); // path parameter
            localVarRequestOptions.Data = nasShareBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<NasShare>("/nas/{nas_id}/nas_shares", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNasShareByNas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific NAS share. **API Key Scope**: nas_shares / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns></returns>
        public void DestroyNasShare (string nasShareId)
        {
             DestroyNasShareWithHttpInfo(nasShareId);
        }

        /// <summary>
        /// Destroys a specific NAS share. **API Key Scope**: nas_shares / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse<Object> DestroyNasShareWithHttpInfo (string nasShareId)
        {
            // verify the required parameter 'nasShareId' is set
            if (nasShareId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareId' when calling NasSharesApi->DestroyNasShare");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (nasShareId != null)
                localVarRequestOptions.PathParameters.Add("nas_share_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasShareId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/nas_shares/{nas_share_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyNasShare", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific NAS share. **API Key Scope**: nas_shares / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyNasShareAsync (string nasShareId)
        {
             await DestroyNasShareAsyncWithHttpInfo(nasShareId);

        }

        /// <summary>
        /// Destroys a specific NAS share. **API Key Scope**: nas_shares / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Object>> DestroyNasShareAsyncWithHttpInfo (string nasShareId)
        {
            // verify the required parameter 'nasShareId' is set
            if (nasShareId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareId' when calling NasSharesApi->DestroyNasShare");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (nasShareId != null)
                localVarRequestOptions.PathParameters.Add("nas_share_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasShareId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/nas_shares/{nas_share_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyNasShare", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific NAS share. **API Key Scope**: nas_shares / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns></returns>
        public void DestroyNasShareByNas (string nasId, string nasShareId)
        {
             DestroyNasShareByNasWithHttpInfo(nasId, nasShareId);
        }

        /// <summary>
        /// Destroys a specific NAS share. **API Key Scope**: nas_shares / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse<Object> DestroyNasShareByNasWithHttpInfo (string nasId, string nasShareId)
        {
            // verify the required parameter 'nasId' is set
            if (nasId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasId' when calling NasSharesApi->DestroyNasShareByNas");

            // verify the required parameter 'nasShareId' is set
            if (nasShareId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareId' when calling NasSharesApi->DestroyNasShareByNas");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (nasId != null)
                localVarRequestOptions.PathParameters.Add("nas_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasId)); // path parameter
            if (nasShareId != null)
                localVarRequestOptions.PathParameters.Add("nas_share_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasShareId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/nas/{nas_id}/nas_shares/{nas_share_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyNasShareByNas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific NAS share. **API Key Scope**: nas_shares / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyNasShareByNasAsync (string nasId, string nasShareId)
        {
             await DestroyNasShareByNasAsyncWithHttpInfo(nasId, nasShareId);

        }

        /// <summary>
        /// Destroys a specific NAS share. **API Key Scope**: nas_shares / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Object>> DestroyNasShareByNasAsyncWithHttpInfo (string nasId, string nasShareId)
        {
            // verify the required parameter 'nasId' is set
            if (nasId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasId' when calling NasSharesApi->DestroyNasShareByNas");

            // verify the required parameter 'nasShareId' is set
            if (nasShareId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareId' when calling NasSharesApi->DestroyNasShareByNas");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (nasId != null)
                localVarRequestOptions.PathParameters.Add("nas_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasId)); // path parameter
            if (nasShareId != null)
                localVarRequestOptions.PathParameters.Add("nas_share_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasShareId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/nas/{nas_id}/nas_shares/{nas_share_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyNasShareByNas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific NAS share. **API Key Scope**: nas_shares / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns></returns>
        public void DestroyNasShareByPool (string poolId, string nasShareId)
        {
             DestroyNasShareByPoolWithHttpInfo(poolId, nasShareId);
        }

        /// <summary>
        /// Destroys a specific NAS share. **API Key Scope**: nas_shares / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse<Object> DestroyNasShareByPoolWithHttpInfo (string poolId, string nasShareId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling NasSharesApi->DestroyNasShareByPool");

            // verify the required parameter 'nasShareId' is set
            if (nasShareId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareId' when calling NasSharesApi->DestroyNasShareByPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (nasShareId != null)
                localVarRequestOptions.PathParameters.Add("nas_share_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasShareId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/pools/{pool_id}/nas_shares/{nas_share_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyNasShareByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific NAS share. **API Key Scope**: nas_shares / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyNasShareByPoolAsync (string poolId, string nasShareId)
        {
             await DestroyNasShareByPoolAsyncWithHttpInfo(poolId, nasShareId);

        }

        /// <summary>
        /// Destroys a specific NAS share. **API Key Scope**: nas_shares / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Object>> DestroyNasShareByPoolAsyncWithHttpInfo (string poolId, string nasShareId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling NasSharesApi->DestroyNasShareByPool");

            // verify the required parameter 'nasShareId' is set
            if (nasShareId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareId' when calling NasSharesApi->DestroyNasShareByPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (nasShareId != null)
                localVarRequestOptions.PathParameters.Add("nas_share_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasShareId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/pools/{pool_id}/nas_shares/{nas_share_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyNasShareByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all NAS shares. **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="path">Filter on path (optional)</param>
        /// <param name="options">Filter on options (optional)</param>
        /// <param name="username">Filter on username (optional)</param>
        /// <param name="nasId">Filter on NAS id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <returns>NasShareCollection</returns>
        public NasShareCollection IndexNasShares (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string path = default(string), string options = default(string), string username = default(string), string nasId = default(string), string poolId = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NasShareCollection> localVarResponse = IndexNasSharesWithHttpInfo(limit, offset, sortBy, id, name, path, options, username, nasId, poolId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all NAS shares. **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="path">Filter on path (optional)</param>
        /// <param name="options">Filter on options (optional)</param>
        /// <param name="username">Filter on username (optional)</param>
        /// <param name="nasId">Filter on NAS id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <returns>ApiResponse of NasShareCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NasShareCollection > IndexNasSharesWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string path = default(string), string options = default(string), string username = default(string), string nasId = default(string), string poolId = default(string))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (options != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "options", options));
            }
            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            }
            if (nasId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "nas_id", nasId));
            }
            if (poolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pool_id", poolId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< NasShareCollection >("/nas_shares", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexNasShares", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all NAS shares. **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="path">Filter on path (optional)</param>
        /// <param name="options">Filter on options (optional)</param>
        /// <param name="username">Filter on username (optional)</param>
        /// <param name="nasId">Filter on NAS id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <returns>Task of NasShareCollection</returns>
        public async System.Threading.Tasks.Task<NasShareCollection> IndexNasSharesAsync (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string path = default(string), string options = default(string), string username = default(string), string nasId = default(string), string poolId = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NasShareCollection> localVarResponse = await IndexNasSharesAsyncWithHttpInfo(limit, offset, sortBy, id, name, path, options, username, nasId, poolId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all NAS shares. **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="path">Filter on path (optional)</param>
        /// <param name="options">Filter on options (optional)</param>
        /// <param name="username">Filter on username (optional)</param>
        /// <param name="nasId">Filter on NAS id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <returns>Task of ApiResponse (NasShareCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NasShareCollection>> IndexNasSharesAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string path = default(string), string options = default(string), string username = default(string), string nasId = default(string), string poolId = default(string))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (options != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "options", options));
            }
            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            }
            if (nasId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "nas_id", nasId));
            }
            if (poolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pool_id", poolId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NasShareCollection>("/nas_shares", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexNasShares", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all NAS shares. **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="path">Filter on path (optional)</param>
        /// <param name="options">Filter on options (optional)</param>
        /// <param name="username">Filter on username (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <returns>NasShareCollection</returns>
        public NasShareCollection IndexNasSharesByNas (string nasId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string path = default(string), string options = default(string), string username = default(string), string poolId = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NasShareCollection> localVarResponse = IndexNasSharesByNasWithHttpInfo(nasId, limit, offset, sortBy, id, name, path, options, username, poolId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all NAS shares. **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="path">Filter on path (optional)</param>
        /// <param name="options">Filter on options (optional)</param>
        /// <param name="username">Filter on username (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <returns>ApiResponse of NasShareCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NasShareCollection > IndexNasSharesByNasWithHttpInfo (string nasId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string path = default(string), string options = default(string), string username = default(string), string poolId = default(string))
        {
            // verify the required parameter 'nasId' is set
            if (nasId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasId' when calling NasSharesApi->IndexNasSharesByNas");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (nasId != null)
                localVarRequestOptions.PathParameters.Add("nas_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (options != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "options", options));
            }
            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            }
            if (poolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pool_id", poolId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< NasShareCollection >("/nas/{nas_id}/nas_shares", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexNasSharesByNas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all NAS shares. **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="path">Filter on path (optional)</param>
        /// <param name="options">Filter on options (optional)</param>
        /// <param name="username">Filter on username (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <returns>Task of NasShareCollection</returns>
        public async System.Threading.Tasks.Task<NasShareCollection> IndexNasSharesByNasAsync (string nasId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string path = default(string), string options = default(string), string username = default(string), string poolId = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NasShareCollection> localVarResponse = await IndexNasSharesByNasAsyncWithHttpInfo(nasId, limit, offset, sortBy, id, name, path, options, username, poolId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all NAS shares. **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="path">Filter on path (optional)</param>
        /// <param name="options">Filter on options (optional)</param>
        /// <param name="username">Filter on username (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <returns>Task of ApiResponse (NasShareCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NasShareCollection>> IndexNasSharesByNasAsyncWithHttpInfo (string nasId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string path = default(string), string options = default(string), string username = default(string), string poolId = default(string))
        {
            // verify the required parameter 'nasId' is set
            if (nasId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasId' when calling NasSharesApi->IndexNasSharesByNas");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (nasId != null)
                localVarRequestOptions.PathParameters.Add("nas_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (options != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "options", options));
            }
            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            }
            if (poolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pool_id", poolId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NasShareCollection>("/nas/{nas_id}/nas_shares", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexNasSharesByNas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all NAS shares from pool. **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="path">Filter on path (optional)</param>
        /// <param name="options">Filter on options (optional)</param>
        /// <param name="username">Filter on username (optional)</param>
        /// <param name="nasId">Filter on NAS id (optional)</param>
        /// <returns>NasShareCollection</returns>
        public NasShareCollection IndexNasSharesByPool (string poolId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string path = default(string), string options = default(string), string username = default(string), string nasId = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NasShareCollection> localVarResponse = IndexNasSharesByPoolWithHttpInfo(poolId, limit, offset, sortBy, id, name, path, options, username, nasId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all NAS shares from pool. **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="path">Filter on path (optional)</param>
        /// <param name="options">Filter on options (optional)</param>
        /// <param name="username">Filter on username (optional)</param>
        /// <param name="nasId">Filter on NAS id (optional)</param>
        /// <returns>ApiResponse of NasShareCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NasShareCollection > IndexNasSharesByPoolWithHttpInfo (string poolId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string path = default(string), string options = default(string), string username = default(string), string nasId = default(string))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling NasSharesApi->IndexNasSharesByPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (options != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "options", options));
            }
            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            }
            if (nasId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "nas_id", nasId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< NasShareCollection >("/pools/{pool_id}/nas_shares", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexNasSharesByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all NAS shares from pool. **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="path">Filter on path (optional)</param>
        /// <param name="options">Filter on options (optional)</param>
        /// <param name="username">Filter on username (optional)</param>
        /// <param name="nasId">Filter on NAS id (optional)</param>
        /// <returns>Task of NasShareCollection</returns>
        public async System.Threading.Tasks.Task<NasShareCollection> IndexNasSharesByPoolAsync (string poolId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string path = default(string), string options = default(string), string username = default(string), string nasId = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NasShareCollection> localVarResponse = await IndexNasSharesByPoolAsyncWithHttpInfo(poolId, limit, offset, sortBy, id, name, path, options, username, nasId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all NAS shares from pool. **API Key Scope**: nas_shares / index   Optional API Key Explicit Scope: nas_shares / get_password
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="path">Filter on path (optional)</param>
        /// <param name="options">Filter on options (optional)</param>
        /// <param name="username">Filter on username (optional)</param>
        /// <param name="nasId">Filter on NAS id (optional)</param>
        /// <returns>Task of ApiResponse (NasShareCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NasShareCollection>> IndexNasSharesByPoolAsyncWithHttpInfo (string poolId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string path = default(string), string options = default(string), string username = default(string), string nasId = default(string))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling NasSharesApi->IndexNasSharesByPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }
            if (options != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "options", options));
            }
            if (username != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "username", username));
            }
            if (nasId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "nas_id", nasId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NasShareCollection>("/pools/{pool_id}/nas_shares", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexNasSharesByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mount status of NAS Share. **API Key Scope**: nas_shares / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>MountStatus</returns>
        public MountStatus MountStatusNasShare (string nasShareId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<MountStatus> localVarResponse = MountStatusNasShareWithHttpInfo(nasShareId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get mount status of NAS Share. **API Key Scope**: nas_shares / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>ApiResponse of MountStatus</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< MountStatus > MountStatusNasShareWithHttpInfo (string nasShareId)
        {
            // verify the required parameter 'nasShareId' is set
            if (nasShareId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareId' when calling NasSharesApi->MountStatusNasShare");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (nasShareId != null)
                localVarRequestOptions.PathParameters.Add("nas_share_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasShareId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< MountStatus >("/nas_shares/{nas_share_id}/mount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MountStatusNasShare", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mount status of NAS Share. **API Key Scope**: nas_shares / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of MountStatus</returns>
        public async System.Threading.Tasks.Task<MountStatus> MountStatusNasShareAsync (string nasShareId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<MountStatus> localVarResponse = await MountStatusNasShareAsyncWithHttpInfo(nasShareId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get mount status of NAS Share. **API Key Scope**: nas_shares / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of ApiResponse (MountStatus)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<MountStatus>> MountStatusNasShareAsyncWithHttpInfo (string nasShareId)
        {
            // verify the required parameter 'nasShareId' is set
            if (nasShareId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareId' when calling NasSharesApi->MountStatusNasShare");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (nasShareId != null)
                localVarRequestOptions.PathParameters.Add("nas_share_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasShareId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MountStatus>("/nas_shares/{nas_share_id}/mount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MountStatusNasShare", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mount status of NAS Share. **API Key Scope**: nas_shares / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>MountStatus</returns>
        public MountStatus MountStatusNasShareByNas (string nasId, string nasShareId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<MountStatus> localVarResponse = MountStatusNasShareByNasWithHttpInfo(nasId, nasShareId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get mount status of NAS Share. **API Key Scope**: nas_shares / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>ApiResponse of MountStatus</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< MountStatus > MountStatusNasShareByNasWithHttpInfo (string nasId, string nasShareId)
        {
            // verify the required parameter 'nasId' is set
            if (nasId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasId' when calling NasSharesApi->MountStatusNasShareByNas");

            // verify the required parameter 'nasShareId' is set
            if (nasShareId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareId' when calling NasSharesApi->MountStatusNasShareByNas");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (nasId != null)
                localVarRequestOptions.PathParameters.Add("nas_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasId)); // path parameter
            if (nasShareId != null)
                localVarRequestOptions.PathParameters.Add("nas_share_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasShareId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< MountStatus >("/nas/{nas_id}/nas_shares/{nas_share_id}/mount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MountStatusNasShareByNas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mount status of NAS Share. **API Key Scope**: nas_shares / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of MountStatus</returns>
        public async System.Threading.Tasks.Task<MountStatus> MountStatusNasShareByNasAsync (string nasId, string nasShareId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<MountStatus> localVarResponse = await MountStatusNasShareByNasAsyncWithHttpInfo(nasId, nasShareId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get mount status of NAS Share. **API Key Scope**: nas_shares / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of ApiResponse (MountStatus)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<MountStatus>> MountStatusNasShareByNasAsyncWithHttpInfo (string nasId, string nasShareId)
        {
            // verify the required parameter 'nasId' is set
            if (nasId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasId' when calling NasSharesApi->MountStatusNasShareByNas");

            // verify the required parameter 'nasShareId' is set
            if (nasShareId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareId' when calling NasSharesApi->MountStatusNasShareByNas");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (nasId != null)
                localVarRequestOptions.PathParameters.Add("nas_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasId)); // path parameter
            if (nasShareId != null)
                localVarRequestOptions.PathParameters.Add("nas_share_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasShareId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MountStatus>("/nas/{nas_id}/nas_shares/{nas_share_id}/mount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MountStatusNasShareByNas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mount status of NAS Share. **API Key Scope**: nas_shares / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>MountStatus</returns>
        public MountStatus MountStatusNasShareByPool (string poolId, string nasShareId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<MountStatus> localVarResponse = MountStatusNasShareByPoolWithHttpInfo(poolId, nasShareId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get mount status of NAS Share. **API Key Scope**: nas_shares / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>ApiResponse of MountStatus</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< MountStatus > MountStatusNasShareByPoolWithHttpInfo (string poolId, string nasShareId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling NasSharesApi->MountStatusNasShareByPool");

            // verify the required parameter 'nasShareId' is set
            if (nasShareId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareId' when calling NasSharesApi->MountStatusNasShareByPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (nasShareId != null)
                localVarRequestOptions.PathParameters.Add("nas_share_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasShareId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< MountStatus >("/pools/{pool_id}/nas_shares/{nas_share_id}/mount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MountStatusNasShareByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mount status of NAS Share. **API Key Scope**: nas_shares / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of MountStatus</returns>
        public async System.Threading.Tasks.Task<MountStatus> MountStatusNasShareByPoolAsync (string poolId, string nasShareId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<MountStatus> localVarResponse = await MountStatusNasShareByPoolAsyncWithHttpInfo(poolId, nasShareId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get mount status of NAS Share. **API Key Scope**: nas_shares / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of ApiResponse (MountStatus)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<MountStatus>> MountStatusNasShareByPoolAsyncWithHttpInfo (string poolId, string nasShareId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling NasSharesApi->MountStatusNasShareByPool");

            // verify the required parameter 'nasShareId' is set
            if (nasShareId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareId' when calling NasSharesApi->MountStatusNasShareByPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (nasShareId != null)
                localVarRequestOptions.PathParameters.Add("nas_share_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasShareId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MountStatus>("/pools/{pool_id}/nas_shares/{nas_share_id}/mount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MountStatusNasShareByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific NAS share. **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>NasShare</returns>
        public NasShare ShowNasShare (string nasShareId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NasShare> localVarResponse = ShowNasShareWithHttpInfo(nasShareId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific NAS share. **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>ApiResponse of NasShare</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NasShare > ShowNasShareWithHttpInfo (string nasShareId)
        {
            // verify the required parameter 'nasShareId' is set
            if (nasShareId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareId' when calling NasSharesApi->ShowNasShare");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (nasShareId != null)
                localVarRequestOptions.PathParameters.Add("nas_share_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasShareId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< NasShare >("/nas_shares/{nas_share_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowNasShare", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific NAS share. **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of NasShare</returns>
        public async System.Threading.Tasks.Task<NasShare> ShowNasShareAsync (string nasShareId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NasShare> localVarResponse = await ShowNasShareAsyncWithHttpInfo(nasShareId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific NAS share. **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of ApiResponse (NasShare)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NasShare>> ShowNasShareAsyncWithHttpInfo (string nasShareId)
        {
            // verify the required parameter 'nasShareId' is set
            if (nasShareId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareId' when calling NasSharesApi->ShowNasShare");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (nasShareId != null)
                localVarRequestOptions.PathParameters.Add("nas_share_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasShareId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NasShare>("/nas_shares/{nas_share_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowNasShare", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific NAS share. **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>NasShare</returns>
        public NasShare ShowNasShareByNas (string nasId, string nasShareId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NasShare> localVarResponse = ShowNasShareByNasWithHttpInfo(nasId, nasShareId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific NAS share. **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>ApiResponse of NasShare</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NasShare > ShowNasShareByNasWithHttpInfo (string nasId, string nasShareId)
        {
            // verify the required parameter 'nasId' is set
            if (nasId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasId' when calling NasSharesApi->ShowNasShareByNas");

            // verify the required parameter 'nasShareId' is set
            if (nasShareId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareId' when calling NasSharesApi->ShowNasShareByNas");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (nasId != null)
                localVarRequestOptions.PathParameters.Add("nas_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasId)); // path parameter
            if (nasShareId != null)
                localVarRequestOptions.PathParameters.Add("nas_share_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasShareId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< NasShare >("/nas/{nas_id}/nas_shares/{nas_share_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowNasShareByNas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific NAS share. **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of NasShare</returns>
        public async System.Threading.Tasks.Task<NasShare> ShowNasShareByNasAsync (string nasId, string nasShareId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NasShare> localVarResponse = await ShowNasShareByNasAsyncWithHttpInfo(nasId, nasShareId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific NAS share. **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of ApiResponse (NasShare)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NasShare>> ShowNasShareByNasAsyncWithHttpInfo (string nasId, string nasShareId)
        {
            // verify the required parameter 'nasId' is set
            if (nasId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasId' when calling NasSharesApi->ShowNasShareByNas");

            // verify the required parameter 'nasShareId' is set
            if (nasShareId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareId' when calling NasSharesApi->ShowNasShareByNas");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (nasId != null)
                localVarRequestOptions.PathParameters.Add("nas_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasId)); // path parameter
            if (nasShareId != null)
                localVarRequestOptions.PathParameters.Add("nas_share_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasShareId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NasShare>("/nas/{nas_id}/nas_shares/{nas_share_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowNasShareByNas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific NAS share. **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>NasShare</returns>
        public NasShare ShowNasShareByPool (string poolId, string nasShareId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NasShare> localVarResponse = ShowNasShareByPoolWithHttpInfo(poolId, nasShareId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific NAS share. **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>ApiResponse of NasShare</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NasShare > ShowNasShareByPoolWithHttpInfo (string poolId, string nasShareId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling NasSharesApi->ShowNasShareByPool");

            // verify the required parameter 'nasShareId' is set
            if (nasShareId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareId' when calling NasSharesApi->ShowNasShareByPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (nasShareId != null)
                localVarRequestOptions.PathParameters.Add("nas_share_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasShareId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< NasShare >("/pools/{pool_id}/nas_shares/{nas_share_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowNasShareByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific NAS share. **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of NasShare</returns>
        public async System.Threading.Tasks.Task<NasShare> ShowNasShareByPoolAsync (string poolId, string nasShareId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NasShare> localVarResponse = await ShowNasShareByPoolAsyncWithHttpInfo(poolId, nasShareId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific NAS share. **API Key Scope**: nas_shares / show   Optional API Key Explicit Scope: nas_shares / get_password
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <returns>Task of ApiResponse (NasShare)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NasShare>> ShowNasShareByPoolAsyncWithHttpInfo (string poolId, string nasShareId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling NasSharesApi->ShowNasShareByPool");

            // verify the required parameter 'nasShareId' is set
            if (nasShareId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareId' when calling NasSharesApi->ShowNasShareByPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (nasShareId != null)
                localVarRequestOptions.PathParameters.Add("nas_share_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasShareId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NasShare>("/pools/{pool_id}/nas_shares/{nas_share_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowNasShareByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test an unsaved NAS Share. **API Key Scope**: nas_shares / test
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>ActiveJobStatus</returns>
        public ActiveJobStatus TestNasShare (string nasId, NasShare nasShareBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus> localVarResponse = TestNasShareWithHttpInfo(nasId, nasShareBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Test an unsaved NAS Share. **API Key Scope**: nas_shares / test
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>ApiResponse of ActiveJobStatus</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ActiveJobStatus > TestNasShareWithHttpInfo (string nasId, NasShare nasShareBody)
        {
            // verify the required parameter 'nasId' is set
            if (nasId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasId' when calling NasSharesApi->TestNasShare");

            // verify the required parameter 'nasShareBody' is set
            if (nasShareBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareBody' when calling NasSharesApi->TestNasShare");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (nasId != null)
                localVarRequestOptions.PathParameters.Add("nas_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasId)); // path parameter
            localVarRequestOptions.Data = nasShareBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< ActiveJobStatus >("/nas/{nas_id}/nas_shares/-/test", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestNasShare", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test an unsaved NAS Share. **API Key Scope**: nas_shares / test
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>Task of ActiveJobStatus</returns>
        public async System.Threading.Tasks.Task<ActiveJobStatus> TestNasShareAsync (string nasId, NasShare nasShareBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus> localVarResponse = await TestNasShareAsyncWithHttpInfo(nasId, nasShareBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Test an unsaved NAS Share. **API Key Scope**: nas_shares / test
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>Task of ApiResponse (ActiveJobStatus)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus>> TestNasShareAsyncWithHttpInfo (string nasId, NasShare nasShareBody)
        {
            // verify the required parameter 'nasId' is set
            if (nasId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasId' when calling NasSharesApi->TestNasShare");

            // verify the required parameter 'nasShareBody' is set
            if (nasShareBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareBody' when calling NasSharesApi->TestNasShare");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (nasId != null)
                localVarRequestOptions.PathParameters.Add("nas_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasId)); // path parameter
            localVarRequestOptions.Data = nasShareBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ActiveJobStatus>("/nas/{nas_id}/nas_shares/-/test", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestNasShare", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check result of a NAS Share test job. **API Key Scope**: nas_shares / test
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ActiveJobStatus</returns>
        public ActiveJobStatus TestResultNasShare (string nasId, string jobId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus> localVarResponse = TestResultNasShareWithHttpInfo(nasId, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check result of a NAS Share test job. **API Key Scope**: nas_shares / test
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ApiResponse of ActiveJobStatus</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ActiveJobStatus > TestResultNasShareWithHttpInfo (string nasId, string jobId)
        {
            // verify the required parameter 'nasId' is set
            if (nasId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasId' when calling NasSharesApi->TestResultNasShare");

            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'jobId' when calling NasSharesApi->TestResultNasShare");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (nasId != null)
                localVarRequestOptions.PathParameters.Add("nas_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasId)); // path parameter
            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ActiveJobStatus >("/nas/{nas_id}/nas_shares/-/test", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestResultNasShare", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check result of a NAS Share test job. **API Key Scope**: nas_shares / test
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ActiveJobStatus</returns>
        public async System.Threading.Tasks.Task<ActiveJobStatus> TestResultNasShareAsync (string nasId, string jobId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus> localVarResponse = await TestResultNasShareAsyncWithHttpInfo(nasId, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check result of a NAS Share test job. **API Key Scope**: nas_shares / test
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ApiResponse (ActiveJobStatus)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus>> TestResultNasShareAsyncWithHttpInfo (string nasId, string jobId)
        {
            // verify the required parameter 'nasId' is set
            if (nasId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasId' when calling NasSharesApi->TestResultNasShare");

            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'jobId' when calling NasSharesApi->TestResultNasShare");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (nasId != null)
                localVarRequestOptions.PathParameters.Add("nas_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasId)); // path parameter
            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ActiveJobStatus>("/nas/{nas_id}/nas_shares/-/test", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestResultNasShare", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific NAS share. **API Key Scope**: nas_shares / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>NasShare</returns>
        public NasShare UpdateNasShare (string nasShareId, NasShare nasShareBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NasShare> localVarResponse = UpdateNasShareWithHttpInfo(nasShareId, nasShareBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific NAS share. **API Key Scope**: nas_shares / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>ApiResponse of NasShare</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NasShare > UpdateNasShareWithHttpInfo (string nasShareId, NasShare nasShareBody)
        {
            // verify the required parameter 'nasShareId' is set
            if (nasShareId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareId' when calling NasSharesApi->UpdateNasShare");

            // verify the required parameter 'nasShareBody' is set
            if (nasShareBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareBody' when calling NasSharesApi->UpdateNasShare");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (nasShareId != null)
                localVarRequestOptions.PathParameters.Add("nas_share_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasShareId)); // path parameter
            localVarRequestOptions.Data = nasShareBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< NasShare >("/nas_shares/{nas_share_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateNasShare", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific NAS share. **API Key Scope**: nas_shares / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>Task of NasShare</returns>
        public async System.Threading.Tasks.Task<NasShare> UpdateNasShareAsync (string nasShareId, NasShare nasShareBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NasShare> localVarResponse = await UpdateNasShareAsyncWithHttpInfo(nasShareId, nasShareBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a specific NAS share. **API Key Scope**: nas_shares / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>Task of ApiResponse (NasShare)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NasShare>> UpdateNasShareAsyncWithHttpInfo (string nasShareId, NasShare nasShareBody)
        {
            // verify the required parameter 'nasShareId' is set
            if (nasShareId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareId' when calling NasSharesApi->UpdateNasShare");

            // verify the required parameter 'nasShareBody' is set
            if (nasShareBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareBody' when calling NasSharesApi->UpdateNasShare");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (nasShareId != null)
                localVarRequestOptions.PathParameters.Add("nas_share_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasShareId)); // path parameter
            localVarRequestOptions.Data = nasShareBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<NasShare>("/nas_shares/{nas_share_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateNasShare", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific NAS share. **API Key Scope**: nas_shares / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>NasShare</returns>
        public NasShare UpdateNasShareByNas (string nasId, string nasShareId, NasShare nasShareBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NasShare> localVarResponse = UpdateNasShareByNasWithHttpInfo(nasId, nasShareId, nasShareBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific NAS share. **API Key Scope**: nas_shares / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>ApiResponse of NasShare</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NasShare > UpdateNasShareByNasWithHttpInfo (string nasId, string nasShareId, NasShare nasShareBody)
        {
            // verify the required parameter 'nasId' is set
            if (nasId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasId' when calling NasSharesApi->UpdateNasShareByNas");

            // verify the required parameter 'nasShareId' is set
            if (nasShareId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareId' when calling NasSharesApi->UpdateNasShareByNas");

            // verify the required parameter 'nasShareBody' is set
            if (nasShareBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareBody' when calling NasSharesApi->UpdateNasShareByNas");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (nasId != null)
                localVarRequestOptions.PathParameters.Add("nas_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasId)); // path parameter
            if (nasShareId != null)
                localVarRequestOptions.PathParameters.Add("nas_share_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasShareId)); // path parameter
            localVarRequestOptions.Data = nasShareBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< NasShare >("/nas/{nas_id}/nas_shares/{nas_share_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateNasShareByNas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific NAS share. **API Key Scope**: nas_shares / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>Task of NasShare</returns>
        public async System.Threading.Tasks.Task<NasShare> UpdateNasShareByNasAsync (string nasId, string nasShareId, NasShare nasShareBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NasShare> localVarResponse = await UpdateNasShareByNasAsyncWithHttpInfo(nasId, nasShareId, nasShareBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a specific NAS share. **API Key Scope**: nas_shares / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>Task of ApiResponse (NasShare)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NasShare>> UpdateNasShareByNasAsyncWithHttpInfo (string nasId, string nasShareId, NasShare nasShareBody)
        {
            // verify the required parameter 'nasId' is set
            if (nasId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasId' when calling NasSharesApi->UpdateNasShareByNas");

            // verify the required parameter 'nasShareId' is set
            if (nasShareId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareId' when calling NasSharesApi->UpdateNasShareByNas");

            // verify the required parameter 'nasShareBody' is set
            if (nasShareBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareBody' when calling NasSharesApi->UpdateNasShareByNas");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (nasId != null)
                localVarRequestOptions.PathParameters.Add("nas_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasId)); // path parameter
            if (nasShareId != null)
                localVarRequestOptions.PathParameters.Add("nas_share_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasShareId)); // path parameter
            localVarRequestOptions.Data = nasShareBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<NasShare>("/nas/{nas_id}/nas_shares/{nas_share_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateNasShareByNas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific NAS share. **API Key Scope**: nas_shares / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>NasShare</returns>
        public NasShare UpdateNasShareByPool (string poolId, string nasShareId, NasShare nasShareBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NasShare> localVarResponse = UpdateNasShareByPoolWithHttpInfo(poolId, nasShareId, nasShareBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific NAS share. **API Key Scope**: nas_shares / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>ApiResponse of NasShare</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NasShare > UpdateNasShareByPoolWithHttpInfo (string poolId, string nasShareId, NasShare nasShareBody)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling NasSharesApi->UpdateNasShareByPool");

            // verify the required parameter 'nasShareId' is set
            if (nasShareId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareId' when calling NasSharesApi->UpdateNasShareByPool");

            // verify the required parameter 'nasShareBody' is set
            if (nasShareBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareBody' when calling NasSharesApi->UpdateNasShareByPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (nasShareId != null)
                localVarRequestOptions.PathParameters.Add("nas_share_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasShareId)); // path parameter
            localVarRequestOptions.Data = nasShareBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< NasShare >("/pools/{pool_id}/nas_shares/{nas_share_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateNasShareByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific NAS share. **API Key Scope**: nas_shares / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>Task of NasShare</returns>
        public async System.Threading.Tasks.Task<NasShare> UpdateNasShareByPoolAsync (string poolId, string nasShareId, NasShare nasShareBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NasShare> localVarResponse = await UpdateNasShareByPoolAsyncWithHttpInfo(poolId, nasShareId, nasShareBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a specific NAS share. **API Key Scope**: nas_shares / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="nasShareId">Numeric ID or name of NAS share.</param>
        /// <param name="nasShareBody"></param>
        /// <returns>Task of ApiResponse (NasShare)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NasShare>> UpdateNasShareByPoolAsyncWithHttpInfo (string poolId, string nasShareId, NasShare nasShareBody)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling NasSharesApi->UpdateNasShareByPool");

            // verify the required parameter 'nasShareId' is set
            if (nasShareId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareId' when calling NasSharesApi->UpdateNasShareByPool");

            // verify the required parameter 'nasShareBody' is set
            if (nasShareBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasShareBody' when calling NasSharesApi->UpdateNasShareByPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (nasShareId != null)
                localVarRequestOptions.PathParameters.Add("nas_share_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasShareId)); // path parameter
            localVarRequestOptions.Data = nasShareBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<NasShare>("/pools/{pool_id}/nas_shares/{nas_share_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateNasShareByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
