/* 
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Io.Nodeum.Sdk.Client;
using Io.Nodeum.Sdk.Model;

namespace Io.Nodeum.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContainersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new container.
        /// </summary>
        /// <remarks>
        /// It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerBody"></param>
        /// <returns>Container</returns>
        Container CreateContainer (Container containerBody);

        /// <summary>
        /// Creates a new container.
        /// </summary>
        /// <remarks>
        /// It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerBody"></param>
        /// <returns>ApiResponse of Container</returns>
        ApiResponse<Container> CreateContainerWithHttpInfo (Container containerBody);
        /// <summary>
        /// Creates a new privilege on the container.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: container_privileges / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeBody"></param>
        /// <returns>ContainerPrivilege</returns>
        ContainerPrivilege CreateContainerPrivilege (string containerId, ContainerPrivilege containerPrivilegeBody);

        /// <summary>
        /// Creates a new privilege on the container.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: container_privileges / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeBody"></param>
        /// <returns>ApiResponse of ContainerPrivilege</returns>
        ApiResponse<ContainerPrivilege> CreateContainerPrivilegeWithHttpInfo (string containerId, ContainerPrivilege containerPrivilegeBody);
        /// <summary>
        /// Destroys a specific container.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: containers / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <returns></returns>
        void DestroyContainer (string containerId);

        /// <summary>
        /// Destroys a specific container.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: containers / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyContainerWithHttpInfo (string containerId);
        /// <summary>
        /// Destroys a specific privilege.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: container_privileges / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeId">Numeric ID of container privilege.</param>
        /// <returns></returns>
        void DestroyContainerPrivilege (string containerId, int containerPrivilegeId);

        /// <summary>
        /// Destroys a specific privilege.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: container_privileges / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeId">Numeric ID of container privilege.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyContainerPrivilegeWithHttpInfo (string containerId, int containerPrivilegeId);
        /// <summary>
        /// Lists all privilege on the container.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: container_privileges / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="privilege">Filter on privilege (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <returns>ContainerPrivilegeCollection</returns>
        ContainerPrivilegeCollection IndexContainerPrivileges (string containerId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string privilege = default(string), string type = default(string));

        /// <summary>
        /// Lists all privilege on the container.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: container_privileges / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="privilege">Filter on privilege (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <returns>ApiResponse of ContainerPrivilegeCollection</returns>
        ApiResponse<ContainerPrivilegeCollection> IndexContainerPrivilegesWithHttpInfo (string containerId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string privilege = default(string), string type = default(string));
        /// <summary>
        /// Lists all containers.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: containers / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="quotaTotalSize">Filter on quota total size (optional)</param>
        /// <param name="quotaOnCache">Filter on quota on cache (optional)</param>
        /// <param name="statTotalFiles">Filter on stat total files (optional)</param>
        /// <param name="statTotalSize">Filter on stat total size (optional)</param>
        /// <param name="statSizeOnCache">Filter on stat size on cache (optional)</param>
        /// <param name="guestRight">Filter on guest right (optional)</param>
        /// <param name="lastUpdate">Filter on last update (optional)</param>
        /// <returns>ContainerCollection</returns>
        ContainerCollection IndexContainers (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string quotaTotalSize = default(string), string quotaOnCache = default(string), string statTotalFiles = default(string), string statTotalSize = default(string), string statSizeOnCache = default(string), string guestRight = default(string), string lastUpdate = default(string));

        /// <summary>
        /// Lists all containers.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: containers / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="quotaTotalSize">Filter on quota total size (optional)</param>
        /// <param name="quotaOnCache">Filter on quota on cache (optional)</param>
        /// <param name="statTotalFiles">Filter on stat total files (optional)</param>
        /// <param name="statTotalSize">Filter on stat total size (optional)</param>
        /// <param name="statSizeOnCache">Filter on stat size on cache (optional)</param>
        /// <param name="guestRight">Filter on guest right (optional)</param>
        /// <param name="lastUpdate">Filter on last update (optional)</param>
        /// <returns>ApiResponse of ContainerCollection</returns>
        ApiResponse<ContainerCollection> IndexContainersWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string quotaTotalSize = default(string), string quotaOnCache = default(string), string statTotalFiles = default(string), string statTotalSize = default(string), string statSizeOnCache = default(string), string guestRight = default(string), string lastUpdate = default(string));
        /// <summary>
        /// Displays a specific container.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: containers / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <returns>Container</returns>
        Container ShowContainer (string containerId);

        /// <summary>
        /// Displays a specific container.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: containers / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <returns>ApiResponse of Container</returns>
        ApiResponse<Container> ShowContainerWithHttpInfo (string containerId);
        /// <summary>
        /// Displays a specific privilege.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: container_privileges / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeId">Numeric ID of container privilege.</param>
        /// <returns>ContainerPrivilege</returns>
        ContainerPrivilege ShowContainerPrivilege (string containerId, int containerPrivilegeId);

        /// <summary>
        /// Displays a specific privilege.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: container_privileges / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeId">Numeric ID of container privilege.</param>
        /// <returns>ApiResponse of ContainerPrivilege</returns>
        ApiResponse<ContainerPrivilege> ShowContainerPrivilegeWithHttpInfo (string containerId, int containerPrivilegeId);
        /// <summary>
        /// Updates a specific container.
        /// </summary>
        /// <remarks>
        /// It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerBody"></param>
        /// <returns>Container</returns>
        Container UpdateContainer (string containerId, Container containerBody);

        /// <summary>
        /// Updates a specific container.
        /// </summary>
        /// <remarks>
        /// It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerBody"></param>
        /// <returns>ApiResponse of Container</returns>
        ApiResponse<Container> UpdateContainerWithHttpInfo (string containerId, Container containerBody);
        /// <summary>
        /// Updates a specific privilege.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: container_privileges / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeId">Numeric ID of container privilege.</param>
        /// <param name="containerPrivilegeBody"></param>
        /// <returns>ContainerPrivilege</returns>
        ContainerPrivilege UpdateContainerPrivilege (string containerId, int containerPrivilegeId, ContainerPrivilege containerPrivilegeBody);

        /// <summary>
        /// Updates a specific privilege.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: container_privileges / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeId">Numeric ID of container privilege.</param>
        /// <param name="containerPrivilegeBody"></param>
        /// <returns>ApiResponse of ContainerPrivilege</returns>
        ApiResponse<ContainerPrivilege> UpdateContainerPrivilegeWithHttpInfo (string containerId, int containerPrivilegeId, ContainerPrivilege containerPrivilegeBody);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContainersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new container.
        /// </summary>
        /// <remarks>
        /// It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerBody"></param>
        /// <returns>Task of Container</returns>
        System.Threading.Tasks.Task<Container> CreateContainerAsync (Container containerBody);

        /// <summary>
        /// Creates a new container.
        /// </summary>
        /// <remarks>
        /// It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerBody"></param>
        /// <returns>Task of ApiResponse (Container)</returns>
        System.Threading.Tasks.Task<ApiResponse<Container>> CreateContainerAsyncWithHttpInfo (Container containerBody);
        /// <summary>
        /// Creates a new privilege on the container.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: container_privileges / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeBody"></param>
        /// <returns>Task of ContainerPrivilege</returns>
        System.Threading.Tasks.Task<ContainerPrivilege> CreateContainerPrivilegeAsync (string containerId, ContainerPrivilege containerPrivilegeBody);

        /// <summary>
        /// Creates a new privilege on the container.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: container_privileges / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeBody"></param>
        /// <returns>Task of ApiResponse (ContainerPrivilege)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContainerPrivilege>> CreateContainerPrivilegeAsyncWithHttpInfo (string containerId, ContainerPrivilege containerPrivilegeBody);
        /// <summary>
        /// Destroys a specific container.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: containers / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyContainerAsync (string containerId);

        /// <summary>
        /// Destroys a specific container.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: containers / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyContainerAsyncWithHttpInfo (string containerId);
        /// <summary>
        /// Destroys a specific privilege.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: container_privileges / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeId">Numeric ID of container privilege.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyContainerPrivilegeAsync (string containerId, int containerPrivilegeId);

        /// <summary>
        /// Destroys a specific privilege.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: container_privileges / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeId">Numeric ID of container privilege.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyContainerPrivilegeAsyncWithHttpInfo (string containerId, int containerPrivilegeId);
        /// <summary>
        /// Lists all privilege on the container.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: container_privileges / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="privilege">Filter on privilege (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <returns>Task of ContainerPrivilegeCollection</returns>
        System.Threading.Tasks.Task<ContainerPrivilegeCollection> IndexContainerPrivilegesAsync (string containerId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string privilege = default(string), string type = default(string));

        /// <summary>
        /// Lists all privilege on the container.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: container_privileges / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="privilege">Filter on privilege (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <returns>Task of ApiResponse (ContainerPrivilegeCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContainerPrivilegeCollection>> IndexContainerPrivilegesAsyncWithHttpInfo (string containerId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string privilege = default(string), string type = default(string));
        /// <summary>
        /// Lists all containers.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: containers / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="quotaTotalSize">Filter on quota total size (optional)</param>
        /// <param name="quotaOnCache">Filter on quota on cache (optional)</param>
        /// <param name="statTotalFiles">Filter on stat total files (optional)</param>
        /// <param name="statTotalSize">Filter on stat total size (optional)</param>
        /// <param name="statSizeOnCache">Filter on stat size on cache (optional)</param>
        /// <param name="guestRight">Filter on guest right (optional)</param>
        /// <param name="lastUpdate">Filter on last update (optional)</param>
        /// <returns>Task of ContainerCollection</returns>
        System.Threading.Tasks.Task<ContainerCollection> IndexContainersAsync (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string quotaTotalSize = default(string), string quotaOnCache = default(string), string statTotalFiles = default(string), string statTotalSize = default(string), string statSizeOnCache = default(string), string guestRight = default(string), string lastUpdate = default(string));

        /// <summary>
        /// Lists all containers.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: containers / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="quotaTotalSize">Filter on quota total size (optional)</param>
        /// <param name="quotaOnCache">Filter on quota on cache (optional)</param>
        /// <param name="statTotalFiles">Filter on stat total files (optional)</param>
        /// <param name="statTotalSize">Filter on stat total size (optional)</param>
        /// <param name="statSizeOnCache">Filter on stat size on cache (optional)</param>
        /// <param name="guestRight">Filter on guest right (optional)</param>
        /// <param name="lastUpdate">Filter on last update (optional)</param>
        /// <returns>Task of ApiResponse (ContainerCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContainerCollection>> IndexContainersAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string quotaTotalSize = default(string), string quotaOnCache = default(string), string statTotalFiles = default(string), string statTotalSize = default(string), string statSizeOnCache = default(string), string guestRight = default(string), string lastUpdate = default(string));
        /// <summary>
        /// Displays a specific container.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: containers / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <returns>Task of Container</returns>
        System.Threading.Tasks.Task<Container> ShowContainerAsync (string containerId);

        /// <summary>
        /// Displays a specific container.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: containers / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <returns>Task of ApiResponse (Container)</returns>
        System.Threading.Tasks.Task<ApiResponse<Container>> ShowContainerAsyncWithHttpInfo (string containerId);
        /// <summary>
        /// Displays a specific privilege.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: container_privileges / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeId">Numeric ID of container privilege.</param>
        /// <returns>Task of ContainerPrivilege</returns>
        System.Threading.Tasks.Task<ContainerPrivilege> ShowContainerPrivilegeAsync (string containerId, int containerPrivilegeId);

        /// <summary>
        /// Displays a specific privilege.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: container_privileges / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeId">Numeric ID of container privilege.</param>
        /// <returns>Task of ApiResponse (ContainerPrivilege)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContainerPrivilege>> ShowContainerPrivilegeAsyncWithHttpInfo (string containerId, int containerPrivilegeId);
        /// <summary>
        /// Updates a specific container.
        /// </summary>
        /// <remarks>
        /// It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerBody"></param>
        /// <returns>Task of Container</returns>
        System.Threading.Tasks.Task<Container> UpdateContainerAsync (string containerId, Container containerBody);

        /// <summary>
        /// Updates a specific container.
        /// </summary>
        /// <remarks>
        /// It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerBody"></param>
        /// <returns>Task of ApiResponse (Container)</returns>
        System.Threading.Tasks.Task<ApiResponse<Container>> UpdateContainerAsyncWithHttpInfo (string containerId, Container containerBody);
        /// <summary>
        /// Updates a specific privilege.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: container_privileges / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeId">Numeric ID of container privilege.</param>
        /// <param name="containerPrivilegeBody"></param>
        /// <returns>Task of ContainerPrivilege</returns>
        System.Threading.Tasks.Task<ContainerPrivilege> UpdateContainerPrivilegeAsync (string containerId, int containerPrivilegeId, ContainerPrivilege containerPrivilegeBody);

        /// <summary>
        /// Updates a specific privilege.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: container_privileges / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeId">Numeric ID of container privilege.</param>
        /// <param name="containerPrivilegeBody"></param>
        /// <returns>Task of ApiResponse (ContainerPrivilege)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContainerPrivilege>> UpdateContainerPrivilegeAsyncWithHttpInfo (string containerId, int containerPrivilegeId, ContainerPrivilege containerPrivilegeBody);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContainersApi : IContainersApiSync, IContainersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContainersApi : IContainersApi
    {
        private Io.Nodeum.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContainersApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContainersApi(String basePath)
        {
            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                new Io.Nodeum.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContainersApi(Io.Nodeum.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContainersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ContainersApi(Io.Nodeum.Sdk.Client.ISynchronousClient client,Io.Nodeum.Sdk.Client.IAsynchronousClient asyncClient, Io.Nodeum.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Io.Nodeum.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a new container. It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerBody"></param>
        /// <returns>Container</returns>
        public Container CreateContainer (Container containerBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Container> localVarResponse = CreateContainerWithHttpInfo(containerBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new container. It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerBody"></param>
        /// <returns>ApiResponse of Container</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< Container > CreateContainerWithHttpInfo (Container containerBody)
        {
            // verify the required parameter 'containerBody' is set
            if (containerBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerBody' when calling ContainersApi->CreateContainer");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = containerBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Container >("/containers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContainer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new container. It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerBody"></param>
        /// <returns>Task of Container</returns>
        public async System.Threading.Tasks.Task<Container> CreateContainerAsync (Container containerBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Container> localVarResponse = await CreateContainerAsyncWithHttpInfo(containerBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new container. It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerBody"></param>
        /// <returns>Task of ApiResponse (Container)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Container>> CreateContainerAsyncWithHttpInfo (Container containerBody)
        {
            // verify the required parameter 'containerBody' is set
            if (containerBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerBody' when calling ContainersApi->CreateContainer");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = containerBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Container>("/containers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContainer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new privilege on the container. **API Key Scope**: container_privileges / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeBody"></param>
        /// <returns>ContainerPrivilege</returns>
        public ContainerPrivilege CreateContainerPrivilege (string containerId, ContainerPrivilege containerPrivilegeBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ContainerPrivilege> localVarResponse = CreateContainerPrivilegeWithHttpInfo(containerId, containerPrivilegeBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new privilege on the container. **API Key Scope**: container_privileges / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeBody"></param>
        /// <returns>ApiResponse of ContainerPrivilege</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ContainerPrivilege > CreateContainerPrivilegeWithHttpInfo (string containerId, ContainerPrivilege containerPrivilegeBody)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerId' when calling ContainersApi->CreateContainerPrivilege");

            // verify the required parameter 'containerPrivilegeBody' is set
            if (containerPrivilegeBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerPrivilegeBody' when calling ContainersApi->CreateContainerPrivilege");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (containerId != null)
                localVarRequestOptions.PathParameters.Add("container_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            localVarRequestOptions.Data = containerPrivilegeBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< ContainerPrivilege >("/containers/{container_id}/container_privileges", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContainerPrivilege", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new privilege on the container. **API Key Scope**: container_privileges / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeBody"></param>
        /// <returns>Task of ContainerPrivilege</returns>
        public async System.Threading.Tasks.Task<ContainerPrivilege> CreateContainerPrivilegeAsync (string containerId, ContainerPrivilege containerPrivilegeBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ContainerPrivilege> localVarResponse = await CreateContainerPrivilegeAsyncWithHttpInfo(containerId, containerPrivilegeBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new privilege on the container. **API Key Scope**: container_privileges / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeBody"></param>
        /// <returns>Task of ApiResponse (ContainerPrivilege)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ContainerPrivilege>> CreateContainerPrivilegeAsyncWithHttpInfo (string containerId, ContainerPrivilege containerPrivilegeBody)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerId' when calling ContainersApi->CreateContainerPrivilege");

            // verify the required parameter 'containerPrivilegeBody' is set
            if (containerPrivilegeBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerPrivilegeBody' when calling ContainersApi->CreateContainerPrivilege");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (containerId != null)
                localVarRequestOptions.PathParameters.Add("container_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            localVarRequestOptions.Data = containerPrivilegeBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ContainerPrivilege>("/containers/{container_id}/container_privileges", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContainerPrivilege", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific container. **API Key Scope**: containers / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <returns></returns>
        public void DestroyContainer (string containerId)
        {
             DestroyContainerWithHttpInfo(containerId);
        }

        /// <summary>
        /// Destroys a specific container. **API Key Scope**: containers / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse<Object> DestroyContainerWithHttpInfo (string containerId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerId' when calling ContainersApi->DestroyContainer");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (containerId != null)
                localVarRequestOptions.PathParameters.Add("container_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/containers/{container_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyContainer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific container. **API Key Scope**: containers / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyContainerAsync (string containerId)
        {
             await DestroyContainerAsyncWithHttpInfo(containerId);

        }

        /// <summary>
        /// Destroys a specific container. **API Key Scope**: containers / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Object>> DestroyContainerAsyncWithHttpInfo (string containerId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerId' when calling ContainersApi->DestroyContainer");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (containerId != null)
                localVarRequestOptions.PathParameters.Add("container_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/containers/{container_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyContainer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific privilege. **API Key Scope**: container_privileges / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeId">Numeric ID of container privilege.</param>
        /// <returns></returns>
        public void DestroyContainerPrivilege (string containerId, int containerPrivilegeId)
        {
             DestroyContainerPrivilegeWithHttpInfo(containerId, containerPrivilegeId);
        }

        /// <summary>
        /// Destroys a specific privilege. **API Key Scope**: container_privileges / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeId">Numeric ID of container privilege.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse<Object> DestroyContainerPrivilegeWithHttpInfo (string containerId, int containerPrivilegeId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerId' when calling ContainersApi->DestroyContainerPrivilege");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (containerId != null)
                localVarRequestOptions.PathParameters.Add("container_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("container_privilege_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerPrivilegeId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/containers/{container_id}/container_privileges/{container_privilege_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyContainerPrivilege", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific privilege. **API Key Scope**: container_privileges / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeId">Numeric ID of container privilege.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyContainerPrivilegeAsync (string containerId, int containerPrivilegeId)
        {
             await DestroyContainerPrivilegeAsyncWithHttpInfo(containerId, containerPrivilegeId);

        }

        /// <summary>
        /// Destroys a specific privilege. **API Key Scope**: container_privileges / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeId">Numeric ID of container privilege.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Object>> DestroyContainerPrivilegeAsyncWithHttpInfo (string containerId, int containerPrivilegeId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerId' when calling ContainersApi->DestroyContainerPrivilege");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (containerId != null)
                localVarRequestOptions.PathParameters.Add("container_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("container_privilege_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerPrivilegeId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/containers/{container_id}/container_privileges/{container_privilege_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyContainerPrivilege", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all privilege on the container. **API Key Scope**: container_privileges / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="privilege">Filter on privilege (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <returns>ContainerPrivilegeCollection</returns>
        public ContainerPrivilegeCollection IndexContainerPrivileges (string containerId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string privilege = default(string), string type = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ContainerPrivilegeCollection> localVarResponse = IndexContainerPrivilegesWithHttpInfo(containerId, limit, offset, sortBy, id, name, privilege, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all privilege on the container. **API Key Scope**: container_privileges / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="privilege">Filter on privilege (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <returns>ApiResponse of ContainerPrivilegeCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ContainerPrivilegeCollection > IndexContainerPrivilegesWithHttpInfo (string containerId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string privilege = default(string), string type = default(string))
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerId' when calling ContainersApi->IndexContainerPrivileges");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (containerId != null)
                localVarRequestOptions.PathParameters.Add("container_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (privilege != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "privilege", privilege));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ContainerPrivilegeCollection >("/containers/{container_id}/container_privileges", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexContainerPrivileges", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all privilege on the container. **API Key Scope**: container_privileges / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="privilege">Filter on privilege (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <returns>Task of ContainerPrivilegeCollection</returns>
        public async System.Threading.Tasks.Task<ContainerPrivilegeCollection> IndexContainerPrivilegesAsync (string containerId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string privilege = default(string), string type = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ContainerPrivilegeCollection> localVarResponse = await IndexContainerPrivilegesAsyncWithHttpInfo(containerId, limit, offset, sortBy, id, name, privilege, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all privilege on the container. **API Key Scope**: container_privileges / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="privilege">Filter on privilege (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <returns>Task of ApiResponse (ContainerPrivilegeCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ContainerPrivilegeCollection>> IndexContainerPrivilegesAsyncWithHttpInfo (string containerId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string privilege = default(string), string type = default(string))
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerId' when calling ContainersApi->IndexContainerPrivileges");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (containerId != null)
                localVarRequestOptions.PathParameters.Add("container_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (privilege != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "privilege", privilege));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ContainerPrivilegeCollection>("/containers/{container_id}/container_privileges", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexContainerPrivileges", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all containers. **API Key Scope**: containers / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="quotaTotalSize">Filter on quota total size (optional)</param>
        /// <param name="quotaOnCache">Filter on quota on cache (optional)</param>
        /// <param name="statTotalFiles">Filter on stat total files (optional)</param>
        /// <param name="statTotalSize">Filter on stat total size (optional)</param>
        /// <param name="statSizeOnCache">Filter on stat size on cache (optional)</param>
        /// <param name="guestRight">Filter on guest right (optional)</param>
        /// <param name="lastUpdate">Filter on last update (optional)</param>
        /// <returns>ContainerCollection</returns>
        public ContainerCollection IndexContainers (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string quotaTotalSize = default(string), string quotaOnCache = default(string), string statTotalFiles = default(string), string statTotalSize = default(string), string statSizeOnCache = default(string), string guestRight = default(string), string lastUpdate = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ContainerCollection> localVarResponse = IndexContainersWithHttpInfo(limit, offset, sortBy, id, name, comment, quotaTotalSize, quotaOnCache, statTotalFiles, statTotalSize, statSizeOnCache, guestRight, lastUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all containers. **API Key Scope**: containers / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="quotaTotalSize">Filter on quota total size (optional)</param>
        /// <param name="quotaOnCache">Filter on quota on cache (optional)</param>
        /// <param name="statTotalFiles">Filter on stat total files (optional)</param>
        /// <param name="statTotalSize">Filter on stat total size (optional)</param>
        /// <param name="statSizeOnCache">Filter on stat size on cache (optional)</param>
        /// <param name="guestRight">Filter on guest right (optional)</param>
        /// <param name="lastUpdate">Filter on last update (optional)</param>
        /// <returns>ApiResponse of ContainerCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ContainerCollection > IndexContainersWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string quotaTotalSize = default(string), string quotaOnCache = default(string), string statTotalFiles = default(string), string statTotalSize = default(string), string statSizeOnCache = default(string), string guestRight = default(string), string lastUpdate = default(string))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (quotaTotalSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "quota_total_size", quotaTotalSize));
            }
            if (quotaOnCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "quota_on_cache", quotaOnCache));
            }
            if (statTotalFiles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "stat_total_files", statTotalFiles));
            }
            if (statTotalSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "stat_total_size", statTotalSize));
            }
            if (statSizeOnCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "stat_size_on_cache", statSizeOnCache));
            }
            if (guestRight != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "guest_right", guestRight));
            }
            if (lastUpdate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_update", lastUpdate));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ContainerCollection >("/containers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexContainers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all containers. **API Key Scope**: containers / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="quotaTotalSize">Filter on quota total size (optional)</param>
        /// <param name="quotaOnCache">Filter on quota on cache (optional)</param>
        /// <param name="statTotalFiles">Filter on stat total files (optional)</param>
        /// <param name="statTotalSize">Filter on stat total size (optional)</param>
        /// <param name="statSizeOnCache">Filter on stat size on cache (optional)</param>
        /// <param name="guestRight">Filter on guest right (optional)</param>
        /// <param name="lastUpdate">Filter on last update (optional)</param>
        /// <returns>Task of ContainerCollection</returns>
        public async System.Threading.Tasks.Task<ContainerCollection> IndexContainersAsync (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string quotaTotalSize = default(string), string quotaOnCache = default(string), string statTotalFiles = default(string), string statTotalSize = default(string), string statSizeOnCache = default(string), string guestRight = default(string), string lastUpdate = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ContainerCollection> localVarResponse = await IndexContainersAsyncWithHttpInfo(limit, offset, sortBy, id, name, comment, quotaTotalSize, quotaOnCache, statTotalFiles, statTotalSize, statSizeOnCache, guestRight, lastUpdate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all containers. **API Key Scope**: containers / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="quotaTotalSize">Filter on quota total size (optional)</param>
        /// <param name="quotaOnCache">Filter on quota on cache (optional)</param>
        /// <param name="statTotalFiles">Filter on stat total files (optional)</param>
        /// <param name="statTotalSize">Filter on stat total size (optional)</param>
        /// <param name="statSizeOnCache">Filter on stat size on cache (optional)</param>
        /// <param name="guestRight">Filter on guest right (optional)</param>
        /// <param name="lastUpdate">Filter on last update (optional)</param>
        /// <returns>Task of ApiResponse (ContainerCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ContainerCollection>> IndexContainersAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string quotaTotalSize = default(string), string quotaOnCache = default(string), string statTotalFiles = default(string), string statTotalSize = default(string), string statSizeOnCache = default(string), string guestRight = default(string), string lastUpdate = default(string))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (quotaTotalSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "quota_total_size", quotaTotalSize));
            }
            if (quotaOnCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "quota_on_cache", quotaOnCache));
            }
            if (statTotalFiles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "stat_total_files", statTotalFiles));
            }
            if (statTotalSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "stat_total_size", statTotalSize));
            }
            if (statSizeOnCache != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "stat_size_on_cache", statSizeOnCache));
            }
            if (guestRight != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "guest_right", guestRight));
            }
            if (lastUpdate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "last_update", lastUpdate));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ContainerCollection>("/containers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexContainers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific container. **API Key Scope**: containers / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <returns>Container</returns>
        public Container ShowContainer (string containerId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Container> localVarResponse = ShowContainerWithHttpInfo(containerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific container. **API Key Scope**: containers / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <returns>ApiResponse of Container</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< Container > ShowContainerWithHttpInfo (string containerId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerId' when calling ContainersApi->ShowContainer");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (containerId != null)
                localVarRequestOptions.PathParameters.Add("container_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Container >("/containers/{container_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowContainer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific container. **API Key Scope**: containers / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <returns>Task of Container</returns>
        public async System.Threading.Tasks.Task<Container> ShowContainerAsync (string containerId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Container> localVarResponse = await ShowContainerAsyncWithHttpInfo(containerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific container. **API Key Scope**: containers / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <returns>Task of ApiResponse (Container)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Container>> ShowContainerAsyncWithHttpInfo (string containerId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerId' when calling ContainersApi->ShowContainer");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (containerId != null)
                localVarRequestOptions.PathParameters.Add("container_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Container>("/containers/{container_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowContainer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific privilege. **API Key Scope**: container_privileges / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeId">Numeric ID of container privilege.</param>
        /// <returns>ContainerPrivilege</returns>
        public ContainerPrivilege ShowContainerPrivilege (string containerId, int containerPrivilegeId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ContainerPrivilege> localVarResponse = ShowContainerPrivilegeWithHttpInfo(containerId, containerPrivilegeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific privilege. **API Key Scope**: container_privileges / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeId">Numeric ID of container privilege.</param>
        /// <returns>ApiResponse of ContainerPrivilege</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ContainerPrivilege > ShowContainerPrivilegeWithHttpInfo (string containerId, int containerPrivilegeId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerId' when calling ContainersApi->ShowContainerPrivilege");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (containerId != null)
                localVarRequestOptions.PathParameters.Add("container_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("container_privilege_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerPrivilegeId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ContainerPrivilege >("/containers/{container_id}/container_privileges/{container_privilege_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowContainerPrivilege", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific privilege. **API Key Scope**: container_privileges / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeId">Numeric ID of container privilege.</param>
        /// <returns>Task of ContainerPrivilege</returns>
        public async System.Threading.Tasks.Task<ContainerPrivilege> ShowContainerPrivilegeAsync (string containerId, int containerPrivilegeId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ContainerPrivilege> localVarResponse = await ShowContainerPrivilegeAsyncWithHttpInfo(containerId, containerPrivilegeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific privilege. **API Key Scope**: container_privileges / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeId">Numeric ID of container privilege.</param>
        /// <returns>Task of ApiResponse (ContainerPrivilege)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ContainerPrivilege>> ShowContainerPrivilegeAsyncWithHttpInfo (string containerId, int containerPrivilegeId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerId' when calling ContainersApi->ShowContainerPrivilege");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (containerId != null)
                localVarRequestOptions.PathParameters.Add("container_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("container_privilege_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerPrivilegeId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ContainerPrivilege>("/containers/{container_id}/container_privileges/{container_privilege_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowContainerPrivilege", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific container. It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerBody"></param>
        /// <returns>Container</returns>
        public Container UpdateContainer (string containerId, Container containerBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Container> localVarResponse = UpdateContainerWithHttpInfo(containerId, containerBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific container. It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerBody"></param>
        /// <returns>ApiResponse of Container</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< Container > UpdateContainerWithHttpInfo (string containerId, Container containerBody)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerId' when calling ContainersApi->UpdateContainer");

            // verify the required parameter 'containerBody' is set
            if (containerBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerBody' when calling ContainersApi->UpdateContainer");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (containerId != null)
                localVarRequestOptions.PathParameters.Add("container_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            localVarRequestOptions.Data = containerBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Container >("/containers/{container_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateContainer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific container. It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerBody"></param>
        /// <returns>Task of Container</returns>
        public async System.Threading.Tasks.Task<Container> UpdateContainerAsync (string containerId, Container containerBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Container> localVarResponse = await UpdateContainerAsyncWithHttpInfo(containerId, containerBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a specific container. It **does not** yet create the file structure and configure the samba connection. Use API v1 instead.  **API Key Scope**: containers / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerBody"></param>
        /// <returns>Task of ApiResponse (Container)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Container>> UpdateContainerAsyncWithHttpInfo (string containerId, Container containerBody)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerId' when calling ContainersApi->UpdateContainer");

            // verify the required parameter 'containerBody' is set
            if (containerBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerBody' when calling ContainersApi->UpdateContainer");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (containerId != null)
                localVarRequestOptions.PathParameters.Add("container_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            localVarRequestOptions.Data = containerBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Container>("/containers/{container_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateContainer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific privilege. **API Key Scope**: container_privileges / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeId">Numeric ID of container privilege.</param>
        /// <param name="containerPrivilegeBody"></param>
        /// <returns>ContainerPrivilege</returns>
        public ContainerPrivilege UpdateContainerPrivilege (string containerId, int containerPrivilegeId, ContainerPrivilege containerPrivilegeBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ContainerPrivilege> localVarResponse = UpdateContainerPrivilegeWithHttpInfo(containerId, containerPrivilegeId, containerPrivilegeBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific privilege. **API Key Scope**: container_privileges / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeId">Numeric ID of container privilege.</param>
        /// <param name="containerPrivilegeBody"></param>
        /// <returns>ApiResponse of ContainerPrivilege</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ContainerPrivilege > UpdateContainerPrivilegeWithHttpInfo (string containerId, int containerPrivilegeId, ContainerPrivilege containerPrivilegeBody)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerId' when calling ContainersApi->UpdateContainerPrivilege");

            // verify the required parameter 'containerPrivilegeBody' is set
            if (containerPrivilegeBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerPrivilegeBody' when calling ContainersApi->UpdateContainerPrivilege");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (containerId != null)
                localVarRequestOptions.PathParameters.Add("container_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("container_privilege_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerPrivilegeId)); // path parameter
            localVarRequestOptions.Data = containerPrivilegeBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< ContainerPrivilege >("/containers/{container_id}/container_privileges/{container_privilege_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateContainerPrivilege", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific privilege. **API Key Scope**: container_privileges / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeId">Numeric ID of container privilege.</param>
        /// <param name="containerPrivilegeBody"></param>
        /// <returns>Task of ContainerPrivilege</returns>
        public async System.Threading.Tasks.Task<ContainerPrivilege> UpdateContainerPrivilegeAsync (string containerId, int containerPrivilegeId, ContainerPrivilege containerPrivilegeBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ContainerPrivilege> localVarResponse = await UpdateContainerPrivilegeAsyncWithHttpInfo(containerId, containerPrivilegeId, containerPrivilegeBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a specific privilege. **API Key Scope**: container_privileges / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId">Numeric ID or name of container.</param>
        /// <param name="containerPrivilegeId">Numeric ID of container privilege.</param>
        /// <param name="containerPrivilegeBody"></param>
        /// <returns>Task of ApiResponse (ContainerPrivilege)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ContainerPrivilege>> UpdateContainerPrivilegeAsyncWithHttpInfo (string containerId, int containerPrivilegeId, ContainerPrivilege containerPrivilegeBody)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerId' when calling ContainersApi->UpdateContainerPrivilege");

            // verify the required parameter 'containerPrivilegeBody' is set
            if (containerPrivilegeBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'containerPrivilegeBody' when calling ContainersApi->UpdateContainerPrivilege");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (containerId != null)
                localVarRequestOptions.PathParameters.Add("container_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("container_privilege_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(containerPrivilegeId)); // path parameter
            localVarRequestOptions.Data = containerPrivilegeBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ContainerPrivilege>("/containers/{container_id}/container_privileges/{container_privilege_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateContainerPrivilege", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
