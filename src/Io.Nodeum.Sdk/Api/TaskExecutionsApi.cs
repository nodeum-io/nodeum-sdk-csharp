/* 
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Io.Nodeum.Sdk.Client;
using Io.Nodeum.Sdk.Model;

namespace Io.Nodeum.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskExecutionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Lists all task executions.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_executions / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="completeList">If &#x60;false&#x60;, only includes the last correct execution of a task. (optional, default to true)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="workflowType">Filter on task workflow type (optional)</param>
        /// <param name="workflowAction">Filter on task workflow action (optional)</param>
        /// <param name="sourceType">Filter on task source type (optional)</param>
        /// <param name="destinationType">Filter on task destination type (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="logTime">Filter on log time (optional)</param>
        /// <param name="jobStarted">Filter on job started (optional)</param>
        /// <param name="jobFinished">Filter on job finished (optional)</param>
        /// <param name="creationDate">Filter on creation date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="toProcessSize">Filter on to process size (optional)</param>
        /// <param name="processedSize">Filter on processed size (optional)</param>
        /// <param name="toProcessFiles">Filter on to process files (optional)</param>
        /// <param name="processedFiles">Filter on processed files (optional)</param>
        /// <param name="finalizedFiles">Filter on finalized files (optional)</param>
        /// <param name="estimationTime">Filter on estimation time (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>TaskExecutionCollection</returns>
        TaskExecutionCollection IndexTaskExecutions (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), bool? completeList = default(bool?), string id = default(string), string taskId = default(string), string name = default(string), string workflowType = default(string), string workflowAction = default(string), string sourceType = default(string), string destinationType = default(string), string status = default(string), string logTime = default(string), string jobStarted = default(string), string jobFinished = default(string), string creationDate = default(string), string modificationDate = default(string), string toProcessSize = default(string), string processedSize = default(string), string toProcessFiles = default(string), string processedFiles = default(string), string finalizedFiles = default(string), string estimationTime = default(string), string bandwidth = default(string));

        /// <summary>
        /// Lists all task executions.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_executions / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="completeList">If &#x60;false&#x60;, only includes the last correct execution of a task. (optional, default to true)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="workflowType">Filter on task workflow type (optional)</param>
        /// <param name="workflowAction">Filter on task workflow action (optional)</param>
        /// <param name="sourceType">Filter on task source type (optional)</param>
        /// <param name="destinationType">Filter on task destination type (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="logTime">Filter on log time (optional)</param>
        /// <param name="jobStarted">Filter on job started (optional)</param>
        /// <param name="jobFinished">Filter on job finished (optional)</param>
        /// <param name="creationDate">Filter on creation date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="toProcessSize">Filter on to process size (optional)</param>
        /// <param name="processedSize">Filter on processed size (optional)</param>
        /// <param name="toProcessFiles">Filter on to process files (optional)</param>
        /// <param name="processedFiles">Filter on processed files (optional)</param>
        /// <param name="finalizedFiles">Filter on finalized files (optional)</param>
        /// <param name="estimationTime">Filter on estimation time (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>ApiResponse of TaskExecutionCollection</returns>
        ApiResponse<TaskExecutionCollection> IndexTaskExecutionsWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), bool? completeList = default(bool?), string id = default(string), string taskId = default(string), string name = default(string), string workflowType = default(string), string workflowAction = default(string), string sourceType = default(string), string destinationType = default(string), string status = default(string), string logTime = default(string), string jobStarted = default(string), string jobFinished = default(string), string creationDate = default(string), string modificationDate = default(string), string toProcessSize = default(string), string processedSize = default(string), string toProcessFiles = default(string), string processedFiles = default(string), string finalizedFiles = default(string), string estimationTime = default(string), string bandwidth = default(string));
        /// <summary>
        /// Lists all task executions.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_executions / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="workflowType">Filter on task workflow type (optional)</param>
        /// <param name="workflowAction">Filter on task workflow action (optional)</param>
        /// <param name="sourceType">Filter on task source type (optional)</param>
        /// <param name="destinationType">Filter on task destination type (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="logTime">Filter on log time (optional)</param>
        /// <param name="jobStarted">Filter on job started (optional)</param>
        /// <param name="jobFinished">Filter on job finished (optional)</param>
        /// <param name="toProcessSize">Filter on to process size (optional)</param>
        /// <param name="processedSize">Filter on processed size (optional)</param>
        /// <param name="toProcessFiles">Filter on to process files (optional)</param>
        /// <param name="processedFiles">Filter on processed files (optional)</param>
        /// <param name="finalizedFiles">Filter on finalized files (optional)</param>
        /// <param name="estimationTime">Filter on estimation time (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>TaskExecutionCollection</returns>
        TaskExecutionCollection IndexTaskExecutionsByTask (string taskId = default(string), int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string workflowType = default(string), string workflowAction = default(string), string sourceType = default(string), string destinationType = default(string), string status = default(string), string logTime = default(string), string jobStarted = default(string), string jobFinished = default(string), string toProcessSize = default(string), string processedSize = default(string), string toProcessFiles = default(string), string processedFiles = default(string), string finalizedFiles = default(string), string estimationTime = default(string), string bandwidth = default(string));

        /// <summary>
        /// Lists all task executions.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_executions / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="workflowType">Filter on task workflow type (optional)</param>
        /// <param name="workflowAction">Filter on task workflow action (optional)</param>
        /// <param name="sourceType">Filter on task source type (optional)</param>
        /// <param name="destinationType">Filter on task destination type (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="logTime">Filter on log time (optional)</param>
        /// <param name="jobStarted">Filter on job started (optional)</param>
        /// <param name="jobFinished">Filter on job finished (optional)</param>
        /// <param name="toProcessSize">Filter on to process size (optional)</param>
        /// <param name="processedSize">Filter on processed size (optional)</param>
        /// <param name="toProcessFiles">Filter on to process files (optional)</param>
        /// <param name="processedFiles">Filter on processed files (optional)</param>
        /// <param name="finalizedFiles">Filter on finalized files (optional)</param>
        /// <param name="estimationTime">Filter on estimation time (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>ApiResponse of TaskExecutionCollection</returns>
        ApiResponse<TaskExecutionCollection> IndexTaskExecutionsByTaskWithHttpInfo (string taskId = default(string), int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string workflowType = default(string), string workflowAction = default(string), string sourceType = default(string), string destinationType = default(string), string status = default(string), string logTime = default(string), string jobStarted = default(string), string jobFinished = default(string), string toProcessSize = default(string), string processedSize = default(string), string toProcessFiles = default(string), string processedFiles = default(string), string finalizedFiles = default(string), string estimationTime = default(string), string bandwidth = default(string));
        /// <summary>
        /// Displays a specific task execution.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_executions / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <returns>TaskExecution</returns>
        TaskExecution ShowTaskExecution (string taskExecutionId);

        /// <summary>
        /// Displays a specific task execution.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_executions / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <returns>ApiResponse of TaskExecution</returns>
        ApiResponse<TaskExecution> ShowTaskExecutionWithHttpInfo (string taskExecutionId);
        /// <summary>
        /// Displays a specific task execution.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_executions / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <returns>TaskExecution</returns>
        TaskExecution ShowTaskExecutionByTask (string taskId, string taskExecutionId);

        /// <summary>
        /// Displays a specific task execution.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_executions / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <returns>ApiResponse of TaskExecution</returns>
        ApiResponse<TaskExecution> ShowTaskExecutionByTaskWithHttpInfo (string taskId, string taskExecutionId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskExecutionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Lists all task executions.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_executions / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="completeList">If &#x60;false&#x60;, only includes the last correct execution of a task. (optional, default to true)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="workflowType">Filter on task workflow type (optional)</param>
        /// <param name="workflowAction">Filter on task workflow action (optional)</param>
        /// <param name="sourceType">Filter on task source type (optional)</param>
        /// <param name="destinationType">Filter on task destination type (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="logTime">Filter on log time (optional)</param>
        /// <param name="jobStarted">Filter on job started (optional)</param>
        /// <param name="jobFinished">Filter on job finished (optional)</param>
        /// <param name="creationDate">Filter on creation date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="toProcessSize">Filter on to process size (optional)</param>
        /// <param name="processedSize">Filter on processed size (optional)</param>
        /// <param name="toProcessFiles">Filter on to process files (optional)</param>
        /// <param name="processedFiles">Filter on processed files (optional)</param>
        /// <param name="finalizedFiles">Filter on finalized files (optional)</param>
        /// <param name="estimationTime">Filter on estimation time (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>Task of TaskExecutionCollection</returns>
        System.Threading.Tasks.Task<TaskExecutionCollection> IndexTaskExecutionsAsync (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), bool? completeList = default(bool?), string id = default(string), string taskId = default(string), string name = default(string), string workflowType = default(string), string workflowAction = default(string), string sourceType = default(string), string destinationType = default(string), string status = default(string), string logTime = default(string), string jobStarted = default(string), string jobFinished = default(string), string creationDate = default(string), string modificationDate = default(string), string toProcessSize = default(string), string processedSize = default(string), string toProcessFiles = default(string), string processedFiles = default(string), string finalizedFiles = default(string), string estimationTime = default(string), string bandwidth = default(string));

        /// <summary>
        /// Lists all task executions.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_executions / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="completeList">If &#x60;false&#x60;, only includes the last correct execution of a task. (optional, default to true)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="workflowType">Filter on task workflow type (optional)</param>
        /// <param name="workflowAction">Filter on task workflow action (optional)</param>
        /// <param name="sourceType">Filter on task source type (optional)</param>
        /// <param name="destinationType">Filter on task destination type (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="logTime">Filter on log time (optional)</param>
        /// <param name="jobStarted">Filter on job started (optional)</param>
        /// <param name="jobFinished">Filter on job finished (optional)</param>
        /// <param name="creationDate">Filter on creation date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="toProcessSize">Filter on to process size (optional)</param>
        /// <param name="processedSize">Filter on processed size (optional)</param>
        /// <param name="toProcessFiles">Filter on to process files (optional)</param>
        /// <param name="processedFiles">Filter on processed files (optional)</param>
        /// <param name="finalizedFiles">Filter on finalized files (optional)</param>
        /// <param name="estimationTime">Filter on estimation time (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>Task of ApiResponse (TaskExecutionCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskExecutionCollection>> IndexTaskExecutionsAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), bool? completeList = default(bool?), string id = default(string), string taskId = default(string), string name = default(string), string workflowType = default(string), string workflowAction = default(string), string sourceType = default(string), string destinationType = default(string), string status = default(string), string logTime = default(string), string jobStarted = default(string), string jobFinished = default(string), string creationDate = default(string), string modificationDate = default(string), string toProcessSize = default(string), string processedSize = default(string), string toProcessFiles = default(string), string processedFiles = default(string), string finalizedFiles = default(string), string estimationTime = default(string), string bandwidth = default(string));
        /// <summary>
        /// Lists all task executions.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_executions / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="workflowType">Filter on task workflow type (optional)</param>
        /// <param name="workflowAction">Filter on task workflow action (optional)</param>
        /// <param name="sourceType">Filter on task source type (optional)</param>
        /// <param name="destinationType">Filter on task destination type (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="logTime">Filter on log time (optional)</param>
        /// <param name="jobStarted">Filter on job started (optional)</param>
        /// <param name="jobFinished">Filter on job finished (optional)</param>
        /// <param name="toProcessSize">Filter on to process size (optional)</param>
        /// <param name="processedSize">Filter on processed size (optional)</param>
        /// <param name="toProcessFiles">Filter on to process files (optional)</param>
        /// <param name="processedFiles">Filter on processed files (optional)</param>
        /// <param name="finalizedFiles">Filter on finalized files (optional)</param>
        /// <param name="estimationTime">Filter on estimation time (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>Task of TaskExecutionCollection</returns>
        System.Threading.Tasks.Task<TaskExecutionCollection> IndexTaskExecutionsByTaskAsync (string taskId = default(string), int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string workflowType = default(string), string workflowAction = default(string), string sourceType = default(string), string destinationType = default(string), string status = default(string), string logTime = default(string), string jobStarted = default(string), string jobFinished = default(string), string toProcessSize = default(string), string processedSize = default(string), string toProcessFiles = default(string), string processedFiles = default(string), string finalizedFiles = default(string), string estimationTime = default(string), string bandwidth = default(string));

        /// <summary>
        /// Lists all task executions.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_executions / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="workflowType">Filter on task workflow type (optional)</param>
        /// <param name="workflowAction">Filter on task workflow action (optional)</param>
        /// <param name="sourceType">Filter on task source type (optional)</param>
        /// <param name="destinationType">Filter on task destination type (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="logTime">Filter on log time (optional)</param>
        /// <param name="jobStarted">Filter on job started (optional)</param>
        /// <param name="jobFinished">Filter on job finished (optional)</param>
        /// <param name="toProcessSize">Filter on to process size (optional)</param>
        /// <param name="processedSize">Filter on processed size (optional)</param>
        /// <param name="toProcessFiles">Filter on to process files (optional)</param>
        /// <param name="processedFiles">Filter on processed files (optional)</param>
        /// <param name="finalizedFiles">Filter on finalized files (optional)</param>
        /// <param name="estimationTime">Filter on estimation time (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>Task of ApiResponse (TaskExecutionCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskExecutionCollection>> IndexTaskExecutionsByTaskAsyncWithHttpInfo (string taskId = default(string), int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string workflowType = default(string), string workflowAction = default(string), string sourceType = default(string), string destinationType = default(string), string status = default(string), string logTime = default(string), string jobStarted = default(string), string jobFinished = default(string), string toProcessSize = default(string), string processedSize = default(string), string toProcessFiles = default(string), string processedFiles = default(string), string finalizedFiles = default(string), string estimationTime = default(string), string bandwidth = default(string));
        /// <summary>
        /// Displays a specific task execution.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_executions / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <returns>Task of TaskExecution</returns>
        System.Threading.Tasks.Task<TaskExecution> ShowTaskExecutionAsync (string taskExecutionId);

        /// <summary>
        /// Displays a specific task execution.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_executions / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <returns>Task of ApiResponse (TaskExecution)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskExecution>> ShowTaskExecutionAsyncWithHttpInfo (string taskExecutionId);
        /// <summary>
        /// Displays a specific task execution.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_executions / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <returns>Task of TaskExecution</returns>
        System.Threading.Tasks.Task<TaskExecution> ShowTaskExecutionByTaskAsync (string taskId, string taskExecutionId);

        /// <summary>
        /// Displays a specific task execution.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_executions / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <returns>Task of ApiResponse (TaskExecution)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskExecution>> ShowTaskExecutionByTaskAsyncWithHttpInfo (string taskId, string taskExecutionId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskExecutionsApi : ITaskExecutionsApiSync, ITaskExecutionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TaskExecutionsApi : ITaskExecutionsApi
    {
        private Io.Nodeum.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskExecutionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskExecutionsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskExecutionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskExecutionsApi(String basePath)
        {
            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                new Io.Nodeum.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskExecutionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TaskExecutionsApi(Io.Nodeum.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskExecutionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TaskExecutionsApi(Io.Nodeum.Sdk.Client.ISynchronousClient client,Io.Nodeum.Sdk.Client.IAsynchronousClient asyncClient, Io.Nodeum.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Io.Nodeum.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Lists all task executions. **API Key Scope**: task_executions / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="completeList">If &#x60;false&#x60;, only includes the last correct execution of a task. (optional, default to true)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="workflowType">Filter on task workflow type (optional)</param>
        /// <param name="workflowAction">Filter on task workflow action (optional)</param>
        /// <param name="sourceType">Filter on task source type (optional)</param>
        /// <param name="destinationType">Filter on task destination type (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="logTime">Filter on log time (optional)</param>
        /// <param name="jobStarted">Filter on job started (optional)</param>
        /// <param name="jobFinished">Filter on job finished (optional)</param>
        /// <param name="creationDate">Filter on creation date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="toProcessSize">Filter on to process size (optional)</param>
        /// <param name="processedSize">Filter on processed size (optional)</param>
        /// <param name="toProcessFiles">Filter on to process files (optional)</param>
        /// <param name="processedFiles">Filter on processed files (optional)</param>
        /// <param name="finalizedFiles">Filter on finalized files (optional)</param>
        /// <param name="estimationTime">Filter on estimation time (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>TaskExecutionCollection</returns>
        public TaskExecutionCollection IndexTaskExecutions (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), bool? completeList = default(bool?), string id = default(string), string taskId = default(string), string name = default(string), string workflowType = default(string), string workflowAction = default(string), string sourceType = default(string), string destinationType = default(string), string status = default(string), string logTime = default(string), string jobStarted = default(string), string jobFinished = default(string), string creationDate = default(string), string modificationDate = default(string), string toProcessSize = default(string), string processedSize = default(string), string toProcessFiles = default(string), string processedFiles = default(string), string finalizedFiles = default(string), string estimationTime = default(string), string bandwidth = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TaskExecutionCollection> localVarResponse = IndexTaskExecutionsWithHttpInfo(limit, offset, sortBy, completeList, id, taskId, name, workflowType, workflowAction, sourceType, destinationType, status, logTime, jobStarted, jobFinished, creationDate, modificationDate, toProcessSize, processedSize, toProcessFiles, processedFiles, finalizedFiles, estimationTime, bandwidth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all task executions. **API Key Scope**: task_executions / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="completeList">If &#x60;false&#x60;, only includes the last correct execution of a task. (optional, default to true)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="workflowType">Filter on task workflow type (optional)</param>
        /// <param name="workflowAction">Filter on task workflow action (optional)</param>
        /// <param name="sourceType">Filter on task source type (optional)</param>
        /// <param name="destinationType">Filter on task destination type (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="logTime">Filter on log time (optional)</param>
        /// <param name="jobStarted">Filter on job started (optional)</param>
        /// <param name="jobFinished">Filter on job finished (optional)</param>
        /// <param name="creationDate">Filter on creation date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="toProcessSize">Filter on to process size (optional)</param>
        /// <param name="processedSize">Filter on processed size (optional)</param>
        /// <param name="toProcessFiles">Filter on to process files (optional)</param>
        /// <param name="processedFiles">Filter on processed files (optional)</param>
        /// <param name="finalizedFiles">Filter on finalized files (optional)</param>
        /// <param name="estimationTime">Filter on estimation time (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>ApiResponse of TaskExecutionCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TaskExecutionCollection > IndexTaskExecutionsWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), bool? completeList = default(bool?), string id = default(string), string taskId = default(string), string name = default(string), string workflowType = default(string), string workflowAction = default(string), string sourceType = default(string), string destinationType = default(string), string status = default(string), string logTime = default(string), string jobStarted = default(string), string jobFinished = default(string), string creationDate = default(string), string modificationDate = default(string), string toProcessSize = default(string), string processedSize = default(string), string toProcessFiles = default(string), string processedFiles = default(string), string finalizedFiles = default(string), string estimationTime = default(string), string bandwidth = default(string))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (completeList != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "complete_list", completeList));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "task_id", taskId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (workflowType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "workflow_type", workflowType));
            }
            if (workflowAction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "workflow_action", workflowAction));
            }
            if (sourceType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "source_type", sourceType));
            }
            if (destinationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "destination_type", destinationType));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (logTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "log_time", logTime));
            }
            if (jobStarted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_started", jobStarted));
            }
            if (jobFinished != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_finished", jobFinished));
            }
            if (creationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "creation_date", creationDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (toProcessSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "to_process_size", toProcessSize));
            }
            if (processedSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "processed_size", processedSize));
            }
            if (toProcessFiles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "to_process_files", toProcessFiles));
            }
            if (processedFiles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "processed_files", processedFiles));
            }
            if (finalizedFiles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "finalized_files", finalizedFiles));
            }
            if (estimationTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "estimation_time", estimationTime));
            }
            if (bandwidth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "bandwidth", bandwidth));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TaskExecutionCollection >("/task_executions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTaskExecutions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all task executions. **API Key Scope**: task_executions / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="completeList">If &#x60;false&#x60;, only includes the last correct execution of a task. (optional, default to true)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="workflowType">Filter on task workflow type (optional)</param>
        /// <param name="workflowAction">Filter on task workflow action (optional)</param>
        /// <param name="sourceType">Filter on task source type (optional)</param>
        /// <param name="destinationType">Filter on task destination type (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="logTime">Filter on log time (optional)</param>
        /// <param name="jobStarted">Filter on job started (optional)</param>
        /// <param name="jobFinished">Filter on job finished (optional)</param>
        /// <param name="creationDate">Filter on creation date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="toProcessSize">Filter on to process size (optional)</param>
        /// <param name="processedSize">Filter on processed size (optional)</param>
        /// <param name="toProcessFiles">Filter on to process files (optional)</param>
        /// <param name="processedFiles">Filter on processed files (optional)</param>
        /// <param name="finalizedFiles">Filter on finalized files (optional)</param>
        /// <param name="estimationTime">Filter on estimation time (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>Task of TaskExecutionCollection</returns>
        public async System.Threading.Tasks.Task<TaskExecutionCollection> IndexTaskExecutionsAsync (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), bool? completeList = default(bool?), string id = default(string), string taskId = default(string), string name = default(string), string workflowType = default(string), string workflowAction = default(string), string sourceType = default(string), string destinationType = default(string), string status = default(string), string logTime = default(string), string jobStarted = default(string), string jobFinished = default(string), string creationDate = default(string), string modificationDate = default(string), string toProcessSize = default(string), string processedSize = default(string), string toProcessFiles = default(string), string processedFiles = default(string), string finalizedFiles = default(string), string estimationTime = default(string), string bandwidth = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TaskExecutionCollection> localVarResponse = await IndexTaskExecutionsAsyncWithHttpInfo(limit, offset, sortBy, completeList, id, taskId, name, workflowType, workflowAction, sourceType, destinationType, status, logTime, jobStarted, jobFinished, creationDate, modificationDate, toProcessSize, processedSize, toProcessFiles, processedFiles, finalizedFiles, estimationTime, bandwidth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all task executions. **API Key Scope**: task_executions / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="completeList">If &#x60;false&#x60;, only includes the last correct execution of a task. (optional, default to true)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="workflowType">Filter on task workflow type (optional)</param>
        /// <param name="workflowAction">Filter on task workflow action (optional)</param>
        /// <param name="sourceType">Filter on task source type (optional)</param>
        /// <param name="destinationType">Filter on task destination type (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="logTime">Filter on log time (optional)</param>
        /// <param name="jobStarted">Filter on job started (optional)</param>
        /// <param name="jobFinished">Filter on job finished (optional)</param>
        /// <param name="creationDate">Filter on creation date (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="toProcessSize">Filter on to process size (optional)</param>
        /// <param name="processedSize">Filter on processed size (optional)</param>
        /// <param name="toProcessFiles">Filter on to process files (optional)</param>
        /// <param name="processedFiles">Filter on processed files (optional)</param>
        /// <param name="finalizedFiles">Filter on finalized files (optional)</param>
        /// <param name="estimationTime">Filter on estimation time (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>Task of ApiResponse (TaskExecutionCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TaskExecutionCollection>> IndexTaskExecutionsAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), bool? completeList = default(bool?), string id = default(string), string taskId = default(string), string name = default(string), string workflowType = default(string), string workflowAction = default(string), string sourceType = default(string), string destinationType = default(string), string status = default(string), string logTime = default(string), string jobStarted = default(string), string jobFinished = default(string), string creationDate = default(string), string modificationDate = default(string), string toProcessSize = default(string), string processedSize = default(string), string toProcessFiles = default(string), string processedFiles = default(string), string finalizedFiles = default(string), string estimationTime = default(string), string bandwidth = default(string))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (completeList != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "complete_list", completeList));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "task_id", taskId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (workflowType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "workflow_type", workflowType));
            }
            if (workflowAction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "workflow_action", workflowAction));
            }
            if (sourceType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "source_type", sourceType));
            }
            if (destinationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "destination_type", destinationType));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (logTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "log_time", logTime));
            }
            if (jobStarted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_started", jobStarted));
            }
            if (jobFinished != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_finished", jobFinished));
            }
            if (creationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "creation_date", creationDate));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (toProcessSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "to_process_size", toProcessSize));
            }
            if (processedSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "processed_size", processedSize));
            }
            if (toProcessFiles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "to_process_files", toProcessFiles));
            }
            if (processedFiles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "processed_files", processedFiles));
            }
            if (finalizedFiles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "finalized_files", finalizedFiles));
            }
            if (estimationTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "estimation_time", estimationTime));
            }
            if (bandwidth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "bandwidth", bandwidth));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TaskExecutionCollection>("/task_executions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTaskExecutions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all task executions. **API Key Scope**: task_executions / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="workflowType">Filter on task workflow type (optional)</param>
        /// <param name="workflowAction">Filter on task workflow action (optional)</param>
        /// <param name="sourceType">Filter on task source type (optional)</param>
        /// <param name="destinationType">Filter on task destination type (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="logTime">Filter on log time (optional)</param>
        /// <param name="jobStarted">Filter on job started (optional)</param>
        /// <param name="jobFinished">Filter on job finished (optional)</param>
        /// <param name="toProcessSize">Filter on to process size (optional)</param>
        /// <param name="processedSize">Filter on processed size (optional)</param>
        /// <param name="toProcessFiles">Filter on to process files (optional)</param>
        /// <param name="processedFiles">Filter on processed files (optional)</param>
        /// <param name="finalizedFiles">Filter on finalized files (optional)</param>
        /// <param name="estimationTime">Filter on estimation time (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>TaskExecutionCollection</returns>
        public TaskExecutionCollection IndexTaskExecutionsByTask (string taskId = default(string), int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string workflowType = default(string), string workflowAction = default(string), string sourceType = default(string), string destinationType = default(string), string status = default(string), string logTime = default(string), string jobStarted = default(string), string jobFinished = default(string), string toProcessSize = default(string), string processedSize = default(string), string toProcessFiles = default(string), string processedFiles = default(string), string finalizedFiles = default(string), string estimationTime = default(string), string bandwidth = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TaskExecutionCollection> localVarResponse = IndexTaskExecutionsByTaskWithHttpInfo(taskId, limit, offset, sortBy, id, name, workflowType, workflowAction, sourceType, destinationType, status, logTime, jobStarted, jobFinished, toProcessSize, processedSize, toProcessFiles, processedFiles, finalizedFiles, estimationTime, bandwidth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all task executions. **API Key Scope**: task_executions / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="workflowType">Filter on task workflow type (optional)</param>
        /// <param name="workflowAction">Filter on task workflow action (optional)</param>
        /// <param name="sourceType">Filter on task source type (optional)</param>
        /// <param name="destinationType">Filter on task destination type (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="logTime">Filter on log time (optional)</param>
        /// <param name="jobStarted">Filter on job started (optional)</param>
        /// <param name="jobFinished">Filter on job finished (optional)</param>
        /// <param name="toProcessSize">Filter on to process size (optional)</param>
        /// <param name="processedSize">Filter on processed size (optional)</param>
        /// <param name="toProcessFiles">Filter on to process files (optional)</param>
        /// <param name="processedFiles">Filter on processed files (optional)</param>
        /// <param name="finalizedFiles">Filter on finalized files (optional)</param>
        /// <param name="estimationTime">Filter on estimation time (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>ApiResponse of TaskExecutionCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TaskExecutionCollection > IndexTaskExecutionsByTaskWithHttpInfo (string taskId = default(string), int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string workflowType = default(string), string workflowAction = default(string), string sourceType = default(string), string destinationType = default(string), string status = default(string), string logTime = default(string), string jobStarted = default(string), string jobFinished = default(string), string toProcessSize = default(string), string processedSize = default(string), string toProcessFiles = default(string), string processedFiles = default(string), string finalizedFiles = default(string), string estimationTime = default(string), string bandwidth = default(string))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "task_id", taskId));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (workflowType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "workflow_type", workflowType));
            }
            if (workflowAction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "workflow_action", workflowAction));
            }
            if (sourceType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "source_type", sourceType));
            }
            if (destinationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "destination_type", destinationType));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (logTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "log_time", logTime));
            }
            if (jobStarted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_started", jobStarted));
            }
            if (jobFinished != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_finished", jobFinished));
            }
            if (toProcessSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "to_process_size", toProcessSize));
            }
            if (processedSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "processed_size", processedSize));
            }
            if (toProcessFiles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "to_process_files", toProcessFiles));
            }
            if (processedFiles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "processed_files", processedFiles));
            }
            if (finalizedFiles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "finalized_files", finalizedFiles));
            }
            if (estimationTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "estimation_time", estimationTime));
            }
            if (bandwidth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "bandwidth", bandwidth));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TaskExecutionCollection >("/tasks/{task_id}/task_executions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTaskExecutionsByTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all task executions. **API Key Scope**: task_executions / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="workflowType">Filter on task workflow type (optional)</param>
        /// <param name="workflowAction">Filter on task workflow action (optional)</param>
        /// <param name="sourceType">Filter on task source type (optional)</param>
        /// <param name="destinationType">Filter on task destination type (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="logTime">Filter on log time (optional)</param>
        /// <param name="jobStarted">Filter on job started (optional)</param>
        /// <param name="jobFinished">Filter on job finished (optional)</param>
        /// <param name="toProcessSize">Filter on to process size (optional)</param>
        /// <param name="processedSize">Filter on processed size (optional)</param>
        /// <param name="toProcessFiles">Filter on to process files (optional)</param>
        /// <param name="processedFiles">Filter on processed files (optional)</param>
        /// <param name="finalizedFiles">Filter on finalized files (optional)</param>
        /// <param name="estimationTime">Filter on estimation time (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>Task of TaskExecutionCollection</returns>
        public async System.Threading.Tasks.Task<TaskExecutionCollection> IndexTaskExecutionsByTaskAsync (string taskId = default(string), int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string workflowType = default(string), string workflowAction = default(string), string sourceType = default(string), string destinationType = default(string), string status = default(string), string logTime = default(string), string jobStarted = default(string), string jobFinished = default(string), string toProcessSize = default(string), string processedSize = default(string), string toProcessFiles = default(string), string processedFiles = default(string), string finalizedFiles = default(string), string estimationTime = default(string), string bandwidth = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TaskExecutionCollection> localVarResponse = await IndexTaskExecutionsByTaskAsyncWithHttpInfo(taskId, limit, offset, sortBy, id, name, workflowType, workflowAction, sourceType, destinationType, status, logTime, jobStarted, jobFinished, toProcessSize, processedSize, toProcessFiles, processedFiles, finalizedFiles, estimationTime, bandwidth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all task executions. **API Key Scope**: task_executions / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="workflowType">Filter on task workflow type (optional)</param>
        /// <param name="workflowAction">Filter on task workflow action (optional)</param>
        /// <param name="sourceType">Filter on task source type (optional)</param>
        /// <param name="destinationType">Filter on task destination type (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="logTime">Filter on log time (optional)</param>
        /// <param name="jobStarted">Filter on job started (optional)</param>
        /// <param name="jobFinished">Filter on job finished (optional)</param>
        /// <param name="toProcessSize">Filter on to process size (optional)</param>
        /// <param name="processedSize">Filter on processed size (optional)</param>
        /// <param name="toProcessFiles">Filter on to process files (optional)</param>
        /// <param name="processedFiles">Filter on processed files (optional)</param>
        /// <param name="finalizedFiles">Filter on finalized files (optional)</param>
        /// <param name="estimationTime">Filter on estimation time (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>Task of ApiResponse (TaskExecutionCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TaskExecutionCollection>> IndexTaskExecutionsByTaskAsyncWithHttpInfo (string taskId = default(string), int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string workflowType = default(string), string workflowAction = default(string), string sourceType = default(string), string destinationType = default(string), string status = default(string), string logTime = default(string), string jobStarted = default(string), string jobFinished = default(string), string toProcessSize = default(string), string processedSize = default(string), string toProcessFiles = default(string), string processedFiles = default(string), string finalizedFiles = default(string), string estimationTime = default(string), string bandwidth = default(string))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "task_id", taskId));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (workflowType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "workflow_type", workflowType));
            }
            if (workflowAction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "workflow_action", workflowAction));
            }
            if (sourceType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "source_type", sourceType));
            }
            if (destinationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "destination_type", destinationType));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (logTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "log_time", logTime));
            }
            if (jobStarted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_started", jobStarted));
            }
            if (jobFinished != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_finished", jobFinished));
            }
            if (toProcessSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "to_process_size", toProcessSize));
            }
            if (processedSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "processed_size", processedSize));
            }
            if (toProcessFiles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "to_process_files", toProcessFiles));
            }
            if (processedFiles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "processed_files", processedFiles));
            }
            if (finalizedFiles != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "finalized_files", finalizedFiles));
            }
            if (estimationTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "estimation_time", estimationTime));
            }
            if (bandwidth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "bandwidth", bandwidth));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TaskExecutionCollection>("/tasks/{task_id}/task_executions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTaskExecutionsByTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific task execution. **API Key Scope**: task_executions / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <returns>TaskExecution</returns>
        public TaskExecution ShowTaskExecution (string taskExecutionId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TaskExecution> localVarResponse = ShowTaskExecutionWithHttpInfo(taskExecutionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific task execution. **API Key Scope**: task_executions / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <returns>ApiResponse of TaskExecution</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TaskExecution > ShowTaskExecutionWithHttpInfo (string taskExecutionId)
        {
            // verify the required parameter 'taskExecutionId' is set
            if (taskExecutionId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskExecutionId' when calling TaskExecutionsApi->ShowTaskExecution");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskExecutionId != null)
                localVarRequestOptions.PathParameters.Add("task_execution_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskExecutionId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TaskExecution >("/task_executions/{task_execution_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTaskExecution", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific task execution. **API Key Scope**: task_executions / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <returns>Task of TaskExecution</returns>
        public async System.Threading.Tasks.Task<TaskExecution> ShowTaskExecutionAsync (string taskExecutionId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TaskExecution> localVarResponse = await ShowTaskExecutionAsyncWithHttpInfo(taskExecutionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific task execution. **API Key Scope**: task_executions / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <returns>Task of ApiResponse (TaskExecution)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TaskExecution>> ShowTaskExecutionAsyncWithHttpInfo (string taskExecutionId)
        {
            // verify the required parameter 'taskExecutionId' is set
            if (taskExecutionId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskExecutionId' when calling TaskExecutionsApi->ShowTaskExecution");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskExecutionId != null)
                localVarRequestOptions.PathParameters.Add("task_execution_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskExecutionId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TaskExecution>("/task_executions/{task_execution_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTaskExecution", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific task execution. **API Key Scope**: task_executions / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <returns>TaskExecution</returns>
        public TaskExecution ShowTaskExecutionByTask (string taskId, string taskExecutionId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TaskExecution> localVarResponse = ShowTaskExecutionByTaskWithHttpInfo(taskId, taskExecutionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific task execution. **API Key Scope**: task_executions / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <returns>ApiResponse of TaskExecution</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TaskExecution > ShowTaskExecutionByTaskWithHttpInfo (string taskId, string taskExecutionId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TaskExecutionsApi->ShowTaskExecutionByTask");

            // verify the required parameter 'taskExecutionId' is set
            if (taskExecutionId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskExecutionId' when calling TaskExecutionsApi->ShowTaskExecutionByTask");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (taskExecutionId != null)
                localVarRequestOptions.PathParameters.Add("task_execution_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskExecutionId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TaskExecution >("/tasks/{task_id}/task_executions/{task_execution_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTaskExecutionByTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific task execution. **API Key Scope**: task_executions / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <returns>Task of TaskExecution</returns>
        public async System.Threading.Tasks.Task<TaskExecution> ShowTaskExecutionByTaskAsync (string taskId, string taskExecutionId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TaskExecution> localVarResponse = await ShowTaskExecutionByTaskAsyncWithHttpInfo(taskId, taskExecutionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific task execution. **API Key Scope**: task_executions / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskExecutionId">Numeric ID of task execution.</param>
        /// <returns>Task of ApiResponse (TaskExecution)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TaskExecution>> ShowTaskExecutionByTaskAsyncWithHttpInfo (string taskId, string taskExecutionId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TaskExecutionsApi->ShowTaskExecutionByTask");

            // verify the required parameter 'taskExecutionId' is set
            if (taskExecutionId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskExecutionId' when calling TaskExecutionsApi->ShowTaskExecutionByTask");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (taskExecutionId != null)
                localVarRequestOptions.PathParameters.Add("task_execution_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskExecutionId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TaskExecution>("/tasks/{task_id}/task_executions/{task_execution_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTaskExecutionByTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
