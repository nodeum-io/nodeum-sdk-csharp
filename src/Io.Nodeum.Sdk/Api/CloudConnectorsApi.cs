/* 
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Io.Nodeum.Sdk.Client;
using Io.Nodeum.Sdk.Model;

namespace Io.Nodeum.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICloudConnectorsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new cloud connector.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorBody"></param>
        /// <returns>CloudConnector</returns>
        CloudConnector CreateCloudConnector (CloudConnector cloudConnectorBody);

        /// <summary>
        /// Creates a new cloud connector.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorBody"></param>
        /// <returns>ApiResponse of CloudConnector</returns>
        ApiResponse<CloudConnector> CreateCloudConnectorWithHttpInfo (CloudConnector cloudConnectorBody);
        /// <summary>
        /// Destroys a specific cloud connector.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <returns></returns>
        void DestroyCloudConnector (string cloudConnectorId);

        /// <summary>
        /// Destroys a specific cloud connector.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyCloudConnectorWithHttpInfo (string cloudConnectorId);
        /// <summary>
        /// Lists all cloud connectors.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / index   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="url">Filter on url (optional)</param>
        /// <param name="urlProxy">Filter on url proxy (optional)</param>
        /// <param name="provider">Filter on provider (optional)</param>
        /// <param name="region">Filter on region (optional)</param>
        /// <param name="accessKey">Filter on access key (optional)</param>
        /// <returns>CloudConnectorCollection</returns>
        CloudConnectorCollection IndexCloudConnectors (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string url = default(string), string urlProxy = default(string), string provider = default(string), string region = default(string), string accessKey = default(string));

        /// <summary>
        /// Lists all cloud connectors.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / index   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="url">Filter on url (optional)</param>
        /// <param name="urlProxy">Filter on url proxy (optional)</param>
        /// <param name="provider">Filter on provider (optional)</param>
        /// <param name="region">Filter on region (optional)</param>
        /// <param name="accessKey">Filter on access key (optional)</param>
        /// <returns>ApiResponse of CloudConnectorCollection</returns>
        ApiResponse<CloudConnectorCollection> IndexCloudConnectorsWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string url = default(string), string urlProxy = default(string), string provider = default(string), string region = default(string), string accessKey = default(string));
        /// <summary>
        /// Displays a specific cloud connector.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / show   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <returns>CloudConnector</returns>
        CloudConnector ShowCloudConnector (string cloudConnectorId);

        /// <summary>
        /// Displays a specific cloud connector.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / show   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <returns>ApiResponse of CloudConnector</returns>
        ApiResponse<CloudConnector> ShowCloudConnectorWithHttpInfo (string cloudConnectorId);
        /// <summary>
        /// Test an unsaved cloud connector.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / test
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorBody"></param>
        /// <returns>ActiveJobStatus</returns>
        ActiveJobStatus TestCloudConnector (CloudConnector cloudConnectorBody);

        /// <summary>
        /// Test an unsaved cloud connector.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / test
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorBody"></param>
        /// <returns>ApiResponse of ActiveJobStatus</returns>
        ApiResponse<ActiveJobStatus> TestCloudConnectorWithHttpInfo (CloudConnector cloudConnectorBody);
        /// <summary>
        /// Check result of cloud connector test job.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / test
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">ID of active job</param>
        /// <returns>CloudBucketSimpleCollection</returns>
        CloudBucketSimpleCollection TestResultCloudConnector (string jobId);

        /// <summary>
        /// Check result of cloud connector test job.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / test
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ApiResponse of CloudBucketSimpleCollection</returns>
        ApiResponse<CloudBucketSimpleCollection> TestResultCloudConnectorWithHttpInfo (string jobId);
        /// <summary>
        /// Updates a specific cloud connector.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudConnectorBody"></param>
        /// <returns>CloudConnector</returns>
        CloudConnector UpdateCloudConnector (string cloudConnectorId, CloudConnector cloudConnectorBody);

        /// <summary>
        /// Updates a specific cloud connector.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudConnectorBody"></param>
        /// <returns>ApiResponse of CloudConnector</returns>
        ApiResponse<CloudConnector> UpdateCloudConnectorWithHttpInfo (string cloudConnectorId, CloudConnector cloudConnectorBody);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICloudConnectorsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new cloud connector.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorBody"></param>
        /// <returns>Task of CloudConnector</returns>
        System.Threading.Tasks.Task<CloudConnector> CreateCloudConnectorAsync (CloudConnector cloudConnectorBody);

        /// <summary>
        /// Creates a new cloud connector.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorBody"></param>
        /// <returns>Task of ApiResponse (CloudConnector)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudConnector>> CreateCloudConnectorAsyncWithHttpInfo (CloudConnector cloudConnectorBody);
        /// <summary>
        /// Destroys a specific cloud connector.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyCloudConnectorAsync (string cloudConnectorId);

        /// <summary>
        /// Destroys a specific cloud connector.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyCloudConnectorAsyncWithHttpInfo (string cloudConnectorId);
        /// <summary>
        /// Lists all cloud connectors.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / index   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="url">Filter on url (optional)</param>
        /// <param name="urlProxy">Filter on url proxy (optional)</param>
        /// <param name="provider">Filter on provider (optional)</param>
        /// <param name="region">Filter on region (optional)</param>
        /// <param name="accessKey">Filter on access key (optional)</param>
        /// <returns>Task of CloudConnectorCollection</returns>
        System.Threading.Tasks.Task<CloudConnectorCollection> IndexCloudConnectorsAsync (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string url = default(string), string urlProxy = default(string), string provider = default(string), string region = default(string), string accessKey = default(string));

        /// <summary>
        /// Lists all cloud connectors.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / index   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="url">Filter on url (optional)</param>
        /// <param name="urlProxy">Filter on url proxy (optional)</param>
        /// <param name="provider">Filter on provider (optional)</param>
        /// <param name="region">Filter on region (optional)</param>
        /// <param name="accessKey">Filter on access key (optional)</param>
        /// <returns>Task of ApiResponse (CloudConnectorCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudConnectorCollection>> IndexCloudConnectorsAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string url = default(string), string urlProxy = default(string), string provider = default(string), string region = default(string), string accessKey = default(string));
        /// <summary>
        /// Displays a specific cloud connector.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / show   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <returns>Task of CloudConnector</returns>
        System.Threading.Tasks.Task<CloudConnector> ShowCloudConnectorAsync (string cloudConnectorId);

        /// <summary>
        /// Displays a specific cloud connector.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / show   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <returns>Task of ApiResponse (CloudConnector)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudConnector>> ShowCloudConnectorAsyncWithHttpInfo (string cloudConnectorId);
        /// <summary>
        /// Test an unsaved cloud connector.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / test
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorBody"></param>
        /// <returns>Task of ActiveJobStatus</returns>
        System.Threading.Tasks.Task<ActiveJobStatus> TestCloudConnectorAsync (CloudConnector cloudConnectorBody);

        /// <summary>
        /// Test an unsaved cloud connector.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / test
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorBody"></param>
        /// <returns>Task of ApiResponse (ActiveJobStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActiveJobStatus>> TestCloudConnectorAsyncWithHttpInfo (CloudConnector cloudConnectorBody);
        /// <summary>
        /// Check result of cloud connector test job.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / test
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of CloudBucketSimpleCollection</returns>
        System.Threading.Tasks.Task<CloudBucketSimpleCollection> TestResultCloudConnectorAsync (string jobId);

        /// <summary>
        /// Check result of cloud connector test job.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / test
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ApiResponse (CloudBucketSimpleCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudBucketSimpleCollection>> TestResultCloudConnectorAsyncWithHttpInfo (string jobId);
        /// <summary>
        /// Updates a specific cloud connector.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudConnectorBody"></param>
        /// <returns>Task of CloudConnector</returns>
        System.Threading.Tasks.Task<CloudConnector> UpdateCloudConnectorAsync (string cloudConnectorId, CloudConnector cloudConnectorBody);

        /// <summary>
        /// Updates a specific cloud connector.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_connectors / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudConnectorBody"></param>
        /// <returns>Task of ApiResponse (CloudConnector)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudConnector>> UpdateCloudConnectorAsyncWithHttpInfo (string cloudConnectorId, CloudConnector cloudConnectorBody);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICloudConnectorsApi : ICloudConnectorsApiSync, ICloudConnectorsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CloudConnectorsApi : ICloudConnectorsApi
    {
        private Io.Nodeum.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CloudConnectorsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CloudConnectorsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CloudConnectorsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CloudConnectorsApi(String basePath)
        {
            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                new Io.Nodeum.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CloudConnectorsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CloudConnectorsApi(Io.Nodeum.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CloudConnectorsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CloudConnectorsApi(Io.Nodeum.Sdk.Client.ISynchronousClient client,Io.Nodeum.Sdk.Client.IAsynchronousClient asyncClient, Io.Nodeum.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Io.Nodeum.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a new cloud connector. **API Key Scope**: cloud_connectors / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorBody"></param>
        /// <returns>CloudConnector</returns>
        public CloudConnector CreateCloudConnector (CloudConnector cloudConnectorBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudConnector> localVarResponse = CreateCloudConnectorWithHttpInfo(cloudConnectorBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new cloud connector. **API Key Scope**: cloud_connectors / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorBody"></param>
        /// <returns>ApiResponse of CloudConnector</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< CloudConnector > CreateCloudConnectorWithHttpInfo (CloudConnector cloudConnectorBody)
        {
            // verify the required parameter 'cloudConnectorBody' is set
            if (cloudConnectorBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudConnectorBody' when calling CloudConnectorsApi->CreateCloudConnector");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = cloudConnectorBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< CloudConnector >("/cloud_connectors", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCloudConnector", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new cloud connector. **API Key Scope**: cloud_connectors / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorBody"></param>
        /// <returns>Task of CloudConnector</returns>
        public async System.Threading.Tasks.Task<CloudConnector> CreateCloudConnectorAsync (CloudConnector cloudConnectorBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudConnector> localVarResponse = await CreateCloudConnectorAsyncWithHttpInfo(cloudConnectorBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new cloud connector. **API Key Scope**: cloud_connectors / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorBody"></param>
        /// <returns>Task of ApiResponse (CloudConnector)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<CloudConnector>> CreateCloudConnectorAsyncWithHttpInfo (CloudConnector cloudConnectorBody)
        {
            // verify the required parameter 'cloudConnectorBody' is set
            if (cloudConnectorBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudConnectorBody' when calling CloudConnectorsApi->CreateCloudConnector");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = cloudConnectorBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CloudConnector>("/cloud_connectors", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCloudConnector", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific cloud connector. **API Key Scope**: cloud_connectors / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <returns></returns>
        public void DestroyCloudConnector (string cloudConnectorId)
        {
             DestroyCloudConnectorWithHttpInfo(cloudConnectorId);
        }

        /// <summary>
        /// Destroys a specific cloud connector. **API Key Scope**: cloud_connectors / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse<Object> DestroyCloudConnectorWithHttpInfo (string cloudConnectorId)
        {
            // verify the required parameter 'cloudConnectorId' is set
            if (cloudConnectorId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudConnectorId' when calling CloudConnectorsApi->DestroyCloudConnector");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cloudConnectorId != null)
                localVarRequestOptions.PathParameters.Add("cloud_connector_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudConnectorId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/cloud_connectors/{cloud_connector_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyCloudConnector", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific cloud connector. **API Key Scope**: cloud_connectors / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyCloudConnectorAsync (string cloudConnectorId)
        {
             await DestroyCloudConnectorAsyncWithHttpInfo(cloudConnectorId);

        }

        /// <summary>
        /// Destroys a specific cloud connector. **API Key Scope**: cloud_connectors / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Object>> DestroyCloudConnectorAsyncWithHttpInfo (string cloudConnectorId)
        {
            // verify the required parameter 'cloudConnectorId' is set
            if (cloudConnectorId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudConnectorId' when calling CloudConnectorsApi->DestroyCloudConnector");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (cloudConnectorId != null)
                localVarRequestOptions.PathParameters.Add("cloud_connector_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudConnectorId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/cloud_connectors/{cloud_connector_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyCloudConnector", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all cloud connectors. **API Key Scope**: cloud_connectors / index   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="url">Filter on url (optional)</param>
        /// <param name="urlProxy">Filter on url proxy (optional)</param>
        /// <param name="provider">Filter on provider (optional)</param>
        /// <param name="region">Filter on region (optional)</param>
        /// <param name="accessKey">Filter on access key (optional)</param>
        /// <returns>CloudConnectorCollection</returns>
        public CloudConnectorCollection IndexCloudConnectors (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string url = default(string), string urlProxy = default(string), string provider = default(string), string region = default(string), string accessKey = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudConnectorCollection> localVarResponse = IndexCloudConnectorsWithHttpInfo(limit, offset, sortBy, id, name, url, urlProxy, provider, region, accessKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all cloud connectors. **API Key Scope**: cloud_connectors / index   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="url">Filter on url (optional)</param>
        /// <param name="urlProxy">Filter on url proxy (optional)</param>
        /// <param name="provider">Filter on provider (optional)</param>
        /// <param name="region">Filter on region (optional)</param>
        /// <param name="accessKey">Filter on access key (optional)</param>
        /// <returns>ApiResponse of CloudConnectorCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< CloudConnectorCollection > IndexCloudConnectorsWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string url = default(string), string urlProxy = default(string), string provider = default(string), string region = default(string), string accessKey = default(string))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (url != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            }
            if (urlProxy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "url_proxy", urlProxy));
            }
            if (provider != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "provider", provider));
            }
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (accessKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_key", accessKey));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< CloudConnectorCollection >("/cloud_connectors", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexCloudConnectors", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all cloud connectors. **API Key Scope**: cloud_connectors / index   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="url">Filter on url (optional)</param>
        /// <param name="urlProxy">Filter on url proxy (optional)</param>
        /// <param name="provider">Filter on provider (optional)</param>
        /// <param name="region">Filter on region (optional)</param>
        /// <param name="accessKey">Filter on access key (optional)</param>
        /// <returns>Task of CloudConnectorCollection</returns>
        public async System.Threading.Tasks.Task<CloudConnectorCollection> IndexCloudConnectorsAsync (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string url = default(string), string urlProxy = default(string), string provider = default(string), string region = default(string), string accessKey = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudConnectorCollection> localVarResponse = await IndexCloudConnectorsAsyncWithHttpInfo(limit, offset, sortBy, id, name, url, urlProxy, provider, region, accessKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all cloud connectors. **API Key Scope**: cloud_connectors / index   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="url">Filter on url (optional)</param>
        /// <param name="urlProxy">Filter on url proxy (optional)</param>
        /// <param name="provider">Filter on provider (optional)</param>
        /// <param name="region">Filter on region (optional)</param>
        /// <param name="accessKey">Filter on access key (optional)</param>
        /// <returns>Task of ApiResponse (CloudConnectorCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<CloudConnectorCollection>> IndexCloudConnectorsAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string url = default(string), string urlProxy = default(string), string provider = default(string), string region = default(string), string accessKey = default(string))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (url != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            }
            if (urlProxy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "url_proxy", urlProxy));
            }
            if (provider != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "provider", provider));
            }
            if (region != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "region", region));
            }
            if (accessKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "access_key", accessKey));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CloudConnectorCollection>("/cloud_connectors", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexCloudConnectors", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific cloud connector. **API Key Scope**: cloud_connectors / show   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <returns>CloudConnector</returns>
        public CloudConnector ShowCloudConnector (string cloudConnectorId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudConnector> localVarResponse = ShowCloudConnectorWithHttpInfo(cloudConnectorId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific cloud connector. **API Key Scope**: cloud_connectors / show   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <returns>ApiResponse of CloudConnector</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< CloudConnector > ShowCloudConnectorWithHttpInfo (string cloudConnectorId)
        {
            // verify the required parameter 'cloudConnectorId' is set
            if (cloudConnectorId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudConnectorId' when calling CloudConnectorsApi->ShowCloudConnector");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cloudConnectorId != null)
                localVarRequestOptions.PathParameters.Add("cloud_connector_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudConnectorId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< CloudConnector >("/cloud_connectors/{cloud_connector_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowCloudConnector", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific cloud connector. **API Key Scope**: cloud_connectors / show   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <returns>Task of CloudConnector</returns>
        public async System.Threading.Tasks.Task<CloudConnector> ShowCloudConnectorAsync (string cloudConnectorId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudConnector> localVarResponse = await ShowCloudConnectorAsyncWithHttpInfo(cloudConnectorId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific cloud connector. **API Key Scope**: cloud_connectors / show   Optional API Key Explicit Scope: cloud_connectors / get_secret_key
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <returns>Task of ApiResponse (CloudConnector)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<CloudConnector>> ShowCloudConnectorAsyncWithHttpInfo (string cloudConnectorId)
        {
            // verify the required parameter 'cloudConnectorId' is set
            if (cloudConnectorId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudConnectorId' when calling CloudConnectorsApi->ShowCloudConnector");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (cloudConnectorId != null)
                localVarRequestOptions.PathParameters.Add("cloud_connector_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudConnectorId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CloudConnector>("/cloud_connectors/{cloud_connector_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowCloudConnector", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test an unsaved cloud connector. **API Key Scope**: cloud_connectors / test
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorBody"></param>
        /// <returns>ActiveJobStatus</returns>
        public ActiveJobStatus TestCloudConnector (CloudConnector cloudConnectorBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus> localVarResponse = TestCloudConnectorWithHttpInfo(cloudConnectorBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Test an unsaved cloud connector. **API Key Scope**: cloud_connectors / test
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorBody"></param>
        /// <returns>ApiResponse of ActiveJobStatus</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ActiveJobStatus > TestCloudConnectorWithHttpInfo (CloudConnector cloudConnectorBody)
        {
            // verify the required parameter 'cloudConnectorBody' is set
            if (cloudConnectorBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudConnectorBody' when calling CloudConnectorsApi->TestCloudConnector");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = cloudConnectorBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< ActiveJobStatus >("/cloud_connectors/-/test", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestCloudConnector", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test an unsaved cloud connector. **API Key Scope**: cloud_connectors / test
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorBody"></param>
        /// <returns>Task of ActiveJobStatus</returns>
        public async System.Threading.Tasks.Task<ActiveJobStatus> TestCloudConnectorAsync (CloudConnector cloudConnectorBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus> localVarResponse = await TestCloudConnectorAsyncWithHttpInfo(cloudConnectorBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Test an unsaved cloud connector. **API Key Scope**: cloud_connectors / test
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorBody"></param>
        /// <returns>Task of ApiResponse (ActiveJobStatus)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus>> TestCloudConnectorAsyncWithHttpInfo (CloudConnector cloudConnectorBody)
        {
            // verify the required parameter 'cloudConnectorBody' is set
            if (cloudConnectorBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudConnectorBody' when calling CloudConnectorsApi->TestCloudConnector");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = cloudConnectorBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ActiveJobStatus>("/cloud_connectors/-/test", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestCloudConnector", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check result of cloud connector test job. **API Key Scope**: cloud_connectors / test
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">ID of active job</param>
        /// <returns>CloudBucketSimpleCollection</returns>
        public CloudBucketSimpleCollection TestResultCloudConnector (string jobId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudBucketSimpleCollection> localVarResponse = TestResultCloudConnectorWithHttpInfo(jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check result of cloud connector test job. **API Key Scope**: cloud_connectors / test
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ApiResponse of CloudBucketSimpleCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< CloudBucketSimpleCollection > TestResultCloudConnectorWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'jobId' when calling CloudConnectorsApi->TestResultCloudConnector");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed",
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< CloudBucketSimpleCollection >("/cloud_connectors/-/test", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestResultCloudConnector", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check result of cloud connector test job. **API Key Scope**: cloud_connectors / test
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of CloudBucketSimpleCollection</returns>
        public async System.Threading.Tasks.Task<CloudBucketSimpleCollection> TestResultCloudConnectorAsync (string jobId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudBucketSimpleCollection> localVarResponse = await TestResultCloudConnectorAsyncWithHttpInfo(jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check result of cloud connector test job. **API Key Scope**: cloud_connectors / test
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ApiResponse (CloudBucketSimpleCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<CloudBucketSimpleCollection>> TestResultCloudConnectorAsyncWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'jobId' when calling CloudConnectorsApi->TestResultCloudConnector");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed",
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CloudBucketSimpleCollection>("/cloud_connectors/-/test", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestResultCloudConnector", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific cloud connector. **API Key Scope**: cloud_connectors / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudConnectorBody"></param>
        /// <returns>CloudConnector</returns>
        public CloudConnector UpdateCloudConnector (string cloudConnectorId, CloudConnector cloudConnectorBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudConnector> localVarResponse = UpdateCloudConnectorWithHttpInfo(cloudConnectorId, cloudConnectorBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific cloud connector. **API Key Scope**: cloud_connectors / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudConnectorBody"></param>
        /// <returns>ApiResponse of CloudConnector</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< CloudConnector > UpdateCloudConnectorWithHttpInfo (string cloudConnectorId, CloudConnector cloudConnectorBody)
        {
            // verify the required parameter 'cloudConnectorId' is set
            if (cloudConnectorId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudConnectorId' when calling CloudConnectorsApi->UpdateCloudConnector");

            // verify the required parameter 'cloudConnectorBody' is set
            if (cloudConnectorBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudConnectorBody' when calling CloudConnectorsApi->UpdateCloudConnector");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cloudConnectorId != null)
                localVarRequestOptions.PathParameters.Add("cloud_connector_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudConnectorId)); // path parameter
            localVarRequestOptions.Data = cloudConnectorBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< CloudConnector >("/cloud_connectors/{cloud_connector_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCloudConnector", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific cloud connector. **API Key Scope**: cloud_connectors / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudConnectorBody"></param>
        /// <returns>Task of CloudConnector</returns>
        public async System.Threading.Tasks.Task<CloudConnector> UpdateCloudConnectorAsync (string cloudConnectorId, CloudConnector cloudConnectorBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudConnector> localVarResponse = await UpdateCloudConnectorAsyncWithHttpInfo(cloudConnectorId, cloudConnectorBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a specific cloud connector. **API Key Scope**: cloud_connectors / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudConnectorBody"></param>
        /// <returns>Task of ApiResponse (CloudConnector)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<CloudConnector>> UpdateCloudConnectorAsyncWithHttpInfo (string cloudConnectorId, CloudConnector cloudConnectorBody)
        {
            // verify the required parameter 'cloudConnectorId' is set
            if (cloudConnectorId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudConnectorId' when calling CloudConnectorsApi->UpdateCloudConnector");

            // verify the required parameter 'cloudConnectorBody' is set
            if (cloudConnectorBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudConnectorBody' when calling CloudConnectorsApi->UpdateCloudConnector");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (cloudConnectorId != null)
                localVarRequestOptions.PathParameters.Add("cloud_connector_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudConnectorId)); // path parameter
            localVarRequestOptions.Data = cloudConnectorBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<CloudConnector>("/cloud_connectors/{cloud_connector_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCloudConnector", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
