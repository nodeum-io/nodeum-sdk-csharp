/* 
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Io.Nodeum.Sdk.Client;
using Io.Nodeum.Sdk.Model;

namespace Io.Nodeum.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new API Key for current user.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: api_keys / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyBody"></param>
        /// <returns>ApiKeyFull</returns>
        ApiKeyFull CreateApiKey (ApiKeyFull apiKeyBody);

        /// <summary>
        /// Creates a new API Key for current user.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: api_keys / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyBody"></param>
        /// <returns>ApiResponse of ApiKeyFull</returns>
        ApiResponse<ApiKeyFull> CreateApiKeyWithHttpInfo (ApiKeyFull apiKeyBody);
        /// <summary>
        /// Creates a new configuration value for current user.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: configurations / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationBody"></param>
        /// <returns>UserConfiguration</returns>
        UserConfiguration CreateConfiguration (UserConfiguration configurationBody);

        /// <summary>
        /// Creates a new configuration value for current user.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: configurations / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationBody"></param>
        /// <returns>ApiResponse of UserConfiguration</returns>
        ApiResponse<UserConfiguration> CreateConfigurationWithHttpInfo (UserConfiguration configurationBody);
        /// <summary>
        /// Destroys a specific API Key.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: api_keys / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyId">Numeric ID of API Key.</param>
        /// <returns></returns>
        void DestroyApiKey (int apiKeyId);

        /// <summary>
        /// Destroys a specific API Key.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: api_keys / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyId">Numeric ID of API Key.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyApiKeyWithHttpInfo (int apiKeyId);
        /// <summary>
        /// Destroys a specific configuration value.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: configurations / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">Numeric ID, or key of configuration.</param>
        /// <returns></returns>
        void DestroyConfiguration (string configurationId);

        /// <summary>
        /// Destroys a specific configuration value.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: configurations / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">Numeric ID, or key of configuration.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyConfigurationWithHttpInfo (string configurationId);
        /// <summary>
        /// Lists all API keys of current user.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: api_keys / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <returns>ApiKeyCollection</returns>
        ApiKeyCollection IndexApiKeys (int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Lists all API keys of current user.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: api_keys / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <returns>ApiResponse of ApiKeyCollection</returns>
        ApiResponse<ApiKeyCollection> IndexApiKeysWithHttpInfo (int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Lists all configurations of current user.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: configurations / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <returns>UserConfigurationCollection</returns>
        UserConfigurationCollection IndexConfigurations (int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Lists all configurations of current user.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: configurations / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <returns>ApiResponse of UserConfigurationCollection</returns>
        ApiResponse<UserConfigurationCollection> IndexConfigurationsWithHttpInfo (int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// List all system groups.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: groups / systems
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SystemGroupCollection</returns>
        SystemGroupCollection IndexSystemGroups ();

        /// <summary>
        /// List all system groups.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: groups / systems
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SystemGroupCollection</returns>
        ApiResponse<SystemGroupCollection> IndexSystemGroupsWithHttpInfo ();
        /// <summary>
        /// List all system users.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: users / systems
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SystemUserCollection</returns>
        SystemUserCollection IndexSystemUsers ();

        /// <summary>
        /// List all system users.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: users / systems
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SystemUserCollection</returns>
        ApiResponse<SystemUserCollection> IndexSystemUsersWithHttpInfo ();
        /// <summary>
        /// Displays a specific API Key with its scopes.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: api_keys / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyId">Numeric ID of API Key.</param>
        /// <returns>ApiKeyFull</returns>
        ApiKeyFull ShowApiKey (int apiKeyId);

        /// <summary>
        /// Displays a specific API Key with its scopes.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: api_keys / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyId">Numeric ID of API Key.</param>
        /// <returns>ApiResponse of ApiKeyFull</returns>
        ApiResponse<ApiKeyFull> ShowApiKeyWithHttpInfo (int apiKeyId);
        /// <summary>
        /// Displays a specific configuration value.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: configurations / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">Numeric ID, or key of configuration.</param>
        /// <returns>UserConfiguration</returns>
        UserConfiguration ShowConfiguration (string configurationId);

        /// <summary>
        /// Displays a specific configuration value.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: configurations / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">Numeric ID, or key of configuration.</param>
        /// <returns>ApiResponse of UserConfiguration</returns>
        ApiResponse<UserConfiguration> ShowConfigurationWithHttpInfo (string configurationId);
        /// <summary>
        /// Updates a specific API Key.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: api_keys / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyId">Numeric ID of API Key.</param>
        /// <param name="apiKeyBody"></param>
        /// <returns>ApiKeyFull</returns>
        ApiKeyFull UpdateApiKey (int apiKeyId, ApiKeyFull apiKeyBody);

        /// <summary>
        /// Updates a specific API Key.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: api_keys / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyId">Numeric ID of API Key.</param>
        /// <param name="apiKeyBody"></param>
        /// <returns>ApiResponse of ApiKeyFull</returns>
        ApiResponse<ApiKeyFull> UpdateApiKeyWithHttpInfo (int apiKeyId, ApiKeyFull apiKeyBody);
        /// <summary>
        /// Updates a specific configuration value.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: configurations / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">Numeric ID, or key of configuration.</param>
        /// <param name="configurationBody"></param>
        /// <returns>UserConfiguration</returns>
        UserConfiguration UpdateConfiguration (string configurationId, UserConfiguration configurationBody);

        /// <summary>
        /// Updates a specific configuration value.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: configurations / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">Numeric ID, or key of configuration.</param>
        /// <param name="configurationBody"></param>
        /// <returns>ApiResponse of UserConfiguration</returns>
        ApiResponse<UserConfiguration> UpdateConfigurationWithHttpInfo (string configurationId, UserConfiguration configurationBody);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new API Key for current user.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: api_keys / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyBody"></param>
        /// <returns>Task of ApiKeyFull</returns>
        System.Threading.Tasks.Task<ApiKeyFull> CreateApiKeyAsync (ApiKeyFull apiKeyBody);

        /// <summary>
        /// Creates a new API Key for current user.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: api_keys / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyBody"></param>
        /// <returns>Task of ApiResponse (ApiKeyFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyFull>> CreateApiKeyAsyncWithHttpInfo (ApiKeyFull apiKeyBody);
        /// <summary>
        /// Creates a new configuration value for current user.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: configurations / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationBody"></param>
        /// <returns>Task of UserConfiguration</returns>
        System.Threading.Tasks.Task<UserConfiguration> CreateConfigurationAsync (UserConfiguration configurationBody);

        /// <summary>
        /// Creates a new configuration value for current user.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: configurations / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationBody"></param>
        /// <returns>Task of ApiResponse (UserConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserConfiguration>> CreateConfigurationAsyncWithHttpInfo (UserConfiguration configurationBody);
        /// <summary>
        /// Destroys a specific API Key.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: api_keys / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyId">Numeric ID of API Key.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyApiKeyAsync (int apiKeyId);

        /// <summary>
        /// Destroys a specific API Key.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: api_keys / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyId">Numeric ID of API Key.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyApiKeyAsyncWithHttpInfo (int apiKeyId);
        /// <summary>
        /// Destroys a specific configuration value.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: configurations / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">Numeric ID, or key of configuration.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyConfigurationAsync (string configurationId);

        /// <summary>
        /// Destroys a specific configuration value.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: configurations / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">Numeric ID, or key of configuration.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyConfigurationAsyncWithHttpInfo (string configurationId);
        /// <summary>
        /// Lists all API keys of current user.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: api_keys / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <returns>Task of ApiKeyCollection</returns>
        System.Threading.Tasks.Task<ApiKeyCollection> IndexApiKeysAsync (int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Lists all API keys of current user.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: api_keys / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <returns>Task of ApiResponse (ApiKeyCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyCollection>> IndexApiKeysAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Lists all configurations of current user.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: configurations / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <returns>Task of UserConfigurationCollection</returns>
        System.Threading.Tasks.Task<UserConfigurationCollection> IndexConfigurationsAsync (int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Lists all configurations of current user.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: configurations / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <returns>Task of ApiResponse (UserConfigurationCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserConfigurationCollection>> IndexConfigurationsAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// List all system groups.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: groups / systems
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SystemGroupCollection</returns>
        System.Threading.Tasks.Task<SystemGroupCollection> IndexSystemGroupsAsync ();

        /// <summary>
        /// List all system groups.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: groups / systems
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SystemGroupCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemGroupCollection>> IndexSystemGroupsAsyncWithHttpInfo ();
        /// <summary>
        /// List all system users.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: users / systems
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SystemUserCollection</returns>
        System.Threading.Tasks.Task<SystemUserCollection> IndexSystemUsersAsync ();

        /// <summary>
        /// List all system users.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: users / systems
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SystemUserCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<SystemUserCollection>> IndexSystemUsersAsyncWithHttpInfo ();
        /// <summary>
        /// Displays a specific API Key with its scopes.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: api_keys / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyId">Numeric ID of API Key.</param>
        /// <returns>Task of ApiKeyFull</returns>
        System.Threading.Tasks.Task<ApiKeyFull> ShowApiKeyAsync (int apiKeyId);

        /// <summary>
        /// Displays a specific API Key with its scopes.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: api_keys / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyId">Numeric ID of API Key.</param>
        /// <returns>Task of ApiResponse (ApiKeyFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyFull>> ShowApiKeyAsyncWithHttpInfo (int apiKeyId);
        /// <summary>
        /// Displays a specific configuration value.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: configurations / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">Numeric ID, or key of configuration.</param>
        /// <returns>Task of UserConfiguration</returns>
        System.Threading.Tasks.Task<UserConfiguration> ShowConfigurationAsync (string configurationId);

        /// <summary>
        /// Displays a specific configuration value.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: configurations / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">Numeric ID, or key of configuration.</param>
        /// <returns>Task of ApiResponse (UserConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserConfiguration>> ShowConfigurationAsyncWithHttpInfo (string configurationId);
        /// <summary>
        /// Updates a specific API Key.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: api_keys / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyId">Numeric ID of API Key.</param>
        /// <param name="apiKeyBody"></param>
        /// <returns>Task of ApiKeyFull</returns>
        System.Threading.Tasks.Task<ApiKeyFull> UpdateApiKeyAsync (int apiKeyId, ApiKeyFull apiKeyBody);

        /// <summary>
        /// Updates a specific API Key.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: api_keys / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyId">Numeric ID of API Key.</param>
        /// <param name="apiKeyBody"></param>
        /// <returns>Task of ApiResponse (ApiKeyFull)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiKeyFull>> UpdateApiKeyAsyncWithHttpInfo (int apiKeyId, ApiKeyFull apiKeyBody);
        /// <summary>
        /// Updates a specific configuration value.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: configurations / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">Numeric ID, or key of configuration.</param>
        /// <param name="configurationBody"></param>
        /// <returns>Task of UserConfiguration</returns>
        System.Threading.Tasks.Task<UserConfiguration> UpdateConfigurationAsync (string configurationId, UserConfiguration configurationBody);

        /// <summary>
        /// Updates a specific configuration value.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: configurations / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">Numeric ID, or key of configuration.</param>
        /// <param name="configurationBody"></param>
        /// <returns>Task of ApiResponse (UserConfiguration)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserConfiguration>> UpdateConfigurationAsyncWithHttpInfo (string configurationId, UserConfiguration configurationBody);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IUsersApiSync, IUsersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private Io.Nodeum.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(String basePath)
        {
            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                new Io.Nodeum.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(Io.Nodeum.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UsersApi(Io.Nodeum.Sdk.Client.ISynchronousClient client,Io.Nodeum.Sdk.Client.IAsynchronousClient asyncClient, Io.Nodeum.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Io.Nodeum.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a new API Key for current user. **API Key Scope**: api_keys / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyBody"></param>
        /// <returns>ApiKeyFull</returns>
        public ApiKeyFull CreateApiKey (ApiKeyFull apiKeyBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ApiKeyFull> localVarResponse = CreateApiKeyWithHttpInfo(apiKeyBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new API Key for current user. **API Key Scope**: api_keys / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyBody"></param>
        /// <returns>ApiResponse of ApiKeyFull</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ApiKeyFull > CreateApiKeyWithHttpInfo (ApiKeyFull apiKeyBody)
        {
            // verify the required parameter 'apiKeyBody' is set
            if (apiKeyBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'apiKeyBody' when calling UsersApi->CreateApiKey");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = apiKeyBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< ApiKeyFull >("/users/me/api_keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateApiKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new API Key for current user. **API Key Scope**: api_keys / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyBody"></param>
        /// <returns>Task of ApiKeyFull</returns>
        public async System.Threading.Tasks.Task<ApiKeyFull> CreateApiKeyAsync (ApiKeyFull apiKeyBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ApiKeyFull> localVarResponse = await CreateApiKeyAsyncWithHttpInfo(apiKeyBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new API Key for current user. **API Key Scope**: api_keys / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyBody"></param>
        /// <returns>Task of ApiResponse (ApiKeyFull)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ApiKeyFull>> CreateApiKeyAsyncWithHttpInfo (ApiKeyFull apiKeyBody)
        {
            // verify the required parameter 'apiKeyBody' is set
            if (apiKeyBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'apiKeyBody' when calling UsersApi->CreateApiKey");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = apiKeyBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiKeyFull>("/users/me/api_keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateApiKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new configuration value for current user. **API Key Scope**: configurations / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationBody"></param>
        /// <returns>UserConfiguration</returns>
        public UserConfiguration CreateConfiguration (UserConfiguration configurationBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<UserConfiguration> localVarResponse = CreateConfigurationWithHttpInfo(configurationBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new configuration value for current user. **API Key Scope**: configurations / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationBody"></param>
        /// <returns>ApiResponse of UserConfiguration</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< UserConfiguration > CreateConfigurationWithHttpInfo (UserConfiguration configurationBody)
        {
            // verify the required parameter 'configurationBody' is set
            if (configurationBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'configurationBody' when calling UsersApi->CreateConfiguration");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = configurationBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< UserConfiguration >("/users/me/configurations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new configuration value for current user. **API Key Scope**: configurations / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationBody"></param>
        /// <returns>Task of UserConfiguration</returns>
        public async System.Threading.Tasks.Task<UserConfiguration> CreateConfigurationAsync (UserConfiguration configurationBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<UserConfiguration> localVarResponse = await CreateConfigurationAsyncWithHttpInfo(configurationBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new configuration value for current user. **API Key Scope**: configurations / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationBody"></param>
        /// <returns>Task of ApiResponse (UserConfiguration)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<UserConfiguration>> CreateConfigurationAsyncWithHttpInfo (UserConfiguration configurationBody)
        {
            // verify the required parameter 'configurationBody' is set
            if (configurationBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'configurationBody' when calling UsersApi->CreateConfiguration");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = configurationBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UserConfiguration>("/users/me/configurations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific API Key. **API Key Scope**: api_keys / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyId">Numeric ID of API Key.</param>
        /// <returns></returns>
        public void DestroyApiKey (int apiKeyId)
        {
             DestroyApiKeyWithHttpInfo(apiKeyId);
        }

        /// <summary>
        /// Destroys a specific API Key. **API Key Scope**: api_keys / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyId">Numeric ID of API Key.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse<Object> DestroyApiKeyWithHttpInfo (int apiKeyId)
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("api_key_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(apiKeyId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/me/api_keys/{api_key_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyApiKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific API Key. **API Key Scope**: api_keys / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyId">Numeric ID of API Key.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyApiKeyAsync (int apiKeyId)
        {
             await DestroyApiKeyAsyncWithHttpInfo(apiKeyId);

        }

        /// <summary>
        /// Destroys a specific API Key. **API Key Scope**: api_keys / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyId">Numeric ID of API Key.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Object>> DestroyApiKeyAsyncWithHttpInfo (int apiKeyId)
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("api_key_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(apiKeyId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/me/api_keys/{api_key_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyApiKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific configuration value. **API Key Scope**: configurations / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">Numeric ID, or key of configuration.</param>
        /// <returns></returns>
        public void DestroyConfiguration (string configurationId)
        {
             DestroyConfigurationWithHttpInfo(configurationId);
        }

        /// <summary>
        /// Destroys a specific configuration value. **API Key Scope**: configurations / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">Numeric ID, or key of configuration.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse<Object> DestroyConfigurationWithHttpInfo (string configurationId)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'configurationId' when calling UsersApi->DestroyConfiguration");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (configurationId != null)
                localVarRequestOptions.PathParameters.Add("configuration_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(configurationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/me/configurations/{configuration_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific configuration value. **API Key Scope**: configurations / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">Numeric ID, or key of configuration.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyConfigurationAsync (string configurationId)
        {
             await DestroyConfigurationAsyncWithHttpInfo(configurationId);

        }

        /// <summary>
        /// Destroys a specific configuration value. **API Key Scope**: configurations / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">Numeric ID, or key of configuration.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Object>> DestroyConfigurationAsyncWithHttpInfo (string configurationId)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'configurationId' when calling UsersApi->DestroyConfiguration");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (configurationId != null)
                localVarRequestOptions.PathParameters.Add("configuration_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(configurationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/me/configurations/{configuration_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all API keys of current user. **API Key Scope**: api_keys / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <returns>ApiKeyCollection</returns>
        public ApiKeyCollection IndexApiKeys (int? limit = default(int?), int? offset = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ApiKeyCollection> localVarResponse = IndexApiKeysWithHttpInfo(limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all API keys of current user. **API Key Scope**: api_keys / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <returns>ApiResponse of ApiKeyCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ApiKeyCollection > IndexApiKeysWithHttpInfo (int? limit = default(int?), int? offset = default(int?))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ApiKeyCollection >("/users/me/api_keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexApiKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all API keys of current user. **API Key Scope**: api_keys / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <returns>Task of ApiKeyCollection</returns>
        public async System.Threading.Tasks.Task<ApiKeyCollection> IndexApiKeysAsync (int? limit = default(int?), int? offset = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ApiKeyCollection> localVarResponse = await IndexApiKeysAsyncWithHttpInfo(limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all API keys of current user. **API Key Scope**: api_keys / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <returns>Task of ApiResponse (ApiKeyCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ApiKeyCollection>> IndexApiKeysAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiKeyCollection>("/users/me/api_keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexApiKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all configurations of current user. **API Key Scope**: configurations / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <returns>UserConfigurationCollection</returns>
        public UserConfigurationCollection IndexConfigurations (int? limit = default(int?), int? offset = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<UserConfigurationCollection> localVarResponse = IndexConfigurationsWithHttpInfo(limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all configurations of current user. **API Key Scope**: configurations / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <returns>ApiResponse of UserConfigurationCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< UserConfigurationCollection > IndexConfigurationsWithHttpInfo (int? limit = default(int?), int? offset = default(int?))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< UserConfigurationCollection >("/users/me/configurations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexConfigurations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all configurations of current user. **API Key Scope**: configurations / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <returns>Task of UserConfigurationCollection</returns>
        public async System.Threading.Tasks.Task<UserConfigurationCollection> IndexConfigurationsAsync (int? limit = default(int?), int? offset = default(int?))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<UserConfigurationCollection> localVarResponse = await IndexConfigurationsAsyncWithHttpInfo(limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all configurations of current user. **API Key Scope**: configurations / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <returns>Task of ApiResponse (UserConfigurationCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<UserConfigurationCollection>> IndexConfigurationsAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserConfigurationCollection>("/users/me/configurations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexConfigurations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all system groups. **API Key Scope**: groups / systems
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SystemGroupCollection</returns>
        public SystemGroupCollection IndexSystemGroups ()
        {
             Io.Nodeum.Sdk.Client.ApiResponse<SystemGroupCollection> localVarResponse = IndexSystemGroupsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all system groups. **API Key Scope**: groups / systems
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SystemGroupCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< SystemGroupCollection > IndexSystemGroupsWithHttpInfo ()
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< SystemGroupCollection >("/groups/-/systems", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexSystemGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all system groups. **API Key Scope**: groups / systems
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SystemGroupCollection</returns>
        public async System.Threading.Tasks.Task<SystemGroupCollection> IndexSystemGroupsAsync ()
        {
             Io.Nodeum.Sdk.Client.ApiResponse<SystemGroupCollection> localVarResponse = await IndexSystemGroupsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all system groups. **API Key Scope**: groups / systems
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SystemGroupCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<SystemGroupCollection>> IndexSystemGroupsAsyncWithHttpInfo ()
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SystemGroupCollection>("/groups/-/systems", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexSystemGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all system users. **API Key Scope**: users / systems
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SystemUserCollection</returns>
        public SystemUserCollection IndexSystemUsers ()
        {
             Io.Nodeum.Sdk.Client.ApiResponse<SystemUserCollection> localVarResponse = IndexSystemUsersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all system users. **API Key Scope**: users / systems
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SystemUserCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< SystemUserCollection > IndexSystemUsersWithHttpInfo ()
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< SystemUserCollection >("/users/-/systems", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexSystemUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all system users. **API Key Scope**: users / systems
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SystemUserCollection</returns>
        public async System.Threading.Tasks.Task<SystemUserCollection> IndexSystemUsersAsync ()
        {
             Io.Nodeum.Sdk.Client.ApiResponse<SystemUserCollection> localVarResponse = await IndexSystemUsersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all system users. **API Key Scope**: users / systems
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SystemUserCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<SystemUserCollection>> IndexSystemUsersAsyncWithHttpInfo ()
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SystemUserCollection>("/users/-/systems", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexSystemUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific API Key with its scopes. **API Key Scope**: api_keys / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyId">Numeric ID of API Key.</param>
        /// <returns>ApiKeyFull</returns>
        public ApiKeyFull ShowApiKey (int apiKeyId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ApiKeyFull> localVarResponse = ShowApiKeyWithHttpInfo(apiKeyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific API Key with its scopes. **API Key Scope**: api_keys / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyId">Numeric ID of API Key.</param>
        /// <returns>ApiResponse of ApiKeyFull</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ApiKeyFull > ShowApiKeyWithHttpInfo (int apiKeyId)
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("api_key_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(apiKeyId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ApiKeyFull >("/users/me/api_keys/{api_key_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowApiKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific API Key with its scopes. **API Key Scope**: api_keys / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyId">Numeric ID of API Key.</param>
        /// <returns>Task of ApiKeyFull</returns>
        public async System.Threading.Tasks.Task<ApiKeyFull> ShowApiKeyAsync (int apiKeyId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ApiKeyFull> localVarResponse = await ShowApiKeyAsyncWithHttpInfo(apiKeyId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific API Key with its scopes. **API Key Scope**: api_keys / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyId">Numeric ID of API Key.</param>
        /// <returns>Task of ApiResponse (ApiKeyFull)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ApiKeyFull>> ShowApiKeyAsyncWithHttpInfo (int apiKeyId)
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("api_key_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(apiKeyId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiKeyFull>("/users/me/api_keys/{api_key_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowApiKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific configuration value. **API Key Scope**: configurations / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">Numeric ID, or key of configuration.</param>
        /// <returns>UserConfiguration</returns>
        public UserConfiguration ShowConfiguration (string configurationId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<UserConfiguration> localVarResponse = ShowConfigurationWithHttpInfo(configurationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific configuration value. **API Key Scope**: configurations / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">Numeric ID, or key of configuration.</param>
        /// <returns>ApiResponse of UserConfiguration</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< UserConfiguration > ShowConfigurationWithHttpInfo (string configurationId)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'configurationId' when calling UsersApi->ShowConfiguration");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (configurationId != null)
                localVarRequestOptions.PathParameters.Add("configuration_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(configurationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< UserConfiguration >("/users/me/configurations/{configuration_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific configuration value. **API Key Scope**: configurations / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">Numeric ID, or key of configuration.</param>
        /// <returns>Task of UserConfiguration</returns>
        public async System.Threading.Tasks.Task<UserConfiguration> ShowConfigurationAsync (string configurationId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<UserConfiguration> localVarResponse = await ShowConfigurationAsyncWithHttpInfo(configurationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific configuration value. **API Key Scope**: configurations / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">Numeric ID, or key of configuration.</param>
        /// <returns>Task of ApiResponse (UserConfiguration)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<UserConfiguration>> ShowConfigurationAsyncWithHttpInfo (string configurationId)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'configurationId' when calling UsersApi->ShowConfiguration");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (configurationId != null)
                localVarRequestOptions.PathParameters.Add("configuration_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(configurationId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserConfiguration>("/users/me/configurations/{configuration_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific API Key. **API Key Scope**: api_keys / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyId">Numeric ID of API Key.</param>
        /// <param name="apiKeyBody"></param>
        /// <returns>ApiKeyFull</returns>
        public ApiKeyFull UpdateApiKey (int apiKeyId, ApiKeyFull apiKeyBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ApiKeyFull> localVarResponse = UpdateApiKeyWithHttpInfo(apiKeyId, apiKeyBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific API Key. **API Key Scope**: api_keys / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyId">Numeric ID of API Key.</param>
        /// <param name="apiKeyBody"></param>
        /// <returns>ApiResponse of ApiKeyFull</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ApiKeyFull > UpdateApiKeyWithHttpInfo (int apiKeyId, ApiKeyFull apiKeyBody)
        {
            // verify the required parameter 'apiKeyBody' is set
            if (apiKeyBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'apiKeyBody' when calling UsersApi->UpdateApiKey");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("api_key_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(apiKeyId)); // path parameter
            localVarRequestOptions.Data = apiKeyBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< ApiKeyFull >("/users/me/api_keys/{api_key_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateApiKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific API Key. **API Key Scope**: api_keys / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyId">Numeric ID of API Key.</param>
        /// <param name="apiKeyBody"></param>
        /// <returns>Task of ApiKeyFull</returns>
        public async System.Threading.Tasks.Task<ApiKeyFull> UpdateApiKeyAsync (int apiKeyId, ApiKeyFull apiKeyBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ApiKeyFull> localVarResponse = await UpdateApiKeyAsyncWithHttpInfo(apiKeyId, apiKeyBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a specific API Key. **API Key Scope**: api_keys / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKeyId">Numeric ID of API Key.</param>
        /// <param name="apiKeyBody"></param>
        /// <returns>Task of ApiResponse (ApiKeyFull)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ApiKeyFull>> UpdateApiKeyAsyncWithHttpInfo (int apiKeyId, ApiKeyFull apiKeyBody)
        {
            // verify the required parameter 'apiKeyBody' is set
            if (apiKeyBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'apiKeyBody' when calling UsersApi->UpdateApiKey");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("api_key_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(apiKeyId)); // path parameter
            localVarRequestOptions.Data = apiKeyBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiKeyFull>("/users/me/api_keys/{api_key_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateApiKey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific configuration value. **API Key Scope**: configurations / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">Numeric ID, or key of configuration.</param>
        /// <param name="configurationBody"></param>
        /// <returns>UserConfiguration</returns>
        public UserConfiguration UpdateConfiguration (string configurationId, UserConfiguration configurationBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<UserConfiguration> localVarResponse = UpdateConfigurationWithHttpInfo(configurationId, configurationBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific configuration value. **API Key Scope**: configurations / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">Numeric ID, or key of configuration.</param>
        /// <param name="configurationBody"></param>
        /// <returns>ApiResponse of UserConfiguration</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< UserConfiguration > UpdateConfigurationWithHttpInfo (string configurationId, UserConfiguration configurationBody)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'configurationId' when calling UsersApi->UpdateConfiguration");

            // verify the required parameter 'configurationBody' is set
            if (configurationBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'configurationBody' when calling UsersApi->UpdateConfiguration");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (configurationId != null)
                localVarRequestOptions.PathParameters.Add("configuration_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            localVarRequestOptions.Data = configurationBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< UserConfiguration >("/users/me/configurations/{configuration_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific configuration value. **API Key Scope**: configurations / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">Numeric ID, or key of configuration.</param>
        /// <param name="configurationBody"></param>
        /// <returns>Task of UserConfiguration</returns>
        public async System.Threading.Tasks.Task<UserConfiguration> UpdateConfigurationAsync (string configurationId, UserConfiguration configurationBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<UserConfiguration> localVarResponse = await UpdateConfigurationAsyncWithHttpInfo(configurationId, configurationBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a specific configuration value. **API Key Scope**: configurations / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="configurationId">Numeric ID, or key of configuration.</param>
        /// <param name="configurationBody"></param>
        /// <returns>Task of ApiResponse (UserConfiguration)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<UserConfiguration>> UpdateConfigurationAsyncWithHttpInfo (string configurationId, UserConfiguration configurationBody)
        {
            // verify the required parameter 'configurationId' is set
            if (configurationId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'configurationId' when calling UsersApi->UpdateConfiguration");

            // verify the required parameter 'configurationBody' is set
            if (configurationBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'configurationBody' when calling UsersApi->UpdateConfiguration");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (configurationId != null)
                localVarRequestOptions.PathParameters.Add("configuration_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(configurationId)); // path parameter
            localVarRequestOptions.Data = configurationBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<UserConfiguration>("/users/me/configurations/{configuration_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateConfiguration", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
