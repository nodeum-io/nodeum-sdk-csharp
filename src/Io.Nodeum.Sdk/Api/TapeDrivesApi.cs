/* 
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Io.Nodeum.Sdk.Client;
using Io.Nodeum.Sdk.Model;

namespace Io.Nodeum.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITapeDrivesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveBody"></param>
        /// <returns>TapeDrive</returns>
        TapeDrive CreateTapeDriveByTapeLibrary (string tapeLibraryId, TapeDrive tapeDriveBody);

        /// <summary>
        /// Creates a new tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveBody"></param>
        /// <returns>ApiResponse of TapeDrive</returns>
        ApiResponse<TapeDrive> CreateTapeDriveByTapeLibraryWithHttpInfo (string tapeLibraryId, TapeDrive tapeDriveBody);
        /// <summary>
        /// Destroys a specific tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns></returns>
        void DestroyTapeDrive (string tapeDriveId);

        /// <summary>
        /// Destroys a specific tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyTapeDriveWithHttpInfo (string tapeDriveId);
        /// <summary>
        /// Destroys a specific tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns></returns>
        void DestroyTapeDriveByTapeLibrary (string tapeLibraryId, string tapeDriveId);

        /// <summary>
        /// Destroys a specific tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyTapeDriveByTapeLibraryWithHttpInfo (string tapeLibraryId, string tapeDriveId);
        /// <summary>
        /// Lists tape drives devices.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / devices
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>TapeDriveDeviceCollection</returns>
        TapeDriveDeviceCollection IndexTapeDriveDevices (string tapeLibraryId, string jobId);

        /// <summary>
        /// Lists tape drives devices.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / devices
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ApiResponse of TapeDriveDeviceCollection</returns>
        ApiResponse<TapeDriveDeviceCollection> IndexTapeDriveDevicesWithHttpInfo (string tapeLibraryId, string jobId);
        /// <summary>
        /// Lists all tape drives.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="tapeLibraryId">Filter on tape library id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="serial">Filter on serial (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="scsiAddress">Filter on scsi address (optional)</param>
        /// <param name="vendor">Filter on vendor (optional)</param>
        /// <param name="product">Filter on product (optional)</param>
        /// <param name="firmware">Filter on firmware (optional)</param>
        /// <param name="device">Filter on device (optional)</param>
        /// <param name="sgdevice">Filter on sgdevice (optional)</param>
        /// <param name="libso">Filter on libso (optional)</param>
        /// <param name="acs">Filter on acs (optional)</param>
        /// <param name="lsm">Filter on lsm (optional)</param>
        /// <param name="panel">Filter on panel (optional)</param>
        /// <param name="transport">Filter on transport (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="full">Filter on full (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="useTo">Filter on use to (optional)</param>
        /// <param name="useBy">Filter on use by (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="useFileProcessedSize">Filter on use file processed size (optional)</param>
        /// <param name="useFileSizeToProcess">Filter on use file size to process (optional)</param>
        /// <param name="useFileNameProcessed">Filter on use file name processed (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>TapeDriveCollection</returns>
        TapeDriveCollection IndexTapeDrives (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string tapeLibraryId = default(string), string name = default(string), string serial = default(string), string comment = default(string), string scsiAddress = default(string), string vendor = default(string), string product = default(string), string firmware = default(string), string device = default(string), string sgdevice = default(string), string libso = default(string), string acs = default(string), string lsm = default(string), string panel = default(string), string transport = default(string), string status = default(string), string full = default(string), string mountCount = default(string), string useTo = default(string), string useBy = default(string), string barcode = default(string), string taskId = default(string), string useFileProcessedSize = default(string), string useFileSizeToProcess = default(string), string useFileNameProcessed = default(string), string bandwidth = default(string));

        /// <summary>
        /// Lists all tape drives.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="tapeLibraryId">Filter on tape library id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="serial">Filter on serial (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="scsiAddress">Filter on scsi address (optional)</param>
        /// <param name="vendor">Filter on vendor (optional)</param>
        /// <param name="product">Filter on product (optional)</param>
        /// <param name="firmware">Filter on firmware (optional)</param>
        /// <param name="device">Filter on device (optional)</param>
        /// <param name="sgdevice">Filter on sgdevice (optional)</param>
        /// <param name="libso">Filter on libso (optional)</param>
        /// <param name="acs">Filter on acs (optional)</param>
        /// <param name="lsm">Filter on lsm (optional)</param>
        /// <param name="panel">Filter on panel (optional)</param>
        /// <param name="transport">Filter on transport (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="full">Filter on full (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="useTo">Filter on use to (optional)</param>
        /// <param name="useBy">Filter on use by (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="useFileProcessedSize">Filter on use file processed size (optional)</param>
        /// <param name="useFileSizeToProcess">Filter on use file size to process (optional)</param>
        /// <param name="useFileNameProcessed">Filter on use file name processed (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>ApiResponse of TapeDriveCollection</returns>
        ApiResponse<TapeDriveCollection> IndexTapeDrivesWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string tapeLibraryId = default(string), string name = default(string), string serial = default(string), string comment = default(string), string scsiAddress = default(string), string vendor = default(string), string product = default(string), string firmware = default(string), string device = default(string), string sgdevice = default(string), string libso = default(string), string acs = default(string), string lsm = default(string), string panel = default(string), string transport = default(string), string status = default(string), string full = default(string), string mountCount = default(string), string useTo = default(string), string useBy = default(string), string barcode = default(string), string taskId = default(string), string useFileProcessedSize = default(string), string useFileSizeToProcess = default(string), string useFileNameProcessed = default(string), string bandwidth = default(string));
        /// <summary>
        /// Lists all tape drives.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="serial">Filter on serial (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="scsiAddress">Filter on scsi address (optional)</param>
        /// <param name="vendor">Filter on vendor (optional)</param>
        /// <param name="product">Filter on product (optional)</param>
        /// <param name="firmware">Filter on firmware (optional)</param>
        /// <param name="device">Filter on device (optional)</param>
        /// <param name="sgdevice">Filter on sgdevice (optional)</param>
        /// <param name="libso">Filter on libso (optional)</param>
        /// <param name="acs">Filter on acs (optional)</param>
        /// <param name="lsm">Filter on lsm (optional)</param>
        /// <param name="panel">Filter on panel (optional)</param>
        /// <param name="transport">Filter on transport (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="full">Filter on full (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="useTo">Filter on use to (optional)</param>
        /// <param name="useBy">Filter on use by (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="useFileProcessedSize">Filter on use file processed size (optional)</param>
        /// <param name="useFileSizeToProcess">Filter on use file size to process (optional)</param>
        /// <param name="useFileNameProcessed">Filter on use file name processed (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>TapeDriveCollection</returns>
        TapeDriveCollection IndexTapeDrivesByTapeLibrary (string tapeLibraryId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string serial = default(string), string comment = default(string), string scsiAddress = default(string), string vendor = default(string), string product = default(string), string firmware = default(string), string device = default(string), string sgdevice = default(string), string libso = default(string), string acs = default(string), string lsm = default(string), string panel = default(string), string transport = default(string), string status = default(string), string full = default(string), string mountCount = default(string), string useTo = default(string), string useBy = default(string), string barcode = default(string), string taskId = default(string), string useFileProcessedSize = default(string), string useFileSizeToProcess = default(string), string useFileNameProcessed = default(string), string bandwidth = default(string));

        /// <summary>
        /// Lists all tape drives.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="serial">Filter on serial (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="scsiAddress">Filter on scsi address (optional)</param>
        /// <param name="vendor">Filter on vendor (optional)</param>
        /// <param name="product">Filter on product (optional)</param>
        /// <param name="firmware">Filter on firmware (optional)</param>
        /// <param name="device">Filter on device (optional)</param>
        /// <param name="sgdevice">Filter on sgdevice (optional)</param>
        /// <param name="libso">Filter on libso (optional)</param>
        /// <param name="acs">Filter on acs (optional)</param>
        /// <param name="lsm">Filter on lsm (optional)</param>
        /// <param name="panel">Filter on panel (optional)</param>
        /// <param name="transport">Filter on transport (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="full">Filter on full (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="useTo">Filter on use to (optional)</param>
        /// <param name="useBy">Filter on use by (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="useFileProcessedSize">Filter on use file processed size (optional)</param>
        /// <param name="useFileSizeToProcess">Filter on use file size to process (optional)</param>
        /// <param name="useFileNameProcessed">Filter on use file name processed (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>ApiResponse of TapeDriveCollection</returns>
        ApiResponse<TapeDriveCollection> IndexTapeDrivesByTapeLibraryWithHttpInfo (string tapeLibraryId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string serial = default(string), string comment = default(string), string scsiAddress = default(string), string vendor = default(string), string product = default(string), string firmware = default(string), string device = default(string), string sgdevice = default(string), string libso = default(string), string acs = default(string), string lsm = default(string), string panel = default(string), string transport = default(string), string status = default(string), string full = default(string), string mountCount = default(string), string useTo = default(string), string useBy = default(string), string barcode = default(string), string taskId = default(string), string useFileProcessedSize = default(string), string useFileSizeToProcess = default(string), string useFileNameProcessed = default(string), string bandwidth = default(string));
        /// <summary>
        /// Displays a specific tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>TapeDrive</returns>
        TapeDrive ShowTapeDrive (string tapeDriveId);

        /// <summary>
        /// Displays a specific tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>ApiResponse of TapeDrive</returns>
        ApiResponse<TapeDrive> ShowTapeDriveWithHttpInfo (string tapeDriveId);
        /// <summary>
        /// Displays a specific tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>TapeDrive</returns>
        TapeDrive ShowTapeDriveByTapeLibrary (string tapeLibraryId, string tapeDriveId);

        /// <summary>
        /// Displays a specific tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>ApiResponse of TapeDrive</returns>
        ApiResponse<TapeDrive> ShowTapeDriveByTapeLibraryWithHttpInfo (string tapeLibraryId, string tapeDriveId);
        /// <summary>
        /// Updates a specific tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <param name="tapeDriveBody"></param>
        /// <returns>TapeDrive</returns>
        TapeDrive UpdateTapeDrive (string tapeDriveId, TapeDrive tapeDriveBody);

        /// <summary>
        /// Updates a specific tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <param name="tapeDriveBody"></param>
        /// <returns>ApiResponse of TapeDrive</returns>
        ApiResponse<TapeDrive> UpdateTapeDriveWithHttpInfo (string tapeDriveId, TapeDrive tapeDriveBody);
        /// <summary>
        /// Updates a specific tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <param name="tapeDriveBody"></param>
        /// <returns>TapeDrive</returns>
        TapeDrive UpdateTapeDriveByTapeLibrary (string tapeLibraryId, string tapeDriveId, TapeDrive tapeDriveBody);

        /// <summary>
        /// Updates a specific tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <param name="tapeDriveBody"></param>
        /// <returns>ApiResponse of TapeDrive</returns>
        ApiResponse<TapeDrive> UpdateTapeDriveByTapeLibraryWithHttpInfo (string tapeLibraryId, string tapeDriveId, TapeDrive tapeDriveBody);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITapeDrivesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveBody"></param>
        /// <returns>Task of TapeDrive</returns>
        System.Threading.Tasks.Task<TapeDrive> CreateTapeDriveByTapeLibraryAsync (string tapeLibraryId, TapeDrive tapeDriveBody);

        /// <summary>
        /// Creates a new tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveBody"></param>
        /// <returns>Task of ApiResponse (TapeDrive)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeDrive>> CreateTapeDriveByTapeLibraryAsyncWithHttpInfo (string tapeLibraryId, TapeDrive tapeDriveBody);
        /// <summary>
        /// Destroys a specific tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyTapeDriveAsync (string tapeDriveId);

        /// <summary>
        /// Destroys a specific tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyTapeDriveAsyncWithHttpInfo (string tapeDriveId);
        /// <summary>
        /// Destroys a specific tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyTapeDriveByTapeLibraryAsync (string tapeLibraryId, string tapeDriveId);

        /// <summary>
        /// Destroys a specific tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyTapeDriveByTapeLibraryAsyncWithHttpInfo (string tapeLibraryId, string tapeDriveId);
        /// <summary>
        /// Lists tape drives devices.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / devices
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of TapeDriveDeviceCollection</returns>
        System.Threading.Tasks.Task<TapeDriveDeviceCollection> IndexTapeDriveDevicesAsync (string tapeLibraryId, string jobId);

        /// <summary>
        /// Lists tape drives devices.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / devices
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ApiResponse (TapeDriveDeviceCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeDriveDeviceCollection>> IndexTapeDriveDevicesAsyncWithHttpInfo (string tapeLibraryId, string jobId);
        /// <summary>
        /// Lists all tape drives.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="tapeLibraryId">Filter on tape library id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="serial">Filter on serial (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="scsiAddress">Filter on scsi address (optional)</param>
        /// <param name="vendor">Filter on vendor (optional)</param>
        /// <param name="product">Filter on product (optional)</param>
        /// <param name="firmware">Filter on firmware (optional)</param>
        /// <param name="device">Filter on device (optional)</param>
        /// <param name="sgdevice">Filter on sgdevice (optional)</param>
        /// <param name="libso">Filter on libso (optional)</param>
        /// <param name="acs">Filter on acs (optional)</param>
        /// <param name="lsm">Filter on lsm (optional)</param>
        /// <param name="panel">Filter on panel (optional)</param>
        /// <param name="transport">Filter on transport (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="full">Filter on full (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="useTo">Filter on use to (optional)</param>
        /// <param name="useBy">Filter on use by (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="useFileProcessedSize">Filter on use file processed size (optional)</param>
        /// <param name="useFileSizeToProcess">Filter on use file size to process (optional)</param>
        /// <param name="useFileNameProcessed">Filter on use file name processed (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>Task of TapeDriveCollection</returns>
        System.Threading.Tasks.Task<TapeDriveCollection> IndexTapeDrivesAsync (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string tapeLibraryId = default(string), string name = default(string), string serial = default(string), string comment = default(string), string scsiAddress = default(string), string vendor = default(string), string product = default(string), string firmware = default(string), string device = default(string), string sgdevice = default(string), string libso = default(string), string acs = default(string), string lsm = default(string), string panel = default(string), string transport = default(string), string status = default(string), string full = default(string), string mountCount = default(string), string useTo = default(string), string useBy = default(string), string barcode = default(string), string taskId = default(string), string useFileProcessedSize = default(string), string useFileSizeToProcess = default(string), string useFileNameProcessed = default(string), string bandwidth = default(string));

        /// <summary>
        /// Lists all tape drives.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="tapeLibraryId">Filter on tape library id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="serial">Filter on serial (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="scsiAddress">Filter on scsi address (optional)</param>
        /// <param name="vendor">Filter on vendor (optional)</param>
        /// <param name="product">Filter on product (optional)</param>
        /// <param name="firmware">Filter on firmware (optional)</param>
        /// <param name="device">Filter on device (optional)</param>
        /// <param name="sgdevice">Filter on sgdevice (optional)</param>
        /// <param name="libso">Filter on libso (optional)</param>
        /// <param name="acs">Filter on acs (optional)</param>
        /// <param name="lsm">Filter on lsm (optional)</param>
        /// <param name="panel">Filter on panel (optional)</param>
        /// <param name="transport">Filter on transport (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="full">Filter on full (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="useTo">Filter on use to (optional)</param>
        /// <param name="useBy">Filter on use by (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="useFileProcessedSize">Filter on use file processed size (optional)</param>
        /// <param name="useFileSizeToProcess">Filter on use file size to process (optional)</param>
        /// <param name="useFileNameProcessed">Filter on use file name processed (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>Task of ApiResponse (TapeDriveCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeDriveCollection>> IndexTapeDrivesAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string tapeLibraryId = default(string), string name = default(string), string serial = default(string), string comment = default(string), string scsiAddress = default(string), string vendor = default(string), string product = default(string), string firmware = default(string), string device = default(string), string sgdevice = default(string), string libso = default(string), string acs = default(string), string lsm = default(string), string panel = default(string), string transport = default(string), string status = default(string), string full = default(string), string mountCount = default(string), string useTo = default(string), string useBy = default(string), string barcode = default(string), string taskId = default(string), string useFileProcessedSize = default(string), string useFileSizeToProcess = default(string), string useFileNameProcessed = default(string), string bandwidth = default(string));
        /// <summary>
        /// Lists all tape drives.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="serial">Filter on serial (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="scsiAddress">Filter on scsi address (optional)</param>
        /// <param name="vendor">Filter on vendor (optional)</param>
        /// <param name="product">Filter on product (optional)</param>
        /// <param name="firmware">Filter on firmware (optional)</param>
        /// <param name="device">Filter on device (optional)</param>
        /// <param name="sgdevice">Filter on sgdevice (optional)</param>
        /// <param name="libso">Filter on libso (optional)</param>
        /// <param name="acs">Filter on acs (optional)</param>
        /// <param name="lsm">Filter on lsm (optional)</param>
        /// <param name="panel">Filter on panel (optional)</param>
        /// <param name="transport">Filter on transport (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="full">Filter on full (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="useTo">Filter on use to (optional)</param>
        /// <param name="useBy">Filter on use by (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="useFileProcessedSize">Filter on use file processed size (optional)</param>
        /// <param name="useFileSizeToProcess">Filter on use file size to process (optional)</param>
        /// <param name="useFileNameProcessed">Filter on use file name processed (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>Task of TapeDriveCollection</returns>
        System.Threading.Tasks.Task<TapeDriveCollection> IndexTapeDrivesByTapeLibraryAsync (string tapeLibraryId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string serial = default(string), string comment = default(string), string scsiAddress = default(string), string vendor = default(string), string product = default(string), string firmware = default(string), string device = default(string), string sgdevice = default(string), string libso = default(string), string acs = default(string), string lsm = default(string), string panel = default(string), string transport = default(string), string status = default(string), string full = default(string), string mountCount = default(string), string useTo = default(string), string useBy = default(string), string barcode = default(string), string taskId = default(string), string useFileProcessedSize = default(string), string useFileSizeToProcess = default(string), string useFileNameProcessed = default(string), string bandwidth = default(string));

        /// <summary>
        /// Lists all tape drives.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="serial">Filter on serial (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="scsiAddress">Filter on scsi address (optional)</param>
        /// <param name="vendor">Filter on vendor (optional)</param>
        /// <param name="product">Filter on product (optional)</param>
        /// <param name="firmware">Filter on firmware (optional)</param>
        /// <param name="device">Filter on device (optional)</param>
        /// <param name="sgdevice">Filter on sgdevice (optional)</param>
        /// <param name="libso">Filter on libso (optional)</param>
        /// <param name="acs">Filter on acs (optional)</param>
        /// <param name="lsm">Filter on lsm (optional)</param>
        /// <param name="panel">Filter on panel (optional)</param>
        /// <param name="transport">Filter on transport (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="full">Filter on full (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="useTo">Filter on use to (optional)</param>
        /// <param name="useBy">Filter on use by (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="useFileProcessedSize">Filter on use file processed size (optional)</param>
        /// <param name="useFileSizeToProcess">Filter on use file size to process (optional)</param>
        /// <param name="useFileNameProcessed">Filter on use file name processed (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>Task of ApiResponse (TapeDriveCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeDriveCollection>> IndexTapeDrivesByTapeLibraryAsyncWithHttpInfo (string tapeLibraryId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string serial = default(string), string comment = default(string), string scsiAddress = default(string), string vendor = default(string), string product = default(string), string firmware = default(string), string device = default(string), string sgdevice = default(string), string libso = default(string), string acs = default(string), string lsm = default(string), string panel = default(string), string transport = default(string), string status = default(string), string full = default(string), string mountCount = default(string), string useTo = default(string), string useBy = default(string), string barcode = default(string), string taskId = default(string), string useFileProcessedSize = default(string), string useFileSizeToProcess = default(string), string useFileNameProcessed = default(string), string bandwidth = default(string));
        /// <summary>
        /// Displays a specific tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>Task of TapeDrive</returns>
        System.Threading.Tasks.Task<TapeDrive> ShowTapeDriveAsync (string tapeDriveId);

        /// <summary>
        /// Displays a specific tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>Task of ApiResponse (TapeDrive)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeDrive>> ShowTapeDriveAsyncWithHttpInfo (string tapeDriveId);
        /// <summary>
        /// Displays a specific tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>Task of TapeDrive</returns>
        System.Threading.Tasks.Task<TapeDrive> ShowTapeDriveByTapeLibraryAsync (string tapeLibraryId, string tapeDriveId);

        /// <summary>
        /// Displays a specific tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>Task of ApiResponse (TapeDrive)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeDrive>> ShowTapeDriveByTapeLibraryAsyncWithHttpInfo (string tapeLibraryId, string tapeDriveId);
        /// <summary>
        /// Updates a specific tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <param name="tapeDriveBody"></param>
        /// <returns>Task of TapeDrive</returns>
        System.Threading.Tasks.Task<TapeDrive> UpdateTapeDriveAsync (string tapeDriveId, TapeDrive tapeDriveBody);

        /// <summary>
        /// Updates a specific tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <param name="tapeDriveBody"></param>
        /// <returns>Task of ApiResponse (TapeDrive)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeDrive>> UpdateTapeDriveAsyncWithHttpInfo (string tapeDriveId, TapeDrive tapeDriveBody);
        /// <summary>
        /// Updates a specific tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <param name="tapeDriveBody"></param>
        /// <returns>Task of TapeDrive</returns>
        System.Threading.Tasks.Task<TapeDrive> UpdateTapeDriveByTapeLibraryAsync (string tapeLibraryId, string tapeDriveId, TapeDrive tapeDriveBody);

        /// <summary>
        /// Updates a specific tape drive.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_drives / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <param name="tapeDriveBody"></param>
        /// <returns>Task of ApiResponse (TapeDrive)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeDrive>> UpdateTapeDriveByTapeLibraryAsyncWithHttpInfo (string tapeLibraryId, string tapeDriveId, TapeDrive tapeDriveBody);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITapeDrivesApi : ITapeDrivesApiSync, ITapeDrivesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TapeDrivesApi : ITapeDrivesApi
    {
        private Io.Nodeum.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TapeDrivesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TapeDrivesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TapeDrivesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TapeDrivesApi(String basePath)
        {
            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                new Io.Nodeum.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TapeDrivesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TapeDrivesApi(Io.Nodeum.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TapeDrivesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TapeDrivesApi(Io.Nodeum.Sdk.Client.ISynchronousClient client,Io.Nodeum.Sdk.Client.IAsynchronousClient asyncClient, Io.Nodeum.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Io.Nodeum.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a new tape drive. **API Key Scope**: tape_drives / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveBody"></param>
        /// <returns>TapeDrive</returns>
        public TapeDrive CreateTapeDriveByTapeLibrary (string tapeLibraryId, TapeDrive tapeDriveBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeDrive> localVarResponse = CreateTapeDriveByTapeLibraryWithHttpInfo(tapeLibraryId, tapeDriveBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new tape drive. **API Key Scope**: tape_drives / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveBody"></param>
        /// <returns>ApiResponse of TapeDrive</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TapeDrive > CreateTapeDriveByTapeLibraryWithHttpInfo (string tapeLibraryId, TapeDrive tapeDriveBody)
        {
            // verify the required parameter 'tapeLibraryId' is set
            if (tapeLibraryId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryId' when calling TapeDrivesApi->CreateTapeDriveByTapeLibrary");

            // verify the required parameter 'tapeDriveBody' is set
            if (tapeDriveBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeDriveBody' when calling TapeDrivesApi->CreateTapeDriveByTapeLibrary");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tapeLibraryId != null)
                localVarRequestOptions.PathParameters.Add("tape_library_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeLibraryId)); // path parameter
            localVarRequestOptions.Data = tapeDriveBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< TapeDrive >("/tape_libraries/{tape_library_id}/tape_drives", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTapeDriveByTapeLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new tape drive. **API Key Scope**: tape_drives / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveBody"></param>
        /// <returns>Task of TapeDrive</returns>
        public async System.Threading.Tasks.Task<TapeDrive> CreateTapeDriveByTapeLibraryAsync (string tapeLibraryId, TapeDrive tapeDriveBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeDrive> localVarResponse = await CreateTapeDriveByTapeLibraryAsyncWithHttpInfo(tapeLibraryId, tapeDriveBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new tape drive. **API Key Scope**: tape_drives / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveBody"></param>
        /// <returns>Task of ApiResponse (TapeDrive)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TapeDrive>> CreateTapeDriveByTapeLibraryAsyncWithHttpInfo (string tapeLibraryId, TapeDrive tapeDriveBody)
        {
            // verify the required parameter 'tapeLibraryId' is set
            if (tapeLibraryId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryId' when calling TapeDrivesApi->CreateTapeDriveByTapeLibrary");

            // verify the required parameter 'tapeDriveBody' is set
            if (tapeDriveBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeDriveBody' when calling TapeDrivesApi->CreateTapeDriveByTapeLibrary");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tapeLibraryId != null)
                localVarRequestOptions.PathParameters.Add("tape_library_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeLibraryId)); // path parameter
            localVarRequestOptions.Data = tapeDriveBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TapeDrive>("/tape_libraries/{tape_library_id}/tape_drives", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTapeDriveByTapeLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific tape drive. **API Key Scope**: tape_drives / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns></returns>
        public void DestroyTapeDrive (string tapeDriveId)
        {
             DestroyTapeDriveWithHttpInfo(tapeDriveId);
        }

        /// <summary>
        /// Destroys a specific tape drive. **API Key Scope**: tape_drives / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse<Object> DestroyTapeDriveWithHttpInfo (string tapeDriveId)
        {
            // verify the required parameter 'tapeDriveId' is set
            if (tapeDriveId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeDriveId' when calling TapeDrivesApi->DestroyTapeDrive");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tapeDriveId != null)
                localVarRequestOptions.PathParameters.Add("tape_drive_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeDriveId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/tape_drives/{tape_drive_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyTapeDrive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific tape drive. **API Key Scope**: tape_drives / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyTapeDriveAsync (string tapeDriveId)
        {
             await DestroyTapeDriveAsyncWithHttpInfo(tapeDriveId);

        }

        /// <summary>
        /// Destroys a specific tape drive. **API Key Scope**: tape_drives / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Object>> DestroyTapeDriveAsyncWithHttpInfo (string tapeDriveId)
        {
            // verify the required parameter 'tapeDriveId' is set
            if (tapeDriveId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeDriveId' when calling TapeDrivesApi->DestroyTapeDrive");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tapeDriveId != null)
                localVarRequestOptions.PathParameters.Add("tape_drive_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeDriveId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/tape_drives/{tape_drive_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyTapeDrive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific tape drive. **API Key Scope**: tape_drives / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns></returns>
        public void DestroyTapeDriveByTapeLibrary (string tapeLibraryId, string tapeDriveId)
        {
             DestroyTapeDriveByTapeLibraryWithHttpInfo(tapeLibraryId, tapeDriveId);
        }

        /// <summary>
        /// Destroys a specific tape drive. **API Key Scope**: tape_drives / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse<Object> DestroyTapeDriveByTapeLibraryWithHttpInfo (string tapeLibraryId, string tapeDriveId)
        {
            // verify the required parameter 'tapeLibraryId' is set
            if (tapeLibraryId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryId' when calling TapeDrivesApi->DestroyTapeDriveByTapeLibrary");

            // verify the required parameter 'tapeDriveId' is set
            if (tapeDriveId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeDriveId' when calling TapeDrivesApi->DestroyTapeDriveByTapeLibrary");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tapeLibraryId != null)
                localVarRequestOptions.PathParameters.Add("tape_library_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeLibraryId)); // path parameter
            if (tapeDriveId != null)
                localVarRequestOptions.PathParameters.Add("tape_drive_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeDriveId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/tape_libraries/{tape_library_id}/tape_drives/{tape_drive_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyTapeDriveByTapeLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific tape drive. **API Key Scope**: tape_drives / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyTapeDriveByTapeLibraryAsync (string tapeLibraryId, string tapeDriveId)
        {
             await DestroyTapeDriveByTapeLibraryAsyncWithHttpInfo(tapeLibraryId, tapeDriveId);

        }

        /// <summary>
        /// Destroys a specific tape drive. **API Key Scope**: tape_drives / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Object>> DestroyTapeDriveByTapeLibraryAsyncWithHttpInfo (string tapeLibraryId, string tapeDriveId)
        {
            // verify the required parameter 'tapeLibraryId' is set
            if (tapeLibraryId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryId' when calling TapeDrivesApi->DestroyTapeDriveByTapeLibrary");

            // verify the required parameter 'tapeDriveId' is set
            if (tapeDriveId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeDriveId' when calling TapeDrivesApi->DestroyTapeDriveByTapeLibrary");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tapeLibraryId != null)
                localVarRequestOptions.PathParameters.Add("tape_library_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeLibraryId)); // path parameter
            if (tapeDriveId != null)
                localVarRequestOptions.PathParameters.Add("tape_drive_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeDriveId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/tape_libraries/{tape_library_id}/tape_drives/{tape_drive_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyTapeDriveByTapeLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists tape drives devices. **API Key Scope**: tape_drives / devices
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>TapeDriveDeviceCollection</returns>
        public TapeDriveDeviceCollection IndexTapeDriveDevices (string tapeLibraryId, string jobId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeDriveDeviceCollection> localVarResponse = IndexTapeDriveDevicesWithHttpInfo(tapeLibraryId, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists tape drives devices. **API Key Scope**: tape_drives / devices
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ApiResponse of TapeDriveDeviceCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TapeDriveDeviceCollection > IndexTapeDriveDevicesWithHttpInfo (string tapeLibraryId, string jobId)
        {
            // verify the required parameter 'tapeLibraryId' is set
            if (tapeLibraryId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryId' when calling TapeDrivesApi->IndexTapeDriveDevices");

            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'jobId' when calling TapeDrivesApi->IndexTapeDriveDevices");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed",
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tapeLibraryId != null)
                localVarRequestOptions.PathParameters.Add("tape_library_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeLibraryId)); // path parameter
            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TapeDriveDeviceCollection >("/tape_libraries/{tape_library_id}/tape_drives/-/devices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTapeDriveDevices", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists tape drives devices. **API Key Scope**: tape_drives / devices
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of TapeDriveDeviceCollection</returns>
        public async System.Threading.Tasks.Task<TapeDriveDeviceCollection> IndexTapeDriveDevicesAsync (string tapeLibraryId, string jobId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeDriveDeviceCollection> localVarResponse = await IndexTapeDriveDevicesAsyncWithHttpInfo(tapeLibraryId, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists tape drives devices. **API Key Scope**: tape_drives / devices
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ApiResponse (TapeDriveDeviceCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TapeDriveDeviceCollection>> IndexTapeDriveDevicesAsyncWithHttpInfo (string tapeLibraryId, string jobId)
        {
            // verify the required parameter 'tapeLibraryId' is set
            if (tapeLibraryId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryId' when calling TapeDrivesApi->IndexTapeDriveDevices");

            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'jobId' when calling TapeDrivesApi->IndexTapeDriveDevices");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed",
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tapeLibraryId != null)
                localVarRequestOptions.PathParameters.Add("tape_library_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeLibraryId)); // path parameter
            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TapeDriveDeviceCollection>("/tape_libraries/{tape_library_id}/tape_drives/-/devices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTapeDriveDevices", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all tape drives. **API Key Scope**: tape_drives / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="tapeLibraryId">Filter on tape library id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="serial">Filter on serial (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="scsiAddress">Filter on scsi address (optional)</param>
        /// <param name="vendor">Filter on vendor (optional)</param>
        /// <param name="product">Filter on product (optional)</param>
        /// <param name="firmware">Filter on firmware (optional)</param>
        /// <param name="device">Filter on device (optional)</param>
        /// <param name="sgdevice">Filter on sgdevice (optional)</param>
        /// <param name="libso">Filter on libso (optional)</param>
        /// <param name="acs">Filter on acs (optional)</param>
        /// <param name="lsm">Filter on lsm (optional)</param>
        /// <param name="panel">Filter on panel (optional)</param>
        /// <param name="transport">Filter on transport (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="full">Filter on full (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="useTo">Filter on use to (optional)</param>
        /// <param name="useBy">Filter on use by (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="useFileProcessedSize">Filter on use file processed size (optional)</param>
        /// <param name="useFileSizeToProcess">Filter on use file size to process (optional)</param>
        /// <param name="useFileNameProcessed">Filter on use file name processed (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>TapeDriveCollection</returns>
        public TapeDriveCollection IndexTapeDrives (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string tapeLibraryId = default(string), string name = default(string), string serial = default(string), string comment = default(string), string scsiAddress = default(string), string vendor = default(string), string product = default(string), string firmware = default(string), string device = default(string), string sgdevice = default(string), string libso = default(string), string acs = default(string), string lsm = default(string), string panel = default(string), string transport = default(string), string status = default(string), string full = default(string), string mountCount = default(string), string useTo = default(string), string useBy = default(string), string barcode = default(string), string taskId = default(string), string useFileProcessedSize = default(string), string useFileSizeToProcess = default(string), string useFileNameProcessed = default(string), string bandwidth = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeDriveCollection> localVarResponse = IndexTapeDrivesWithHttpInfo(limit, offset, sortBy, id, tapeLibraryId, name, serial, comment, scsiAddress, vendor, product, firmware, device, sgdevice, libso, acs, lsm, panel, transport, status, full, mountCount, useTo, useBy, barcode, taskId, useFileProcessedSize, useFileSizeToProcess, useFileNameProcessed, bandwidth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all tape drives. **API Key Scope**: tape_drives / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="tapeLibraryId">Filter on tape library id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="serial">Filter on serial (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="scsiAddress">Filter on scsi address (optional)</param>
        /// <param name="vendor">Filter on vendor (optional)</param>
        /// <param name="product">Filter on product (optional)</param>
        /// <param name="firmware">Filter on firmware (optional)</param>
        /// <param name="device">Filter on device (optional)</param>
        /// <param name="sgdevice">Filter on sgdevice (optional)</param>
        /// <param name="libso">Filter on libso (optional)</param>
        /// <param name="acs">Filter on acs (optional)</param>
        /// <param name="lsm">Filter on lsm (optional)</param>
        /// <param name="panel">Filter on panel (optional)</param>
        /// <param name="transport">Filter on transport (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="full">Filter on full (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="useTo">Filter on use to (optional)</param>
        /// <param name="useBy">Filter on use by (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="useFileProcessedSize">Filter on use file processed size (optional)</param>
        /// <param name="useFileSizeToProcess">Filter on use file size to process (optional)</param>
        /// <param name="useFileNameProcessed">Filter on use file name processed (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>ApiResponse of TapeDriveCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TapeDriveCollection > IndexTapeDrivesWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string tapeLibraryId = default(string), string name = default(string), string serial = default(string), string comment = default(string), string scsiAddress = default(string), string vendor = default(string), string product = default(string), string firmware = default(string), string device = default(string), string sgdevice = default(string), string libso = default(string), string acs = default(string), string lsm = default(string), string panel = default(string), string transport = default(string), string status = default(string), string full = default(string), string mountCount = default(string), string useTo = default(string), string useBy = default(string), string barcode = default(string), string taskId = default(string), string useFileProcessedSize = default(string), string useFileSizeToProcess = default(string), string useFileNameProcessed = default(string), string bandwidth = default(string))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (tapeLibraryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "tape_library_id", tapeLibraryId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (serial != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "serial", serial));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (scsiAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scsi_address", scsiAddress));
            }
            if (vendor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "vendor", vendor));
            }
            if (product != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "product", product));
            }
            if (firmware != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "firmware", firmware));
            }
            if (device != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "device", device));
            }
            if (sgdevice != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sgdevice", sgdevice));
            }
            if (libso != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "libso", libso));
            }
            if (acs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "acs", acs));
            }
            if (lsm != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "lsm", lsm));
            }
            if (panel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "panel", panel));
            }
            if (transport != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "transport", transport));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (full != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "full", full));
            }
            if (mountCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "mount_count", mountCount));
            }
            if (useTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "use_to", useTo));
            }
            if (useBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "use_by", useBy));
            }
            if (barcode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "barcode", barcode));
            }
            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "task_id", taskId));
            }
            if (useFileProcessedSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "use_file_processed_size", useFileProcessedSize));
            }
            if (useFileSizeToProcess != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "use_file_size_to_process", useFileSizeToProcess));
            }
            if (useFileNameProcessed != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "use_file_name_processed", useFileNameProcessed));
            }
            if (bandwidth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "bandwidth", bandwidth));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TapeDriveCollection >("/tape_drives", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTapeDrives", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all tape drives. **API Key Scope**: tape_drives / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="tapeLibraryId">Filter on tape library id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="serial">Filter on serial (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="scsiAddress">Filter on scsi address (optional)</param>
        /// <param name="vendor">Filter on vendor (optional)</param>
        /// <param name="product">Filter on product (optional)</param>
        /// <param name="firmware">Filter on firmware (optional)</param>
        /// <param name="device">Filter on device (optional)</param>
        /// <param name="sgdevice">Filter on sgdevice (optional)</param>
        /// <param name="libso">Filter on libso (optional)</param>
        /// <param name="acs">Filter on acs (optional)</param>
        /// <param name="lsm">Filter on lsm (optional)</param>
        /// <param name="panel">Filter on panel (optional)</param>
        /// <param name="transport">Filter on transport (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="full">Filter on full (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="useTo">Filter on use to (optional)</param>
        /// <param name="useBy">Filter on use by (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="useFileProcessedSize">Filter on use file processed size (optional)</param>
        /// <param name="useFileSizeToProcess">Filter on use file size to process (optional)</param>
        /// <param name="useFileNameProcessed">Filter on use file name processed (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>Task of TapeDriveCollection</returns>
        public async System.Threading.Tasks.Task<TapeDriveCollection> IndexTapeDrivesAsync (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string tapeLibraryId = default(string), string name = default(string), string serial = default(string), string comment = default(string), string scsiAddress = default(string), string vendor = default(string), string product = default(string), string firmware = default(string), string device = default(string), string sgdevice = default(string), string libso = default(string), string acs = default(string), string lsm = default(string), string panel = default(string), string transport = default(string), string status = default(string), string full = default(string), string mountCount = default(string), string useTo = default(string), string useBy = default(string), string barcode = default(string), string taskId = default(string), string useFileProcessedSize = default(string), string useFileSizeToProcess = default(string), string useFileNameProcessed = default(string), string bandwidth = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeDriveCollection> localVarResponse = await IndexTapeDrivesAsyncWithHttpInfo(limit, offset, sortBy, id, tapeLibraryId, name, serial, comment, scsiAddress, vendor, product, firmware, device, sgdevice, libso, acs, lsm, panel, transport, status, full, mountCount, useTo, useBy, barcode, taskId, useFileProcessedSize, useFileSizeToProcess, useFileNameProcessed, bandwidth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all tape drives. **API Key Scope**: tape_drives / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="tapeLibraryId">Filter on tape library id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="serial">Filter on serial (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="scsiAddress">Filter on scsi address (optional)</param>
        /// <param name="vendor">Filter on vendor (optional)</param>
        /// <param name="product">Filter on product (optional)</param>
        /// <param name="firmware">Filter on firmware (optional)</param>
        /// <param name="device">Filter on device (optional)</param>
        /// <param name="sgdevice">Filter on sgdevice (optional)</param>
        /// <param name="libso">Filter on libso (optional)</param>
        /// <param name="acs">Filter on acs (optional)</param>
        /// <param name="lsm">Filter on lsm (optional)</param>
        /// <param name="panel">Filter on panel (optional)</param>
        /// <param name="transport">Filter on transport (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="full">Filter on full (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="useTo">Filter on use to (optional)</param>
        /// <param name="useBy">Filter on use by (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="useFileProcessedSize">Filter on use file processed size (optional)</param>
        /// <param name="useFileSizeToProcess">Filter on use file size to process (optional)</param>
        /// <param name="useFileNameProcessed">Filter on use file name processed (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>Task of ApiResponse (TapeDriveCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TapeDriveCollection>> IndexTapeDrivesAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string tapeLibraryId = default(string), string name = default(string), string serial = default(string), string comment = default(string), string scsiAddress = default(string), string vendor = default(string), string product = default(string), string firmware = default(string), string device = default(string), string sgdevice = default(string), string libso = default(string), string acs = default(string), string lsm = default(string), string panel = default(string), string transport = default(string), string status = default(string), string full = default(string), string mountCount = default(string), string useTo = default(string), string useBy = default(string), string barcode = default(string), string taskId = default(string), string useFileProcessedSize = default(string), string useFileSizeToProcess = default(string), string useFileNameProcessed = default(string), string bandwidth = default(string))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (tapeLibraryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "tape_library_id", tapeLibraryId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (serial != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "serial", serial));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (scsiAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scsi_address", scsiAddress));
            }
            if (vendor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "vendor", vendor));
            }
            if (product != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "product", product));
            }
            if (firmware != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "firmware", firmware));
            }
            if (device != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "device", device));
            }
            if (sgdevice != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sgdevice", sgdevice));
            }
            if (libso != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "libso", libso));
            }
            if (acs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "acs", acs));
            }
            if (lsm != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "lsm", lsm));
            }
            if (panel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "panel", panel));
            }
            if (transport != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "transport", transport));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (full != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "full", full));
            }
            if (mountCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "mount_count", mountCount));
            }
            if (useTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "use_to", useTo));
            }
            if (useBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "use_by", useBy));
            }
            if (barcode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "barcode", barcode));
            }
            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "task_id", taskId));
            }
            if (useFileProcessedSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "use_file_processed_size", useFileProcessedSize));
            }
            if (useFileSizeToProcess != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "use_file_size_to_process", useFileSizeToProcess));
            }
            if (useFileNameProcessed != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "use_file_name_processed", useFileNameProcessed));
            }
            if (bandwidth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "bandwidth", bandwidth));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TapeDriveCollection>("/tape_drives", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTapeDrives", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all tape drives. **API Key Scope**: tape_drives / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="serial">Filter on serial (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="scsiAddress">Filter on scsi address (optional)</param>
        /// <param name="vendor">Filter on vendor (optional)</param>
        /// <param name="product">Filter on product (optional)</param>
        /// <param name="firmware">Filter on firmware (optional)</param>
        /// <param name="device">Filter on device (optional)</param>
        /// <param name="sgdevice">Filter on sgdevice (optional)</param>
        /// <param name="libso">Filter on libso (optional)</param>
        /// <param name="acs">Filter on acs (optional)</param>
        /// <param name="lsm">Filter on lsm (optional)</param>
        /// <param name="panel">Filter on panel (optional)</param>
        /// <param name="transport">Filter on transport (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="full">Filter on full (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="useTo">Filter on use to (optional)</param>
        /// <param name="useBy">Filter on use by (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="useFileProcessedSize">Filter on use file processed size (optional)</param>
        /// <param name="useFileSizeToProcess">Filter on use file size to process (optional)</param>
        /// <param name="useFileNameProcessed">Filter on use file name processed (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>TapeDriveCollection</returns>
        public TapeDriveCollection IndexTapeDrivesByTapeLibrary (string tapeLibraryId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string serial = default(string), string comment = default(string), string scsiAddress = default(string), string vendor = default(string), string product = default(string), string firmware = default(string), string device = default(string), string sgdevice = default(string), string libso = default(string), string acs = default(string), string lsm = default(string), string panel = default(string), string transport = default(string), string status = default(string), string full = default(string), string mountCount = default(string), string useTo = default(string), string useBy = default(string), string barcode = default(string), string taskId = default(string), string useFileProcessedSize = default(string), string useFileSizeToProcess = default(string), string useFileNameProcessed = default(string), string bandwidth = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeDriveCollection> localVarResponse = IndexTapeDrivesByTapeLibraryWithHttpInfo(tapeLibraryId, limit, offset, sortBy, id, name, serial, comment, scsiAddress, vendor, product, firmware, device, sgdevice, libso, acs, lsm, panel, transport, status, full, mountCount, useTo, useBy, barcode, taskId, useFileProcessedSize, useFileSizeToProcess, useFileNameProcessed, bandwidth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all tape drives. **API Key Scope**: tape_drives / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="serial">Filter on serial (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="scsiAddress">Filter on scsi address (optional)</param>
        /// <param name="vendor">Filter on vendor (optional)</param>
        /// <param name="product">Filter on product (optional)</param>
        /// <param name="firmware">Filter on firmware (optional)</param>
        /// <param name="device">Filter on device (optional)</param>
        /// <param name="sgdevice">Filter on sgdevice (optional)</param>
        /// <param name="libso">Filter on libso (optional)</param>
        /// <param name="acs">Filter on acs (optional)</param>
        /// <param name="lsm">Filter on lsm (optional)</param>
        /// <param name="panel">Filter on panel (optional)</param>
        /// <param name="transport">Filter on transport (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="full">Filter on full (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="useTo">Filter on use to (optional)</param>
        /// <param name="useBy">Filter on use by (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="useFileProcessedSize">Filter on use file processed size (optional)</param>
        /// <param name="useFileSizeToProcess">Filter on use file size to process (optional)</param>
        /// <param name="useFileNameProcessed">Filter on use file name processed (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>ApiResponse of TapeDriveCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TapeDriveCollection > IndexTapeDrivesByTapeLibraryWithHttpInfo (string tapeLibraryId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string serial = default(string), string comment = default(string), string scsiAddress = default(string), string vendor = default(string), string product = default(string), string firmware = default(string), string device = default(string), string sgdevice = default(string), string libso = default(string), string acs = default(string), string lsm = default(string), string panel = default(string), string transport = default(string), string status = default(string), string full = default(string), string mountCount = default(string), string useTo = default(string), string useBy = default(string), string barcode = default(string), string taskId = default(string), string useFileProcessedSize = default(string), string useFileSizeToProcess = default(string), string useFileNameProcessed = default(string), string bandwidth = default(string))
        {
            // verify the required parameter 'tapeLibraryId' is set
            if (tapeLibraryId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryId' when calling TapeDrivesApi->IndexTapeDrivesByTapeLibrary");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tapeLibraryId != null)
                localVarRequestOptions.PathParameters.Add("tape_library_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeLibraryId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (serial != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "serial", serial));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (scsiAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scsi_address", scsiAddress));
            }
            if (vendor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "vendor", vendor));
            }
            if (product != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "product", product));
            }
            if (firmware != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "firmware", firmware));
            }
            if (device != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "device", device));
            }
            if (sgdevice != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sgdevice", sgdevice));
            }
            if (libso != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "libso", libso));
            }
            if (acs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "acs", acs));
            }
            if (lsm != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "lsm", lsm));
            }
            if (panel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "panel", panel));
            }
            if (transport != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "transport", transport));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (full != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "full", full));
            }
            if (mountCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "mount_count", mountCount));
            }
            if (useTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "use_to", useTo));
            }
            if (useBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "use_by", useBy));
            }
            if (barcode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "barcode", barcode));
            }
            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "task_id", taskId));
            }
            if (useFileProcessedSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "use_file_processed_size", useFileProcessedSize));
            }
            if (useFileSizeToProcess != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "use_file_size_to_process", useFileSizeToProcess));
            }
            if (useFileNameProcessed != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "use_file_name_processed", useFileNameProcessed));
            }
            if (bandwidth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "bandwidth", bandwidth));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TapeDriveCollection >("/tape_libraries/{tape_library_id}/tape_drives", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTapeDrivesByTapeLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all tape drives. **API Key Scope**: tape_drives / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="serial">Filter on serial (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="scsiAddress">Filter on scsi address (optional)</param>
        /// <param name="vendor">Filter on vendor (optional)</param>
        /// <param name="product">Filter on product (optional)</param>
        /// <param name="firmware">Filter on firmware (optional)</param>
        /// <param name="device">Filter on device (optional)</param>
        /// <param name="sgdevice">Filter on sgdevice (optional)</param>
        /// <param name="libso">Filter on libso (optional)</param>
        /// <param name="acs">Filter on acs (optional)</param>
        /// <param name="lsm">Filter on lsm (optional)</param>
        /// <param name="panel">Filter on panel (optional)</param>
        /// <param name="transport">Filter on transport (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="full">Filter on full (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="useTo">Filter on use to (optional)</param>
        /// <param name="useBy">Filter on use by (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="useFileProcessedSize">Filter on use file processed size (optional)</param>
        /// <param name="useFileSizeToProcess">Filter on use file size to process (optional)</param>
        /// <param name="useFileNameProcessed">Filter on use file name processed (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>Task of TapeDriveCollection</returns>
        public async System.Threading.Tasks.Task<TapeDriveCollection> IndexTapeDrivesByTapeLibraryAsync (string tapeLibraryId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string serial = default(string), string comment = default(string), string scsiAddress = default(string), string vendor = default(string), string product = default(string), string firmware = default(string), string device = default(string), string sgdevice = default(string), string libso = default(string), string acs = default(string), string lsm = default(string), string panel = default(string), string transport = default(string), string status = default(string), string full = default(string), string mountCount = default(string), string useTo = default(string), string useBy = default(string), string barcode = default(string), string taskId = default(string), string useFileProcessedSize = default(string), string useFileSizeToProcess = default(string), string useFileNameProcessed = default(string), string bandwidth = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeDriveCollection> localVarResponse = await IndexTapeDrivesByTapeLibraryAsyncWithHttpInfo(tapeLibraryId, limit, offset, sortBy, id, name, serial, comment, scsiAddress, vendor, product, firmware, device, sgdevice, libso, acs, lsm, panel, transport, status, full, mountCount, useTo, useBy, barcode, taskId, useFileProcessedSize, useFileSizeToProcess, useFileNameProcessed, bandwidth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all tape drives. **API Key Scope**: tape_drives / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="serial">Filter on serial (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="scsiAddress">Filter on scsi address (optional)</param>
        /// <param name="vendor">Filter on vendor (optional)</param>
        /// <param name="product">Filter on product (optional)</param>
        /// <param name="firmware">Filter on firmware (optional)</param>
        /// <param name="device">Filter on device (optional)</param>
        /// <param name="sgdevice">Filter on sgdevice (optional)</param>
        /// <param name="libso">Filter on libso (optional)</param>
        /// <param name="acs">Filter on acs (optional)</param>
        /// <param name="lsm">Filter on lsm (optional)</param>
        /// <param name="panel">Filter on panel (optional)</param>
        /// <param name="transport">Filter on transport (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="full">Filter on full (optional)</param>
        /// <param name="mountCount">Filter on mount count (optional)</param>
        /// <param name="useTo">Filter on use to (optional)</param>
        /// <param name="useBy">Filter on use by (optional)</param>
        /// <param name="barcode">Filter on barcode (optional)</param>
        /// <param name="taskId">Filter on task id (optional)</param>
        /// <param name="useFileProcessedSize">Filter on use file processed size (optional)</param>
        /// <param name="useFileSizeToProcess">Filter on use file size to process (optional)</param>
        /// <param name="useFileNameProcessed">Filter on use file name processed (optional)</param>
        /// <param name="bandwidth">Filter on bandwidth (optional)</param>
        /// <returns>Task of ApiResponse (TapeDriveCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TapeDriveCollection>> IndexTapeDrivesByTapeLibraryAsyncWithHttpInfo (string tapeLibraryId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string serial = default(string), string comment = default(string), string scsiAddress = default(string), string vendor = default(string), string product = default(string), string firmware = default(string), string device = default(string), string sgdevice = default(string), string libso = default(string), string acs = default(string), string lsm = default(string), string panel = default(string), string transport = default(string), string status = default(string), string full = default(string), string mountCount = default(string), string useTo = default(string), string useBy = default(string), string barcode = default(string), string taskId = default(string), string useFileProcessedSize = default(string), string useFileSizeToProcess = default(string), string useFileNameProcessed = default(string), string bandwidth = default(string))
        {
            // verify the required parameter 'tapeLibraryId' is set
            if (tapeLibraryId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryId' when calling TapeDrivesApi->IndexTapeDrivesByTapeLibrary");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tapeLibraryId != null)
                localVarRequestOptions.PathParameters.Add("tape_library_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeLibraryId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (serial != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "serial", serial));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (scsiAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "scsi_address", scsiAddress));
            }
            if (vendor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "vendor", vendor));
            }
            if (product != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "product", product));
            }
            if (firmware != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "firmware", firmware));
            }
            if (device != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "device", device));
            }
            if (sgdevice != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sgdevice", sgdevice));
            }
            if (libso != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "libso", libso));
            }
            if (acs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "acs", acs));
            }
            if (lsm != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "lsm", lsm));
            }
            if (panel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "panel", panel));
            }
            if (transport != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "transport", transport));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (full != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "full", full));
            }
            if (mountCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "mount_count", mountCount));
            }
            if (useTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "use_to", useTo));
            }
            if (useBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "use_by", useBy));
            }
            if (barcode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "barcode", barcode));
            }
            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "task_id", taskId));
            }
            if (useFileProcessedSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "use_file_processed_size", useFileProcessedSize));
            }
            if (useFileSizeToProcess != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "use_file_size_to_process", useFileSizeToProcess));
            }
            if (useFileNameProcessed != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "use_file_name_processed", useFileNameProcessed));
            }
            if (bandwidth != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "bandwidth", bandwidth));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TapeDriveCollection>("/tape_libraries/{tape_library_id}/tape_drives", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTapeDrivesByTapeLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific tape drive. **API Key Scope**: tape_drives / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>TapeDrive</returns>
        public TapeDrive ShowTapeDrive (string tapeDriveId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeDrive> localVarResponse = ShowTapeDriveWithHttpInfo(tapeDriveId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific tape drive. **API Key Scope**: tape_drives / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>ApiResponse of TapeDrive</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TapeDrive > ShowTapeDriveWithHttpInfo (string tapeDriveId)
        {
            // verify the required parameter 'tapeDriveId' is set
            if (tapeDriveId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeDriveId' when calling TapeDrivesApi->ShowTapeDrive");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tapeDriveId != null)
                localVarRequestOptions.PathParameters.Add("tape_drive_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeDriveId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TapeDrive >("/tape_drives/{tape_drive_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTapeDrive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific tape drive. **API Key Scope**: tape_drives / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>Task of TapeDrive</returns>
        public async System.Threading.Tasks.Task<TapeDrive> ShowTapeDriveAsync (string tapeDriveId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeDrive> localVarResponse = await ShowTapeDriveAsyncWithHttpInfo(tapeDriveId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific tape drive. **API Key Scope**: tape_drives / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>Task of ApiResponse (TapeDrive)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TapeDrive>> ShowTapeDriveAsyncWithHttpInfo (string tapeDriveId)
        {
            // verify the required parameter 'tapeDriveId' is set
            if (tapeDriveId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeDriveId' when calling TapeDrivesApi->ShowTapeDrive");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tapeDriveId != null)
                localVarRequestOptions.PathParameters.Add("tape_drive_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeDriveId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TapeDrive>("/tape_drives/{tape_drive_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTapeDrive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific tape drive. **API Key Scope**: tape_drives / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>TapeDrive</returns>
        public TapeDrive ShowTapeDriveByTapeLibrary (string tapeLibraryId, string tapeDriveId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeDrive> localVarResponse = ShowTapeDriveByTapeLibraryWithHttpInfo(tapeLibraryId, tapeDriveId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific tape drive. **API Key Scope**: tape_drives / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>ApiResponse of TapeDrive</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TapeDrive > ShowTapeDriveByTapeLibraryWithHttpInfo (string tapeLibraryId, string tapeDriveId)
        {
            // verify the required parameter 'tapeLibraryId' is set
            if (tapeLibraryId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryId' when calling TapeDrivesApi->ShowTapeDriveByTapeLibrary");

            // verify the required parameter 'tapeDriveId' is set
            if (tapeDriveId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeDriveId' when calling TapeDrivesApi->ShowTapeDriveByTapeLibrary");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tapeLibraryId != null)
                localVarRequestOptions.PathParameters.Add("tape_library_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeLibraryId)); // path parameter
            if (tapeDriveId != null)
                localVarRequestOptions.PathParameters.Add("tape_drive_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeDriveId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TapeDrive >("/tape_libraries/{tape_library_id}/tape_drives/{tape_drive_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTapeDriveByTapeLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific tape drive. **API Key Scope**: tape_drives / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>Task of TapeDrive</returns>
        public async System.Threading.Tasks.Task<TapeDrive> ShowTapeDriveByTapeLibraryAsync (string tapeLibraryId, string tapeDriveId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeDrive> localVarResponse = await ShowTapeDriveByTapeLibraryAsyncWithHttpInfo(tapeLibraryId, tapeDriveId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific tape drive. **API Key Scope**: tape_drives / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <returns>Task of ApiResponse (TapeDrive)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TapeDrive>> ShowTapeDriveByTapeLibraryAsyncWithHttpInfo (string tapeLibraryId, string tapeDriveId)
        {
            // verify the required parameter 'tapeLibraryId' is set
            if (tapeLibraryId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryId' when calling TapeDrivesApi->ShowTapeDriveByTapeLibrary");

            // verify the required parameter 'tapeDriveId' is set
            if (tapeDriveId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeDriveId' when calling TapeDrivesApi->ShowTapeDriveByTapeLibrary");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tapeLibraryId != null)
                localVarRequestOptions.PathParameters.Add("tape_library_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeLibraryId)); // path parameter
            if (tapeDriveId != null)
                localVarRequestOptions.PathParameters.Add("tape_drive_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeDriveId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TapeDrive>("/tape_libraries/{tape_library_id}/tape_drives/{tape_drive_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTapeDriveByTapeLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific tape drive. **API Key Scope**: tape_drives / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <param name="tapeDriveBody"></param>
        /// <returns>TapeDrive</returns>
        public TapeDrive UpdateTapeDrive (string tapeDriveId, TapeDrive tapeDriveBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeDrive> localVarResponse = UpdateTapeDriveWithHttpInfo(tapeDriveId, tapeDriveBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific tape drive. **API Key Scope**: tape_drives / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <param name="tapeDriveBody"></param>
        /// <returns>ApiResponse of TapeDrive</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TapeDrive > UpdateTapeDriveWithHttpInfo (string tapeDriveId, TapeDrive tapeDriveBody)
        {
            // verify the required parameter 'tapeDriveId' is set
            if (tapeDriveId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeDriveId' when calling TapeDrivesApi->UpdateTapeDrive");

            // verify the required parameter 'tapeDriveBody' is set
            if (tapeDriveBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeDriveBody' when calling TapeDrivesApi->UpdateTapeDrive");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tapeDriveId != null)
                localVarRequestOptions.PathParameters.Add("tape_drive_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeDriveId)); // path parameter
            localVarRequestOptions.Data = tapeDriveBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< TapeDrive >("/tape_drives/{tape_drive_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTapeDrive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific tape drive. **API Key Scope**: tape_drives / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <param name="tapeDriveBody"></param>
        /// <returns>Task of TapeDrive</returns>
        public async System.Threading.Tasks.Task<TapeDrive> UpdateTapeDriveAsync (string tapeDriveId, TapeDrive tapeDriveBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeDrive> localVarResponse = await UpdateTapeDriveAsyncWithHttpInfo(tapeDriveId, tapeDriveBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a specific tape drive. **API Key Scope**: tape_drives / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <param name="tapeDriveBody"></param>
        /// <returns>Task of ApiResponse (TapeDrive)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TapeDrive>> UpdateTapeDriveAsyncWithHttpInfo (string tapeDriveId, TapeDrive tapeDriveBody)
        {
            // verify the required parameter 'tapeDriveId' is set
            if (tapeDriveId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeDriveId' when calling TapeDrivesApi->UpdateTapeDrive");

            // verify the required parameter 'tapeDriveBody' is set
            if (tapeDriveBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeDriveBody' when calling TapeDrivesApi->UpdateTapeDrive");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tapeDriveId != null)
                localVarRequestOptions.PathParameters.Add("tape_drive_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeDriveId)); // path parameter
            localVarRequestOptions.Data = tapeDriveBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<TapeDrive>("/tape_drives/{tape_drive_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTapeDrive", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific tape drive. **API Key Scope**: tape_drives / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <param name="tapeDriveBody"></param>
        /// <returns>TapeDrive</returns>
        public TapeDrive UpdateTapeDriveByTapeLibrary (string tapeLibraryId, string tapeDriveId, TapeDrive tapeDriveBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeDrive> localVarResponse = UpdateTapeDriveByTapeLibraryWithHttpInfo(tapeLibraryId, tapeDriveId, tapeDriveBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific tape drive. **API Key Scope**: tape_drives / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <param name="tapeDriveBody"></param>
        /// <returns>ApiResponse of TapeDrive</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TapeDrive > UpdateTapeDriveByTapeLibraryWithHttpInfo (string tapeLibraryId, string tapeDriveId, TapeDrive tapeDriveBody)
        {
            // verify the required parameter 'tapeLibraryId' is set
            if (tapeLibraryId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryId' when calling TapeDrivesApi->UpdateTapeDriveByTapeLibrary");

            // verify the required parameter 'tapeDriveId' is set
            if (tapeDriveId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeDriveId' when calling TapeDrivesApi->UpdateTapeDriveByTapeLibrary");

            // verify the required parameter 'tapeDriveBody' is set
            if (tapeDriveBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeDriveBody' when calling TapeDrivesApi->UpdateTapeDriveByTapeLibrary");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tapeLibraryId != null)
                localVarRequestOptions.PathParameters.Add("tape_library_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeLibraryId)); // path parameter
            if (tapeDriveId != null)
                localVarRequestOptions.PathParameters.Add("tape_drive_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeDriveId)); // path parameter
            localVarRequestOptions.Data = tapeDriveBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< TapeDrive >("/tape_libraries/{tape_library_id}/tape_drives/{tape_drive_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTapeDriveByTapeLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific tape drive. **API Key Scope**: tape_drives / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <param name="tapeDriveBody"></param>
        /// <returns>Task of TapeDrive</returns>
        public async System.Threading.Tasks.Task<TapeDrive> UpdateTapeDriveByTapeLibraryAsync (string tapeLibraryId, string tapeDriveId, TapeDrive tapeDriveBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeDrive> localVarResponse = await UpdateTapeDriveByTapeLibraryAsyncWithHttpInfo(tapeLibraryId, tapeDriveId, tapeDriveBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a specific tape drive. **API Key Scope**: tape_drives / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeDriveId">Numeric ID, serial, or name of tape drive.</param>
        /// <param name="tapeDriveBody"></param>
        /// <returns>Task of ApiResponse (TapeDrive)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TapeDrive>> UpdateTapeDriveByTapeLibraryAsyncWithHttpInfo (string tapeLibraryId, string tapeDriveId, TapeDrive tapeDriveBody)
        {
            // verify the required parameter 'tapeLibraryId' is set
            if (tapeLibraryId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryId' when calling TapeDrivesApi->UpdateTapeDriveByTapeLibrary");

            // verify the required parameter 'tapeDriveId' is set
            if (tapeDriveId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeDriveId' when calling TapeDrivesApi->UpdateTapeDriveByTapeLibrary");

            // verify the required parameter 'tapeDriveBody' is set
            if (tapeDriveBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeDriveBody' when calling TapeDrivesApi->UpdateTapeDriveByTapeLibrary");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tapeLibraryId != null)
                localVarRequestOptions.PathParameters.Add("tape_library_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeLibraryId)); // path parameter
            if (tapeDriveId != null)
                localVarRequestOptions.PathParameters.Add("tape_drive_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeDriveId)); // path parameter
            localVarRequestOptions.Data = tapeDriveBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<TapeDrive>("/tape_libraries/{tape_library_id}/tape_drives/{tape_drive_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTapeDriveByTapeLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
