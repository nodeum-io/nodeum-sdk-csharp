/* 
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Io.Nodeum.Sdk.Client;
using Io.Nodeum.Sdk.Model;

namespace Io.Nodeum.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITasksApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / create 
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskBody"></param>
        /// <returns>Task</returns>
        Task CreateTask (Task taskBody);

        /// <summary>
        /// Creates a new task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / create 
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskBody"></param>
        /// <returns>ApiResponse of Task</returns>
        ApiResponse<Task> CreateTaskWithHttpInfo (Task taskBody);
        /// <summary>
        /// Destroys a specific task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns></returns>
        void DestroyTask (string taskId);

        /// <summary>
        /// Destroys a specific task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyTaskWithHttpInfo (string taskId);
        /// <summary>
        /// Lists all tasks.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="workflowType">Filter on task workflow type (optional)</param>
        /// <param name="workflowAction">Filter on task workflow action (optional)</param>
        /// <param name="sourceType">Filter on task source type (optional)</param>
        /// <param name="destinationType">Filter on task destination type (optional)</param>
        /// <param name="priority">Filter on priority (optional)</param>
        /// <param name="conflictResolution">Filter on conflict resolution (optional)</param>
        /// <param name="action">Filter on action (optional)</param>
        /// <param name="activate">Filter on activate (optional)</param>
        /// <param name="creationDate">Filter on creation date (optional)</param>
        /// <param name="creationUsername">Filter on creation username (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="modificationUsername">Filter on modification username (optional)</param>
        /// <param name="jobStarted">Filter on job started (optional)</param>
        /// <param name="jobFinished">Filter on job finished (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="processedSize">Filter on processed size (optional)</param>
        /// <param name="toProcessSize">Filter on to process size (optional)</param>
        /// <param name="sourcePoolId">Filter on task source pool id (optional)</param>
        /// <param name="sourcePoolName">Filter on task source pool name (optional)</param>
        /// <param name="sourceTapeId">Filter on task source tape id (optional)</param>
        /// <param name="sourceTapeBarcode">Filter on task source tape barcode (optional)</param>
        /// <param name="destinationPoolId">Filter on task destination pool id (optional)</param>
        /// <param name="destinationPoolName">Filter on task destination pool name (optional)</param>
        /// <param name="destinationTapeId">Filter on task destination tape id (optional)</param>
        /// <param name="destinationTapeBarcode">Filter on task destination tape barcode (optional)</param>
        /// <returns>TaskCollection</returns>
        TaskCollection IndexTasks (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string workflowType = default(string), string workflowAction = default(string), string sourceType = default(string), string destinationType = default(string), string priority = default(string), string conflictResolution = default(string), string action = default(string), string activate = default(string), string creationDate = default(string), string creationUsername = default(string), string modificationDate = default(string), string modificationUsername = default(string), string jobStarted = default(string), string jobFinished = default(string), string status = default(string), string processedSize = default(string), string toProcessSize = default(string), string sourcePoolId = default(string), string sourcePoolName = default(string), string sourceTapeId = default(string), string sourceTapeBarcode = default(string), string destinationPoolId = default(string), string destinationPoolName = default(string), string destinationTapeId = default(string), string destinationTapeBarcode = default(string));

        /// <summary>
        /// Lists all tasks.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="workflowType">Filter on task workflow type (optional)</param>
        /// <param name="workflowAction">Filter on task workflow action (optional)</param>
        /// <param name="sourceType">Filter on task source type (optional)</param>
        /// <param name="destinationType">Filter on task destination type (optional)</param>
        /// <param name="priority">Filter on priority (optional)</param>
        /// <param name="conflictResolution">Filter on conflict resolution (optional)</param>
        /// <param name="action">Filter on action (optional)</param>
        /// <param name="activate">Filter on activate (optional)</param>
        /// <param name="creationDate">Filter on creation date (optional)</param>
        /// <param name="creationUsername">Filter on creation username (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="modificationUsername">Filter on modification username (optional)</param>
        /// <param name="jobStarted">Filter on job started (optional)</param>
        /// <param name="jobFinished">Filter on job finished (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="processedSize">Filter on processed size (optional)</param>
        /// <param name="toProcessSize">Filter on to process size (optional)</param>
        /// <param name="sourcePoolId">Filter on task source pool id (optional)</param>
        /// <param name="sourcePoolName">Filter on task source pool name (optional)</param>
        /// <param name="sourceTapeId">Filter on task source tape id (optional)</param>
        /// <param name="sourceTapeBarcode">Filter on task source tape barcode (optional)</param>
        /// <param name="destinationPoolId">Filter on task destination pool id (optional)</param>
        /// <param name="destinationPoolName">Filter on task destination pool name (optional)</param>
        /// <param name="destinationTapeId">Filter on task destination tape id (optional)</param>
        /// <param name="destinationTapeBarcode">Filter on task destination tape barcode (optional)</param>
        /// <returns>ApiResponse of TaskCollection</returns>
        ApiResponse<TaskCollection> IndexTasksWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string workflowType = default(string), string workflowAction = default(string), string sourceType = default(string), string destinationType = default(string), string priority = default(string), string conflictResolution = default(string), string action = default(string), string activate = default(string), string creationDate = default(string), string creationUsername = default(string), string modificationDate = default(string), string modificationUsername = default(string), string jobStarted = default(string), string jobFinished = default(string), string status = default(string), string processedSize = default(string), string toProcessSize = default(string), string sourcePoolId = default(string), string sourcePoolName = default(string), string sourceTapeId = default(string), string sourceTapeBarcode = default(string), string destinationPoolId = default(string), string destinationPoolName = default(string), string destinationTapeId = default(string), string destinationTapeBarcode = default(string));
        /// <summary>
        /// Pause a task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>ActiveJobStatus</returns>
        ActiveJobStatus PauseTask (string taskId);

        /// <summary>
        /// Pause a task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>ApiResponse of ActiveJobStatus</returns>
        ApiResponse<ActiveJobStatus> PauseTaskWithHttpInfo (string taskId);
        /// <summary>
        /// Check result of a task pause request.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ActiveJobStatus</returns>
        ActiveJobStatus PauseTaskResult (string taskId, string jobId);

        /// <summary>
        /// Check result of a task pause request.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ApiResponse of ActiveJobStatus</returns>
        ApiResponse<ActiveJobStatus> PauseTaskResultWithHttpInfo (string taskId, string jobId);
        /// <summary>
        /// Resume a task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>ActiveJobStatus</returns>
        ActiveJobStatus ResumeTask (string taskId);

        /// <summary>
        /// Resume a task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>ApiResponse of ActiveJobStatus</returns>
        ApiResponse<ActiveJobStatus> ResumeTaskWithHttpInfo (string taskId);
        /// <summary>
        /// Check result of a task resume request.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ActiveJobStatus</returns>
        ActiveJobStatus ResumeTaskResult (string taskId, string jobId);

        /// <summary>
        /// Check result of a task resume request.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ApiResponse of ActiveJobStatus</returns>
        ApiResponse<ActiveJobStatus> ResumeTaskResultWithHttpInfo (string taskId, string jobId);
        /// <summary>
        /// Run a task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>ActiveJobStatus</returns>
        ActiveJobStatus RunTask (string taskId);

        /// <summary>
        /// Run a task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>ApiResponse of ActiveJobStatus</returns>
        ApiResponse<ActiveJobStatus> RunTaskWithHttpInfo (string taskId);
        /// <summary>
        /// Check result of a task run request.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ActiveJobStatus</returns>
        ActiveJobStatus RunTaskResult (string taskId, string jobId);

        /// <summary>
        /// Check result of a task run request.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ApiResponse of ActiveJobStatus</returns>
        ApiResponse<ActiveJobStatus> RunTaskResultWithHttpInfo (string taskId, string jobId);
        /// <summary>
        /// Displays a specific task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task</returns>
        Task ShowTask (string taskId);

        /// <summary>
        /// Displays a specific task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>ApiResponse of Task</returns>
        ApiResponse<Task> ShowTaskWithHttpInfo (string taskId);
        /// <summary>
        /// Stop a task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>ActiveJobStatus</returns>
        ActiveJobStatus StopTask (string taskId);

        /// <summary>
        /// Stop a task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>ApiResponse of ActiveJobStatus</returns>
        ApiResponse<ActiveJobStatus> StopTaskWithHttpInfo (string taskId);
        /// <summary>
        /// Check result of a task stop request.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ActiveJobStatus</returns>
        ActiveJobStatus StopTaskResult (string taskId, string jobId);

        /// <summary>
        /// Check result of a task stop request.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ApiResponse of ActiveJobStatus</returns>
        ApiResponse<ActiveJobStatus> StopTaskResultWithHttpInfo (string taskId, string jobId);
        /// <summary>
        /// Updates a specific task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskBody"></param>
        /// <returns>Task</returns>
        Task UpdateTask (string taskId, Task taskBody);

        /// <summary>
        /// Updates a specific task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskBody"></param>
        /// <returns>ApiResponse of Task</returns>
        ApiResponse<Task> UpdateTaskWithHttpInfo (string taskId, Task taskBody);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITasksApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / create 
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskBody"></param>
        /// <returns>Task of Task</returns>
        System.Threading.Tasks.Task<Task> CreateTaskAsync (Task taskBody);

        /// <summary>
        /// Creates a new task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / create 
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskBody"></param>
        /// <returns>Task of ApiResponse (Task)</returns>
        System.Threading.Tasks.Task<ApiResponse<Task>> CreateTaskAsyncWithHttpInfo (Task taskBody);
        /// <summary>
        /// Destroys a specific task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyTaskAsync (string taskId);

        /// <summary>
        /// Destroys a specific task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyTaskAsyncWithHttpInfo (string taskId);
        /// <summary>
        /// Lists all tasks.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="workflowType">Filter on task workflow type (optional)</param>
        /// <param name="workflowAction">Filter on task workflow action (optional)</param>
        /// <param name="sourceType">Filter on task source type (optional)</param>
        /// <param name="destinationType">Filter on task destination type (optional)</param>
        /// <param name="priority">Filter on priority (optional)</param>
        /// <param name="conflictResolution">Filter on conflict resolution (optional)</param>
        /// <param name="action">Filter on action (optional)</param>
        /// <param name="activate">Filter on activate (optional)</param>
        /// <param name="creationDate">Filter on creation date (optional)</param>
        /// <param name="creationUsername">Filter on creation username (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="modificationUsername">Filter on modification username (optional)</param>
        /// <param name="jobStarted">Filter on job started (optional)</param>
        /// <param name="jobFinished">Filter on job finished (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="processedSize">Filter on processed size (optional)</param>
        /// <param name="toProcessSize">Filter on to process size (optional)</param>
        /// <param name="sourcePoolId">Filter on task source pool id (optional)</param>
        /// <param name="sourcePoolName">Filter on task source pool name (optional)</param>
        /// <param name="sourceTapeId">Filter on task source tape id (optional)</param>
        /// <param name="sourceTapeBarcode">Filter on task source tape barcode (optional)</param>
        /// <param name="destinationPoolId">Filter on task destination pool id (optional)</param>
        /// <param name="destinationPoolName">Filter on task destination pool name (optional)</param>
        /// <param name="destinationTapeId">Filter on task destination tape id (optional)</param>
        /// <param name="destinationTapeBarcode">Filter on task destination tape barcode (optional)</param>
        /// <returns>Task of TaskCollection</returns>
        System.Threading.Tasks.Task<TaskCollection> IndexTasksAsync (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string workflowType = default(string), string workflowAction = default(string), string sourceType = default(string), string destinationType = default(string), string priority = default(string), string conflictResolution = default(string), string action = default(string), string activate = default(string), string creationDate = default(string), string creationUsername = default(string), string modificationDate = default(string), string modificationUsername = default(string), string jobStarted = default(string), string jobFinished = default(string), string status = default(string), string processedSize = default(string), string toProcessSize = default(string), string sourcePoolId = default(string), string sourcePoolName = default(string), string sourceTapeId = default(string), string sourceTapeBarcode = default(string), string destinationPoolId = default(string), string destinationPoolName = default(string), string destinationTapeId = default(string), string destinationTapeBarcode = default(string));

        /// <summary>
        /// Lists all tasks.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="workflowType">Filter on task workflow type (optional)</param>
        /// <param name="workflowAction">Filter on task workflow action (optional)</param>
        /// <param name="sourceType">Filter on task source type (optional)</param>
        /// <param name="destinationType">Filter on task destination type (optional)</param>
        /// <param name="priority">Filter on priority (optional)</param>
        /// <param name="conflictResolution">Filter on conflict resolution (optional)</param>
        /// <param name="action">Filter on action (optional)</param>
        /// <param name="activate">Filter on activate (optional)</param>
        /// <param name="creationDate">Filter on creation date (optional)</param>
        /// <param name="creationUsername">Filter on creation username (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="modificationUsername">Filter on modification username (optional)</param>
        /// <param name="jobStarted">Filter on job started (optional)</param>
        /// <param name="jobFinished">Filter on job finished (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="processedSize">Filter on processed size (optional)</param>
        /// <param name="toProcessSize">Filter on to process size (optional)</param>
        /// <param name="sourcePoolId">Filter on task source pool id (optional)</param>
        /// <param name="sourcePoolName">Filter on task source pool name (optional)</param>
        /// <param name="sourceTapeId">Filter on task source tape id (optional)</param>
        /// <param name="sourceTapeBarcode">Filter on task source tape barcode (optional)</param>
        /// <param name="destinationPoolId">Filter on task destination pool id (optional)</param>
        /// <param name="destinationPoolName">Filter on task destination pool name (optional)</param>
        /// <param name="destinationTapeId">Filter on task destination tape id (optional)</param>
        /// <param name="destinationTapeBarcode">Filter on task destination tape barcode (optional)</param>
        /// <returns>Task of ApiResponse (TaskCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskCollection>> IndexTasksAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string workflowType = default(string), string workflowAction = default(string), string sourceType = default(string), string destinationType = default(string), string priority = default(string), string conflictResolution = default(string), string action = default(string), string activate = default(string), string creationDate = default(string), string creationUsername = default(string), string modificationDate = default(string), string modificationUsername = default(string), string jobStarted = default(string), string jobFinished = default(string), string status = default(string), string processedSize = default(string), string toProcessSize = default(string), string sourcePoolId = default(string), string sourcePoolName = default(string), string sourceTapeId = default(string), string sourceTapeBarcode = default(string), string destinationPoolId = default(string), string destinationPoolName = default(string), string destinationTapeId = default(string), string destinationTapeBarcode = default(string));
        /// <summary>
        /// Pause a task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of ActiveJobStatus</returns>
        System.Threading.Tasks.Task<ActiveJobStatus> PauseTaskAsync (string taskId);

        /// <summary>
        /// Pause a task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of ApiResponse (ActiveJobStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActiveJobStatus>> PauseTaskAsyncWithHttpInfo (string taskId);
        /// <summary>
        /// Check result of a task pause request.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ActiveJobStatus</returns>
        System.Threading.Tasks.Task<ActiveJobStatus> PauseTaskResultAsync (string taskId, string jobId);

        /// <summary>
        /// Check result of a task pause request.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ApiResponse (ActiveJobStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActiveJobStatus>> PauseTaskResultAsyncWithHttpInfo (string taskId, string jobId);
        /// <summary>
        /// Resume a task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of ActiveJobStatus</returns>
        System.Threading.Tasks.Task<ActiveJobStatus> ResumeTaskAsync (string taskId);

        /// <summary>
        /// Resume a task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of ApiResponse (ActiveJobStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActiveJobStatus>> ResumeTaskAsyncWithHttpInfo (string taskId);
        /// <summary>
        /// Check result of a task resume request.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ActiveJobStatus</returns>
        System.Threading.Tasks.Task<ActiveJobStatus> ResumeTaskResultAsync (string taskId, string jobId);

        /// <summary>
        /// Check result of a task resume request.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ApiResponse (ActiveJobStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActiveJobStatus>> ResumeTaskResultAsyncWithHttpInfo (string taskId, string jobId);
        /// <summary>
        /// Run a task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of ActiveJobStatus</returns>
        System.Threading.Tasks.Task<ActiveJobStatus> RunTaskAsync (string taskId);

        /// <summary>
        /// Run a task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of ApiResponse (ActiveJobStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActiveJobStatus>> RunTaskAsyncWithHttpInfo (string taskId);
        /// <summary>
        /// Check result of a task run request.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ActiveJobStatus</returns>
        System.Threading.Tasks.Task<ActiveJobStatus> RunTaskResultAsync (string taskId, string jobId);

        /// <summary>
        /// Check result of a task run request.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ApiResponse (ActiveJobStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActiveJobStatus>> RunTaskResultAsyncWithHttpInfo (string taskId, string jobId);
        /// <summary>
        /// Displays a specific task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of Task</returns>
        System.Threading.Tasks.Task<Task> ShowTaskAsync (string taskId);

        /// <summary>
        /// Displays a specific task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        System.Threading.Tasks.Task<ApiResponse<Task>> ShowTaskAsyncWithHttpInfo (string taskId);
        /// <summary>
        /// Stop a task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of ActiveJobStatus</returns>
        System.Threading.Tasks.Task<ActiveJobStatus> StopTaskAsync (string taskId);

        /// <summary>
        /// Stop a task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of ApiResponse (ActiveJobStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActiveJobStatus>> StopTaskAsyncWithHttpInfo (string taskId);
        /// <summary>
        /// Check result of a task stop request.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ActiveJobStatus</returns>
        System.Threading.Tasks.Task<ActiveJobStatus> StopTaskResultAsync (string taskId, string jobId);

        /// <summary>
        /// Check result of a task stop request.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / action
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ApiResponse (ActiveJobStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActiveJobStatus>> StopTaskResultAsyncWithHttpInfo (string taskId, string jobId);
        /// <summary>
        /// Updates a specific task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskBody"></param>
        /// <returns>Task of Task</returns>
        System.Threading.Tasks.Task<Task> UpdateTaskAsync (string taskId, Task taskBody);

        /// <summary>
        /// Updates a specific task.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tasks / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskBody"></param>
        /// <returns>Task of ApiResponse (Task)</returns>
        System.Threading.Tasks.Task<ApiResponse<Task>> UpdateTaskAsyncWithHttpInfo (string taskId, Task taskBody);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITasksApi : ITasksApiSync, ITasksApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TasksApi : ITasksApi
    {
        private Io.Nodeum.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TasksApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TasksApi(String basePath)
        {
            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                new Io.Nodeum.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TasksApi(Io.Nodeum.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TasksApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TasksApi(Io.Nodeum.Sdk.Client.ISynchronousClient client,Io.Nodeum.Sdk.Client.IAsynchronousClient asyncClient, Io.Nodeum.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Io.Nodeum.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a new task. **API Key Scope**: tasks / create 
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskBody"></param>
        /// <returns>Task</returns>
        public Task CreateTask (Task taskBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Task> localVarResponse = CreateTaskWithHttpInfo(taskBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new task. **API Key Scope**: tasks / create 
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskBody"></param>
        /// <returns>ApiResponse of Task</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< Task > CreateTaskWithHttpInfo (Task taskBody)
        {
            // verify the required parameter 'taskBody' is set
            if (taskBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskBody' when calling TasksApi->CreateTask");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = taskBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Task >("/tasks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new task. **API Key Scope**: tasks / create 
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskBody"></param>
        /// <returns>Task of Task</returns>
        public async System.Threading.Tasks.Task<Task> CreateTaskAsync (Task taskBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Task> localVarResponse = await CreateTaskAsyncWithHttpInfo(taskBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new task. **API Key Scope**: tasks / create 
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskBody"></param>
        /// <returns>Task of ApiResponse (Task)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Task>> CreateTaskAsyncWithHttpInfo (Task taskBody)
        {
            // verify the required parameter 'taskBody' is set
            if (taskBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskBody' when calling TasksApi->CreateTask");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = taskBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Task>("/tasks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific task. **API Key Scope**: tasks / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns></returns>
        public void DestroyTask (string taskId)
        {
             DestroyTaskWithHttpInfo(taskId);
        }

        /// <summary>
        /// Destroys a specific task. **API Key Scope**: tasks / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse<Object> DestroyTaskWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->DestroyTask");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/tasks/{task_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific task. **API Key Scope**: tasks / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyTaskAsync (string taskId)
        {
             await DestroyTaskAsyncWithHttpInfo(taskId);

        }

        /// <summary>
        /// Destroys a specific task. **API Key Scope**: tasks / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Object>> DestroyTaskAsyncWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->DestroyTask");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/tasks/{task_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all tasks. **API Key Scope**: tasks / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="workflowType">Filter on task workflow type (optional)</param>
        /// <param name="workflowAction">Filter on task workflow action (optional)</param>
        /// <param name="sourceType">Filter on task source type (optional)</param>
        /// <param name="destinationType">Filter on task destination type (optional)</param>
        /// <param name="priority">Filter on priority (optional)</param>
        /// <param name="conflictResolution">Filter on conflict resolution (optional)</param>
        /// <param name="action">Filter on action (optional)</param>
        /// <param name="activate">Filter on activate (optional)</param>
        /// <param name="creationDate">Filter on creation date (optional)</param>
        /// <param name="creationUsername">Filter on creation username (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="modificationUsername">Filter on modification username (optional)</param>
        /// <param name="jobStarted">Filter on job started (optional)</param>
        /// <param name="jobFinished">Filter on job finished (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="processedSize">Filter on processed size (optional)</param>
        /// <param name="toProcessSize">Filter on to process size (optional)</param>
        /// <param name="sourcePoolId">Filter on task source pool id (optional)</param>
        /// <param name="sourcePoolName">Filter on task source pool name (optional)</param>
        /// <param name="sourceTapeId">Filter on task source tape id (optional)</param>
        /// <param name="sourceTapeBarcode">Filter on task source tape barcode (optional)</param>
        /// <param name="destinationPoolId">Filter on task destination pool id (optional)</param>
        /// <param name="destinationPoolName">Filter on task destination pool name (optional)</param>
        /// <param name="destinationTapeId">Filter on task destination tape id (optional)</param>
        /// <param name="destinationTapeBarcode">Filter on task destination tape barcode (optional)</param>
        /// <returns>TaskCollection</returns>
        public TaskCollection IndexTasks (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string workflowType = default(string), string workflowAction = default(string), string sourceType = default(string), string destinationType = default(string), string priority = default(string), string conflictResolution = default(string), string action = default(string), string activate = default(string), string creationDate = default(string), string creationUsername = default(string), string modificationDate = default(string), string modificationUsername = default(string), string jobStarted = default(string), string jobFinished = default(string), string status = default(string), string processedSize = default(string), string toProcessSize = default(string), string sourcePoolId = default(string), string sourcePoolName = default(string), string sourceTapeId = default(string), string sourceTapeBarcode = default(string), string destinationPoolId = default(string), string destinationPoolName = default(string), string destinationTapeId = default(string), string destinationTapeBarcode = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TaskCollection> localVarResponse = IndexTasksWithHttpInfo(limit, offset, sortBy, id, name, comment, workflowType, workflowAction, sourceType, destinationType, priority, conflictResolution, action, activate, creationDate, creationUsername, modificationDate, modificationUsername, jobStarted, jobFinished, status, processedSize, toProcessSize, sourcePoolId, sourcePoolName, sourceTapeId, sourceTapeBarcode, destinationPoolId, destinationPoolName, destinationTapeId, destinationTapeBarcode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all tasks. **API Key Scope**: tasks / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="workflowType">Filter on task workflow type (optional)</param>
        /// <param name="workflowAction">Filter on task workflow action (optional)</param>
        /// <param name="sourceType">Filter on task source type (optional)</param>
        /// <param name="destinationType">Filter on task destination type (optional)</param>
        /// <param name="priority">Filter on priority (optional)</param>
        /// <param name="conflictResolution">Filter on conflict resolution (optional)</param>
        /// <param name="action">Filter on action (optional)</param>
        /// <param name="activate">Filter on activate (optional)</param>
        /// <param name="creationDate">Filter on creation date (optional)</param>
        /// <param name="creationUsername">Filter on creation username (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="modificationUsername">Filter on modification username (optional)</param>
        /// <param name="jobStarted">Filter on job started (optional)</param>
        /// <param name="jobFinished">Filter on job finished (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="processedSize">Filter on processed size (optional)</param>
        /// <param name="toProcessSize">Filter on to process size (optional)</param>
        /// <param name="sourcePoolId">Filter on task source pool id (optional)</param>
        /// <param name="sourcePoolName">Filter on task source pool name (optional)</param>
        /// <param name="sourceTapeId">Filter on task source tape id (optional)</param>
        /// <param name="sourceTapeBarcode">Filter on task source tape barcode (optional)</param>
        /// <param name="destinationPoolId">Filter on task destination pool id (optional)</param>
        /// <param name="destinationPoolName">Filter on task destination pool name (optional)</param>
        /// <param name="destinationTapeId">Filter on task destination tape id (optional)</param>
        /// <param name="destinationTapeBarcode">Filter on task destination tape barcode (optional)</param>
        /// <returns>ApiResponse of TaskCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TaskCollection > IndexTasksWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string workflowType = default(string), string workflowAction = default(string), string sourceType = default(string), string destinationType = default(string), string priority = default(string), string conflictResolution = default(string), string action = default(string), string activate = default(string), string creationDate = default(string), string creationUsername = default(string), string modificationDate = default(string), string modificationUsername = default(string), string jobStarted = default(string), string jobFinished = default(string), string status = default(string), string processedSize = default(string), string toProcessSize = default(string), string sourcePoolId = default(string), string sourcePoolName = default(string), string sourceTapeId = default(string), string sourceTapeBarcode = default(string), string destinationPoolId = default(string), string destinationPoolName = default(string), string destinationTapeId = default(string), string destinationTapeBarcode = default(string))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (workflowType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "workflow_type", workflowType));
            }
            if (workflowAction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "workflow_action", workflowAction));
            }
            if (sourceType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "source_type", sourceType));
            }
            if (destinationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "destination_type", destinationType));
            }
            if (priority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "priority", priority));
            }
            if (conflictResolution != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "conflict_resolution", conflictResolution));
            }
            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }
            if (activate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "activate", activate));
            }
            if (creationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "creation_date", creationDate));
            }
            if (creationUsername != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "creation_username", creationUsername));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (modificationUsername != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_username", modificationUsername));
            }
            if (jobStarted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_started", jobStarted));
            }
            if (jobFinished != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_finished", jobFinished));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (processedSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "processed_size", processedSize));
            }
            if (toProcessSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "to_process_size", toProcessSize));
            }
            if (sourcePoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "source_pool_id", sourcePoolId));
            }
            if (sourcePoolName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "source_pool_name", sourcePoolName));
            }
            if (sourceTapeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "source_tape_id", sourceTapeId));
            }
            if (sourceTapeBarcode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "source_tape_barcode", sourceTapeBarcode));
            }
            if (destinationPoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "destination_pool_id", destinationPoolId));
            }
            if (destinationPoolName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "destination_pool_name", destinationPoolName));
            }
            if (destinationTapeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "destination_tape_id", destinationTapeId));
            }
            if (destinationTapeBarcode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "destination_tape_barcode", destinationTapeBarcode));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TaskCollection >("/tasks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTasks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all tasks. **API Key Scope**: tasks / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="workflowType">Filter on task workflow type (optional)</param>
        /// <param name="workflowAction">Filter on task workflow action (optional)</param>
        /// <param name="sourceType">Filter on task source type (optional)</param>
        /// <param name="destinationType">Filter on task destination type (optional)</param>
        /// <param name="priority">Filter on priority (optional)</param>
        /// <param name="conflictResolution">Filter on conflict resolution (optional)</param>
        /// <param name="action">Filter on action (optional)</param>
        /// <param name="activate">Filter on activate (optional)</param>
        /// <param name="creationDate">Filter on creation date (optional)</param>
        /// <param name="creationUsername">Filter on creation username (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="modificationUsername">Filter on modification username (optional)</param>
        /// <param name="jobStarted">Filter on job started (optional)</param>
        /// <param name="jobFinished">Filter on job finished (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="processedSize">Filter on processed size (optional)</param>
        /// <param name="toProcessSize">Filter on to process size (optional)</param>
        /// <param name="sourcePoolId">Filter on task source pool id (optional)</param>
        /// <param name="sourcePoolName">Filter on task source pool name (optional)</param>
        /// <param name="sourceTapeId">Filter on task source tape id (optional)</param>
        /// <param name="sourceTapeBarcode">Filter on task source tape barcode (optional)</param>
        /// <param name="destinationPoolId">Filter on task destination pool id (optional)</param>
        /// <param name="destinationPoolName">Filter on task destination pool name (optional)</param>
        /// <param name="destinationTapeId">Filter on task destination tape id (optional)</param>
        /// <param name="destinationTapeBarcode">Filter on task destination tape barcode (optional)</param>
        /// <returns>Task of TaskCollection</returns>
        public async System.Threading.Tasks.Task<TaskCollection> IndexTasksAsync (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string workflowType = default(string), string workflowAction = default(string), string sourceType = default(string), string destinationType = default(string), string priority = default(string), string conflictResolution = default(string), string action = default(string), string activate = default(string), string creationDate = default(string), string creationUsername = default(string), string modificationDate = default(string), string modificationUsername = default(string), string jobStarted = default(string), string jobFinished = default(string), string status = default(string), string processedSize = default(string), string toProcessSize = default(string), string sourcePoolId = default(string), string sourcePoolName = default(string), string sourceTapeId = default(string), string sourceTapeBarcode = default(string), string destinationPoolId = default(string), string destinationPoolName = default(string), string destinationTapeId = default(string), string destinationTapeBarcode = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TaskCollection> localVarResponse = await IndexTasksAsyncWithHttpInfo(limit, offset, sortBy, id, name, comment, workflowType, workflowAction, sourceType, destinationType, priority, conflictResolution, action, activate, creationDate, creationUsername, modificationDate, modificationUsername, jobStarted, jobFinished, status, processedSize, toProcessSize, sourcePoolId, sourcePoolName, sourceTapeId, sourceTapeBarcode, destinationPoolId, destinationPoolName, destinationTapeId, destinationTapeBarcode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all tasks. **API Key Scope**: tasks / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="workflowType">Filter on task workflow type (optional)</param>
        /// <param name="workflowAction">Filter on task workflow action (optional)</param>
        /// <param name="sourceType">Filter on task source type (optional)</param>
        /// <param name="destinationType">Filter on task destination type (optional)</param>
        /// <param name="priority">Filter on priority (optional)</param>
        /// <param name="conflictResolution">Filter on conflict resolution (optional)</param>
        /// <param name="action">Filter on action (optional)</param>
        /// <param name="activate">Filter on activate (optional)</param>
        /// <param name="creationDate">Filter on creation date (optional)</param>
        /// <param name="creationUsername">Filter on creation username (optional)</param>
        /// <param name="modificationDate">Filter on modification date (optional)</param>
        /// <param name="modificationUsername">Filter on modification username (optional)</param>
        /// <param name="jobStarted">Filter on job started (optional)</param>
        /// <param name="jobFinished">Filter on job finished (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="processedSize">Filter on processed size (optional)</param>
        /// <param name="toProcessSize">Filter on to process size (optional)</param>
        /// <param name="sourcePoolId">Filter on task source pool id (optional)</param>
        /// <param name="sourcePoolName">Filter on task source pool name (optional)</param>
        /// <param name="sourceTapeId">Filter on task source tape id (optional)</param>
        /// <param name="sourceTapeBarcode">Filter on task source tape barcode (optional)</param>
        /// <param name="destinationPoolId">Filter on task destination pool id (optional)</param>
        /// <param name="destinationPoolName">Filter on task destination pool name (optional)</param>
        /// <param name="destinationTapeId">Filter on task destination tape id (optional)</param>
        /// <param name="destinationTapeBarcode">Filter on task destination tape barcode (optional)</param>
        /// <returns>Task of ApiResponse (TaskCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TaskCollection>> IndexTasksAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string workflowType = default(string), string workflowAction = default(string), string sourceType = default(string), string destinationType = default(string), string priority = default(string), string conflictResolution = default(string), string action = default(string), string activate = default(string), string creationDate = default(string), string creationUsername = default(string), string modificationDate = default(string), string modificationUsername = default(string), string jobStarted = default(string), string jobFinished = default(string), string status = default(string), string processedSize = default(string), string toProcessSize = default(string), string sourcePoolId = default(string), string sourcePoolName = default(string), string sourceTapeId = default(string), string sourceTapeBarcode = default(string), string destinationPoolId = default(string), string destinationPoolName = default(string), string destinationTapeId = default(string), string destinationTapeBarcode = default(string))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (workflowType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "workflow_type", workflowType));
            }
            if (workflowAction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "workflow_action", workflowAction));
            }
            if (sourceType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "source_type", sourceType));
            }
            if (destinationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "destination_type", destinationType));
            }
            if (priority != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "priority", priority));
            }
            if (conflictResolution != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "conflict_resolution", conflictResolution));
            }
            if (action != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "action", action));
            }
            if (activate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "activate", activate));
            }
            if (creationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "creation_date", creationDate));
            }
            if (creationUsername != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "creation_username", creationUsername));
            }
            if (modificationDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_date", modificationDate));
            }
            if (modificationUsername != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "modification_username", modificationUsername));
            }
            if (jobStarted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_started", jobStarted));
            }
            if (jobFinished != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_finished", jobFinished));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (processedSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "processed_size", processedSize));
            }
            if (toProcessSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "to_process_size", toProcessSize));
            }
            if (sourcePoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "source_pool_id", sourcePoolId));
            }
            if (sourcePoolName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "source_pool_name", sourcePoolName));
            }
            if (sourceTapeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "source_tape_id", sourceTapeId));
            }
            if (sourceTapeBarcode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "source_tape_barcode", sourceTapeBarcode));
            }
            if (destinationPoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "destination_pool_id", destinationPoolId));
            }
            if (destinationPoolName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "destination_pool_name", destinationPoolName));
            }
            if (destinationTapeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "destination_tape_id", destinationTapeId));
            }
            if (destinationTapeBarcode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "destination_tape_barcode", destinationTapeBarcode));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TaskCollection>("/tasks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTasks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pause a task. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>ActiveJobStatus</returns>
        public ActiveJobStatus PauseTask (string taskId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus> localVarResponse = PauseTaskWithHttpInfo(taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pause a task. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>ApiResponse of ActiveJobStatus</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ActiveJobStatus > PauseTaskWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->PauseTask");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< ActiveJobStatus >("/tasks/{task_id}/action/pause", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PauseTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pause a task. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of ActiveJobStatus</returns>
        public async System.Threading.Tasks.Task<ActiveJobStatus> PauseTaskAsync (string taskId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus> localVarResponse = await PauseTaskAsyncWithHttpInfo(taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pause a task. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of ApiResponse (ActiveJobStatus)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus>> PauseTaskAsyncWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->PauseTask");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ActiveJobStatus>("/tasks/{task_id}/action/pause", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PauseTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check result of a task pause request. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ActiveJobStatus</returns>
        public ActiveJobStatus PauseTaskResult (string taskId, string jobId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus> localVarResponse = PauseTaskResultWithHttpInfo(taskId, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check result of a task pause request. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ApiResponse of ActiveJobStatus</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ActiveJobStatus > PauseTaskResultWithHttpInfo (string taskId, string jobId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->PauseTaskResult");

            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'jobId' when calling TasksApi->PauseTaskResult");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ActiveJobStatus >("/tasks/{task_id}/action/pause", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PauseTaskResult", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check result of a task pause request. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ActiveJobStatus</returns>
        public async System.Threading.Tasks.Task<ActiveJobStatus> PauseTaskResultAsync (string taskId, string jobId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus> localVarResponse = await PauseTaskResultAsyncWithHttpInfo(taskId, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check result of a task pause request. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ApiResponse (ActiveJobStatus)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus>> PauseTaskResultAsyncWithHttpInfo (string taskId, string jobId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->PauseTaskResult");

            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'jobId' when calling TasksApi->PauseTaskResult");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ActiveJobStatus>("/tasks/{task_id}/action/pause", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PauseTaskResult", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resume a task. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>ActiveJobStatus</returns>
        public ActiveJobStatus ResumeTask (string taskId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus> localVarResponse = ResumeTaskWithHttpInfo(taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Resume a task. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>ApiResponse of ActiveJobStatus</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ActiveJobStatus > ResumeTaskWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->ResumeTask");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< ActiveJobStatus >("/tasks/{task_id}/action/resume", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResumeTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resume a task. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of ActiveJobStatus</returns>
        public async System.Threading.Tasks.Task<ActiveJobStatus> ResumeTaskAsync (string taskId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus> localVarResponse = await ResumeTaskAsyncWithHttpInfo(taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Resume a task. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of ApiResponse (ActiveJobStatus)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus>> ResumeTaskAsyncWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->ResumeTask");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ActiveJobStatus>("/tasks/{task_id}/action/resume", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResumeTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check result of a task resume request. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ActiveJobStatus</returns>
        public ActiveJobStatus ResumeTaskResult (string taskId, string jobId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus> localVarResponse = ResumeTaskResultWithHttpInfo(taskId, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check result of a task resume request. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ApiResponse of ActiveJobStatus</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ActiveJobStatus > ResumeTaskResultWithHttpInfo (string taskId, string jobId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->ResumeTaskResult");

            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'jobId' when calling TasksApi->ResumeTaskResult");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ActiveJobStatus >("/tasks/{task_id}/action/resume", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResumeTaskResult", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check result of a task resume request. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ActiveJobStatus</returns>
        public async System.Threading.Tasks.Task<ActiveJobStatus> ResumeTaskResultAsync (string taskId, string jobId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus> localVarResponse = await ResumeTaskResultAsyncWithHttpInfo(taskId, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check result of a task resume request. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ApiResponse (ActiveJobStatus)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus>> ResumeTaskResultAsyncWithHttpInfo (string taskId, string jobId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->ResumeTaskResult");

            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'jobId' when calling TasksApi->ResumeTaskResult");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ActiveJobStatus>("/tasks/{task_id}/action/resume", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResumeTaskResult", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run a task. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>ActiveJobStatus</returns>
        public ActiveJobStatus RunTask (string taskId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus> localVarResponse = RunTaskWithHttpInfo(taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Run a task. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>ApiResponse of ActiveJobStatus</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ActiveJobStatus > RunTaskWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->RunTask");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< ActiveJobStatus >("/tasks/{task_id}/action/run", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run a task. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of ActiveJobStatus</returns>
        public async System.Threading.Tasks.Task<ActiveJobStatus> RunTaskAsync (string taskId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus> localVarResponse = await RunTaskAsyncWithHttpInfo(taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Run a task. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of ApiResponse (ActiveJobStatus)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus>> RunTaskAsyncWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->RunTask");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ActiveJobStatus>("/tasks/{task_id}/action/run", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check result of a task run request. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ActiveJobStatus</returns>
        public ActiveJobStatus RunTaskResult (string taskId, string jobId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus> localVarResponse = RunTaskResultWithHttpInfo(taskId, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check result of a task run request. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ApiResponse of ActiveJobStatus</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ActiveJobStatus > RunTaskResultWithHttpInfo (string taskId, string jobId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->RunTaskResult");

            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'jobId' when calling TasksApi->RunTaskResult");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ActiveJobStatus >("/tasks/{task_id}/action/run", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunTaskResult", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check result of a task run request. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ActiveJobStatus</returns>
        public async System.Threading.Tasks.Task<ActiveJobStatus> RunTaskResultAsync (string taskId, string jobId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus> localVarResponse = await RunTaskResultAsyncWithHttpInfo(taskId, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check result of a task run request. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ApiResponse (ActiveJobStatus)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus>> RunTaskResultAsyncWithHttpInfo (string taskId, string jobId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->RunTaskResult");

            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'jobId' when calling TasksApi->RunTaskResult");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ActiveJobStatus>("/tasks/{task_id}/action/run", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunTaskResult", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific task. **API Key Scope**: tasks / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task</returns>
        public Task ShowTask (string taskId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Task> localVarResponse = ShowTaskWithHttpInfo(taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific task. **API Key Scope**: tasks / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>ApiResponse of Task</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< Task > ShowTaskWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->ShowTask");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Task >("/tasks/{task_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific task. **API Key Scope**: tasks / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of Task</returns>
        public async System.Threading.Tasks.Task<Task> ShowTaskAsync (string taskId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Task> localVarResponse = await ShowTaskAsyncWithHttpInfo(taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific task. **API Key Scope**: tasks / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Task>> ShowTaskAsyncWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->ShowTask");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Task>("/tasks/{task_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop a task. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>ActiveJobStatus</returns>
        public ActiveJobStatus StopTask (string taskId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus> localVarResponse = StopTaskWithHttpInfo(taskId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stop a task. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>ApiResponse of ActiveJobStatus</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ActiveJobStatus > StopTaskWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->StopTask");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< ActiveJobStatus >("/tasks/{task_id}/action/stop", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop a task. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of ActiveJobStatus</returns>
        public async System.Threading.Tasks.Task<ActiveJobStatus> StopTaskAsync (string taskId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus> localVarResponse = await StopTaskAsyncWithHttpInfo(taskId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stop a task. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <returns>Task of ApiResponse (ActiveJobStatus)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus>> StopTaskAsyncWithHttpInfo (string taskId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->StopTask");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ActiveJobStatus>("/tasks/{task_id}/action/stop", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check result of a task stop request. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ActiveJobStatus</returns>
        public ActiveJobStatus StopTaskResult (string taskId, string jobId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus> localVarResponse = StopTaskResultWithHttpInfo(taskId, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check result of a task stop request. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ApiResponse of ActiveJobStatus</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ActiveJobStatus > StopTaskResultWithHttpInfo (string taskId, string jobId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->StopTaskResult");

            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'jobId' when calling TasksApi->StopTaskResult");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ActiveJobStatus >("/tasks/{task_id}/action/stop", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopTaskResult", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check result of a task stop request. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ActiveJobStatus</returns>
        public async System.Threading.Tasks.Task<ActiveJobStatus> StopTaskResultAsync (string taskId, string jobId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus> localVarResponse = await StopTaskResultAsyncWithHttpInfo(taskId, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check result of a task stop request. **API Key Scope**: tasks / action
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ApiResponse (ActiveJobStatus)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus>> StopTaskResultAsyncWithHttpInfo (string taskId, string jobId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->StopTaskResult");

            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'jobId' when calling TasksApi->StopTaskResult");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ActiveJobStatus>("/tasks/{task_id}/action/stop", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopTaskResult", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific task. **API Key Scope**: tasks / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskBody"></param>
        /// <returns>Task</returns>
        public Task UpdateTask (string taskId, Task taskBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Task> localVarResponse = UpdateTaskWithHttpInfo(taskId, taskBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific task. **API Key Scope**: tasks / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskBody"></param>
        /// <returns>ApiResponse of Task</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< Task > UpdateTaskWithHttpInfo (string taskId, Task taskBody)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->UpdateTask");

            // verify the required parameter 'taskBody' is set
            if (taskBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskBody' when calling TasksApi->UpdateTask");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.Data = taskBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Task >("/tasks/{task_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific task. **API Key Scope**: tasks / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskBody"></param>
        /// <returns>Task of Task</returns>
        public async System.Threading.Tasks.Task<Task> UpdateTaskAsync (string taskId, Task taskBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Task> localVarResponse = await UpdateTaskAsyncWithHttpInfo(taskId, taskBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a specific task. **API Key Scope**: tasks / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskBody"></param>
        /// <returns>Task of ApiResponse (Task)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Task>> UpdateTaskAsyncWithHttpInfo (string taskId, Task taskBody)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TasksApi->UpdateTask");

            // verify the required parameter 'taskBody' is set
            if (taskBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskBody' when calling TasksApi->UpdateTask");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.Data = taskBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Task>("/tasks/{task_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTask", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
