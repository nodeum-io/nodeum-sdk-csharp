/* 
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Io.Nodeum.Sdk.Client;
using Io.Nodeum.Sdk.Model;

namespace Io.Nodeum.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPoolsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolBody"></param>
        /// <returns>Pool</returns>
        Pool CreatePool (PoolUp poolBody);

        /// <summary>
        /// Creates a new pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolBody"></param>
        /// <returns>ApiResponse of Pool</returns>
        ApiResponse<Pool> CreatePoolWithHttpInfo (PoolUp poolBody);
        /// <summary>
        /// Set a new primary pool scan option.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: primary_scans / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="primaryScanBody"></param>
        /// <returns>PrimaryScan</returns>
        PrimaryScan CreatePrimaryScan (string poolId, PrimaryScan primaryScanBody);

        /// <summary>
        /// Set a new primary pool scan option.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: primary_scans / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="primaryScanBody"></param>
        /// <returns>ApiResponse of PrimaryScan</returns>
        ApiResponse<PrimaryScan> CreatePrimaryScanWithHttpInfo (string poolId, PrimaryScan primaryScanBody);
        /// <summary>
        /// Destroys a specific tape pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns></returns>
        void DestroyPool (string poolId);

        /// <summary>
        /// Destroys a specific tape pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyPoolWithHttpInfo (string poolId);
        /// <summary>
        /// Disable the primary pool scan.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: primary_scans / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns></returns>
        void DestroyPrimaryScan (string poolId);

        /// <summary>
        /// Disable the primary pool scan.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: primary_scans / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyPrimaryScanWithHttpInfo (string poolId);
        /// <summary>
        /// Lists all pools.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="content">Filter on content (optional)</param>
        /// <param name="primaryId">Filter on primary id (optional)</param>
        /// <returns>PoolCollection</returns>
        PoolCollection IndexPools (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string type = default(string), string content = default(string), string primaryId = default(string));

        /// <summary>
        /// Lists all pools.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="content">Filter on content (optional)</param>
        /// <param name="primaryId">Filter on primary id (optional)</param>
        /// <returns>ApiResponse of PoolCollection</returns>
        ApiResponse<PoolCollection> IndexPoolsWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string type = default(string), string content = default(string), string primaryId = default(string));
        /// <summary>
        /// Mount Pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / mount
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>MountStatus</returns>
        MountStatus MountPool (string poolId);

        /// <summary>
        /// Mount Pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / mount
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>ApiResponse of MountStatus</returns>
        ApiResponse<MountStatus> MountPoolWithHttpInfo (string poolId);
        /// <summary>
        /// Get mount status of Pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>MountStatus</returns>
        MountStatus MountStatusPool (string poolId);

        /// <summary>
        /// Get mount status of Pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>ApiResponse of MountStatus</returns>
        ApiResponse<MountStatus> MountStatusPoolWithHttpInfo (string poolId);
        /// <summary>
        /// Displays a specific pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Pool</returns>
        Pool ShowPool (string poolId);

        /// <summary>
        /// Displays a specific pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>ApiResponse of Pool</returns>
        ApiResponse<Pool> ShowPoolWithHttpInfo (string poolId);
        /// <summary>
        /// Displays the primary pool scan status.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: primary_scans / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>PrimaryScan</returns>
        PrimaryScan ShowPrimaryScan (string poolId);

        /// <summary>
        /// Displays the primary pool scan status.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: primary_scans / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>ApiResponse of PrimaryScan</returns>
        ApiResponse<PrimaryScan> ShowPrimaryScanWithHttpInfo (string poolId);
        /// <summary>
        /// Synchronize a primary after a scan (for internal use only).
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / sync_primary
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tx">New transaction number.</param>
        /// <returns></returns>
        void SyncPrimaryPool (string poolId, int tx);

        /// <summary>
        /// Synchronize a primary after a scan (for internal use only).
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / sync_primary
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tx">New transaction number.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SyncPrimaryPoolWithHttpInfo (string poolId, int tx);
        /// <summary>
        /// Unmount Pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / unmount
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>MountStatus</returns>
        MountStatus UnmountPool (string poolId);

        /// <summary>
        /// Unmount Pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / unmount
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>ApiResponse of MountStatus</returns>
        ApiResponse<MountStatus> UnmountPoolWithHttpInfo (string poolId);
        /// <summary>
        /// Updates a specific pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="poolBody"></param>
        /// <returns>Pool</returns>
        Pool UpdatePool (string poolId, PoolUp poolBody);

        /// <summary>
        /// Updates a specific pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="poolBody"></param>
        /// <returns>ApiResponse of Pool</returns>
        ApiResponse<Pool> UpdatePoolWithHttpInfo (string poolId, PoolUp poolBody);
        /// <summary>
        /// Updates the existing primary pool scan option.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: primary_scans / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="primaryScanBody"></param>
        /// <returns>PrimaryScan</returns>
        PrimaryScan UpdatePrimaryScan (string poolId, PrimaryScan primaryScanBody);

        /// <summary>
        /// Updates the existing primary pool scan option.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: primary_scans / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="primaryScanBody"></param>
        /// <returns>ApiResponse of PrimaryScan</returns>
        ApiResponse<PrimaryScan> UpdatePrimaryScanWithHttpInfo (string poolId, PrimaryScan primaryScanBody);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPoolsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolBody"></param>
        /// <returns>Task of Pool</returns>
        System.Threading.Tasks.Task<Pool> CreatePoolAsync (PoolUp poolBody);

        /// <summary>
        /// Creates a new pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolBody"></param>
        /// <returns>Task of ApiResponse (Pool)</returns>
        System.Threading.Tasks.Task<ApiResponse<Pool>> CreatePoolAsyncWithHttpInfo (PoolUp poolBody);
        /// <summary>
        /// Set a new primary pool scan option.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: primary_scans / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="primaryScanBody"></param>
        /// <returns>Task of PrimaryScan</returns>
        System.Threading.Tasks.Task<PrimaryScan> CreatePrimaryScanAsync (string poolId, PrimaryScan primaryScanBody);

        /// <summary>
        /// Set a new primary pool scan option.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: primary_scans / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="primaryScanBody"></param>
        /// <returns>Task of ApiResponse (PrimaryScan)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrimaryScan>> CreatePrimaryScanAsyncWithHttpInfo (string poolId, PrimaryScan primaryScanBody);
        /// <summary>
        /// Destroys a specific tape pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyPoolAsync (string poolId);

        /// <summary>
        /// Destroys a specific tape pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyPoolAsyncWithHttpInfo (string poolId);
        /// <summary>
        /// Disable the primary pool scan.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: primary_scans / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyPrimaryScanAsync (string poolId);

        /// <summary>
        /// Disable the primary pool scan.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: primary_scans / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyPrimaryScanAsyncWithHttpInfo (string poolId);
        /// <summary>
        /// Lists all pools.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="content">Filter on content (optional)</param>
        /// <param name="primaryId">Filter on primary id (optional)</param>
        /// <returns>Task of PoolCollection</returns>
        System.Threading.Tasks.Task<PoolCollection> IndexPoolsAsync (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string type = default(string), string content = default(string), string primaryId = default(string));

        /// <summary>
        /// Lists all pools.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="content">Filter on content (optional)</param>
        /// <param name="primaryId">Filter on primary id (optional)</param>
        /// <returns>Task of ApiResponse (PoolCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<PoolCollection>> IndexPoolsAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string type = default(string), string content = default(string), string primaryId = default(string));
        /// <summary>
        /// Mount Pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / mount
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of MountStatus</returns>
        System.Threading.Tasks.Task<MountStatus> MountPoolAsync (string poolId);

        /// <summary>
        /// Mount Pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / mount
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of ApiResponse (MountStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<MountStatus>> MountPoolAsyncWithHttpInfo (string poolId);
        /// <summary>
        /// Get mount status of Pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of MountStatus</returns>
        System.Threading.Tasks.Task<MountStatus> MountStatusPoolAsync (string poolId);

        /// <summary>
        /// Get mount status of Pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of ApiResponse (MountStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<MountStatus>> MountStatusPoolAsyncWithHttpInfo (string poolId);
        /// <summary>
        /// Displays a specific pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of Pool</returns>
        System.Threading.Tasks.Task<Pool> ShowPoolAsync (string poolId);

        /// <summary>
        /// Displays a specific pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of ApiResponse (Pool)</returns>
        System.Threading.Tasks.Task<ApiResponse<Pool>> ShowPoolAsyncWithHttpInfo (string poolId);
        /// <summary>
        /// Displays the primary pool scan status.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: primary_scans / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of PrimaryScan</returns>
        System.Threading.Tasks.Task<PrimaryScan> ShowPrimaryScanAsync (string poolId);

        /// <summary>
        /// Displays the primary pool scan status.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: primary_scans / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of ApiResponse (PrimaryScan)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrimaryScan>> ShowPrimaryScanAsyncWithHttpInfo (string poolId);
        /// <summary>
        /// Synchronize a primary after a scan (for internal use only).
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / sync_primary
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tx">New transaction number.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SyncPrimaryPoolAsync (string poolId, int tx);

        /// <summary>
        /// Synchronize a primary after a scan (for internal use only).
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / sync_primary
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tx">New transaction number.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SyncPrimaryPoolAsyncWithHttpInfo (string poolId, int tx);
        /// <summary>
        /// Unmount Pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / unmount
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of MountStatus</returns>
        System.Threading.Tasks.Task<MountStatus> UnmountPoolAsync (string poolId);

        /// <summary>
        /// Unmount Pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / unmount
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of ApiResponse (MountStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<MountStatus>> UnmountPoolAsyncWithHttpInfo (string poolId);
        /// <summary>
        /// Updates a specific pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="poolBody"></param>
        /// <returns>Task of Pool</returns>
        System.Threading.Tasks.Task<Pool> UpdatePoolAsync (string poolId, PoolUp poolBody);

        /// <summary>
        /// Updates a specific pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: pools / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="poolBody"></param>
        /// <returns>Task of ApiResponse (Pool)</returns>
        System.Threading.Tasks.Task<ApiResponse<Pool>> UpdatePoolAsyncWithHttpInfo (string poolId, PoolUp poolBody);
        /// <summary>
        /// Updates the existing primary pool scan option.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: primary_scans / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="primaryScanBody"></param>
        /// <returns>Task of PrimaryScan</returns>
        System.Threading.Tasks.Task<PrimaryScan> UpdatePrimaryScanAsync (string poolId, PrimaryScan primaryScanBody);

        /// <summary>
        /// Updates the existing primary pool scan option.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: primary_scans / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="primaryScanBody"></param>
        /// <returns>Task of ApiResponse (PrimaryScan)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrimaryScan>> UpdatePrimaryScanAsyncWithHttpInfo (string poolId, PrimaryScan primaryScanBody);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPoolsApi : IPoolsApiSync, IPoolsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PoolsApi : IPoolsApi
    {
        private Io.Nodeum.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PoolsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PoolsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PoolsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PoolsApi(String basePath)
        {
            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                new Io.Nodeum.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PoolsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PoolsApi(Io.Nodeum.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PoolsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PoolsApi(Io.Nodeum.Sdk.Client.ISynchronousClient client,Io.Nodeum.Sdk.Client.IAsynchronousClient asyncClient, Io.Nodeum.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Io.Nodeum.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a new pool. **API Key Scope**: pools / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolBody"></param>
        /// <returns>Pool</returns>
        public Pool CreatePool (PoolUp poolBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Pool> localVarResponse = CreatePoolWithHttpInfo(poolBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new pool. **API Key Scope**: pools / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolBody"></param>
        /// <returns>ApiResponse of Pool</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< Pool > CreatePoolWithHttpInfo (PoolUp poolBody)
        {
            // verify the required parameter 'poolBody' is set
            if (poolBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolBody' when calling PoolsApi->CreatePool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = poolBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Pool >("/pools", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new pool. **API Key Scope**: pools / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolBody"></param>
        /// <returns>Task of Pool</returns>
        public async System.Threading.Tasks.Task<Pool> CreatePoolAsync (PoolUp poolBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Pool> localVarResponse = await CreatePoolAsyncWithHttpInfo(poolBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new pool. **API Key Scope**: pools / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolBody"></param>
        /// <returns>Task of ApiResponse (Pool)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Pool>> CreatePoolAsyncWithHttpInfo (PoolUp poolBody)
        {
            // verify the required parameter 'poolBody' is set
            if (poolBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolBody' when calling PoolsApi->CreatePool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = poolBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Pool>("/pools", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set a new primary pool scan option. **API Key Scope**: primary_scans / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="primaryScanBody"></param>
        /// <returns>PrimaryScan</returns>
        public PrimaryScan CreatePrimaryScan (string poolId, PrimaryScan primaryScanBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<PrimaryScan> localVarResponse = CreatePrimaryScanWithHttpInfo(poolId, primaryScanBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set a new primary pool scan option. **API Key Scope**: primary_scans / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="primaryScanBody"></param>
        /// <returns>ApiResponse of PrimaryScan</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< PrimaryScan > CreatePrimaryScanWithHttpInfo (string poolId, PrimaryScan primaryScanBody)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling PoolsApi->CreatePrimaryScan");

            // verify the required parameter 'primaryScanBody' is set
            if (primaryScanBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'primaryScanBody' when calling PoolsApi->CreatePrimaryScan");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.Data = primaryScanBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< PrimaryScan >("/pools/{pool_id}/primary_scan", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePrimaryScan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set a new primary pool scan option. **API Key Scope**: primary_scans / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="primaryScanBody"></param>
        /// <returns>Task of PrimaryScan</returns>
        public async System.Threading.Tasks.Task<PrimaryScan> CreatePrimaryScanAsync (string poolId, PrimaryScan primaryScanBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<PrimaryScan> localVarResponse = await CreatePrimaryScanAsyncWithHttpInfo(poolId, primaryScanBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set a new primary pool scan option. **API Key Scope**: primary_scans / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="primaryScanBody"></param>
        /// <returns>Task of ApiResponse (PrimaryScan)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<PrimaryScan>> CreatePrimaryScanAsyncWithHttpInfo (string poolId, PrimaryScan primaryScanBody)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling PoolsApi->CreatePrimaryScan");

            // verify the required parameter 'primaryScanBody' is set
            if (primaryScanBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'primaryScanBody' when calling PoolsApi->CreatePrimaryScan");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.Data = primaryScanBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PrimaryScan>("/pools/{pool_id}/primary_scan", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePrimaryScan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific tape pool. **API Key Scope**: pools / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns></returns>
        public void DestroyPool (string poolId)
        {
             DestroyPoolWithHttpInfo(poolId);
        }

        /// <summary>
        /// Destroys a specific tape pool. **API Key Scope**: pools / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse<Object> DestroyPoolWithHttpInfo (string poolId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling PoolsApi->DestroyPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/pools/{pool_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific tape pool. **API Key Scope**: pools / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyPoolAsync (string poolId)
        {
             await DestroyPoolAsyncWithHttpInfo(poolId);

        }

        /// <summary>
        /// Destroys a specific tape pool. **API Key Scope**: pools / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Object>> DestroyPoolAsyncWithHttpInfo (string poolId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling PoolsApi->DestroyPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/pools/{pool_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disable the primary pool scan. **API Key Scope**: primary_scans / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns></returns>
        public void DestroyPrimaryScan (string poolId)
        {
             DestroyPrimaryScanWithHttpInfo(poolId);
        }

        /// <summary>
        /// Disable the primary pool scan. **API Key Scope**: primary_scans / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse<Object> DestroyPrimaryScanWithHttpInfo (string poolId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling PoolsApi->DestroyPrimaryScan");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/pools/{pool_id}/primary_scan", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyPrimaryScan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disable the primary pool scan. **API Key Scope**: primary_scans / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyPrimaryScanAsync (string poolId)
        {
             await DestroyPrimaryScanAsyncWithHttpInfo(poolId);

        }

        /// <summary>
        /// Disable the primary pool scan. **API Key Scope**: primary_scans / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Object>> DestroyPrimaryScanAsyncWithHttpInfo (string poolId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling PoolsApi->DestroyPrimaryScan");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/pools/{pool_id}/primary_scan", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyPrimaryScan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all pools. **API Key Scope**: pools / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="content">Filter on content (optional)</param>
        /// <param name="primaryId">Filter on primary id (optional)</param>
        /// <returns>PoolCollection</returns>
        public PoolCollection IndexPools (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string type = default(string), string content = default(string), string primaryId = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<PoolCollection> localVarResponse = IndexPoolsWithHttpInfo(limit, offset, sortBy, id, name, comment, type, content, primaryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all pools. **API Key Scope**: pools / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="content">Filter on content (optional)</param>
        /// <param name="primaryId">Filter on primary id (optional)</param>
        /// <returns>ApiResponse of PoolCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< PoolCollection > IndexPoolsWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string type = default(string), string content = default(string), string primaryId = default(string))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (content != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "content", content));
            }
            if (primaryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "primary_id", primaryId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PoolCollection >("/pools", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexPools", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all pools. **API Key Scope**: pools / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="content">Filter on content (optional)</param>
        /// <param name="primaryId">Filter on primary id (optional)</param>
        /// <returns>Task of PoolCollection</returns>
        public async System.Threading.Tasks.Task<PoolCollection> IndexPoolsAsync (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string type = default(string), string content = default(string), string primaryId = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<PoolCollection> localVarResponse = await IndexPoolsAsyncWithHttpInfo(limit, offset, sortBy, id, name, comment, type, content, primaryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all pools. **API Key Scope**: pools / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="content">Filter on content (optional)</param>
        /// <param name="primaryId">Filter on primary id (optional)</param>
        /// <returns>Task of ApiResponse (PoolCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<PoolCollection>> IndexPoolsAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string type = default(string), string content = default(string), string primaryId = default(string))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (content != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "content", content));
            }
            if (primaryId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "primary_id", primaryId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PoolCollection>("/pools", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexPools", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mount Pool. **API Key Scope**: pools / mount
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>MountStatus</returns>
        public MountStatus MountPool (string poolId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<MountStatus> localVarResponse = MountPoolWithHttpInfo(poolId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mount Pool. **API Key Scope**: pools / mount
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>ApiResponse of MountStatus</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< MountStatus > MountPoolWithHttpInfo (string poolId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling PoolsApi->MountPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< MountStatus >("/pools/{pool_id}/mount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MountPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Mount Pool. **API Key Scope**: pools / mount
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of MountStatus</returns>
        public async System.Threading.Tasks.Task<MountStatus> MountPoolAsync (string poolId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<MountStatus> localVarResponse = await MountPoolAsyncWithHttpInfo(poolId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mount Pool. **API Key Scope**: pools / mount
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of ApiResponse (MountStatus)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<MountStatus>> MountPoolAsyncWithHttpInfo (string poolId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling PoolsApi->MountPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<MountStatus>("/pools/{pool_id}/mount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MountPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mount status of Pool. **API Key Scope**: pools / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>MountStatus</returns>
        public MountStatus MountStatusPool (string poolId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<MountStatus> localVarResponse = MountStatusPoolWithHttpInfo(poolId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get mount status of Pool. **API Key Scope**: pools / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>ApiResponse of MountStatus</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< MountStatus > MountStatusPoolWithHttpInfo (string poolId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling PoolsApi->MountStatusPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< MountStatus >("/pools/{pool_id}/mount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MountStatusPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mount status of Pool. **API Key Scope**: pools / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of MountStatus</returns>
        public async System.Threading.Tasks.Task<MountStatus> MountStatusPoolAsync (string poolId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<MountStatus> localVarResponse = await MountStatusPoolAsyncWithHttpInfo(poolId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get mount status of Pool. **API Key Scope**: pools / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of ApiResponse (MountStatus)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<MountStatus>> MountStatusPoolAsyncWithHttpInfo (string poolId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling PoolsApi->MountStatusPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MountStatus>("/pools/{pool_id}/mount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MountStatusPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific pool. **API Key Scope**: pools / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Pool</returns>
        public Pool ShowPool (string poolId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Pool> localVarResponse = ShowPoolWithHttpInfo(poolId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific pool. **API Key Scope**: pools / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>ApiResponse of Pool</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< Pool > ShowPoolWithHttpInfo (string poolId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling PoolsApi->ShowPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Pool >("/pools/{pool_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific pool. **API Key Scope**: pools / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of Pool</returns>
        public async System.Threading.Tasks.Task<Pool> ShowPoolAsync (string poolId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Pool> localVarResponse = await ShowPoolAsyncWithHttpInfo(poolId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific pool. **API Key Scope**: pools / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of ApiResponse (Pool)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Pool>> ShowPoolAsyncWithHttpInfo (string poolId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling PoolsApi->ShowPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Pool>("/pools/{pool_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays the primary pool scan status. **API Key Scope**: primary_scans / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>PrimaryScan</returns>
        public PrimaryScan ShowPrimaryScan (string poolId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<PrimaryScan> localVarResponse = ShowPrimaryScanWithHttpInfo(poolId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays the primary pool scan status. **API Key Scope**: primary_scans / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>ApiResponse of PrimaryScan</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< PrimaryScan > ShowPrimaryScanWithHttpInfo (string poolId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling PoolsApi->ShowPrimaryScan");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< PrimaryScan >("/pools/{pool_id}/primary_scan", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowPrimaryScan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays the primary pool scan status. **API Key Scope**: primary_scans / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of PrimaryScan</returns>
        public async System.Threading.Tasks.Task<PrimaryScan> ShowPrimaryScanAsync (string poolId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<PrimaryScan> localVarResponse = await ShowPrimaryScanAsyncWithHttpInfo(poolId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays the primary pool scan status. **API Key Scope**: primary_scans / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of ApiResponse (PrimaryScan)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<PrimaryScan>> ShowPrimaryScanAsyncWithHttpInfo (string poolId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling PoolsApi->ShowPrimaryScan");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PrimaryScan>("/pools/{pool_id}/primary_scan", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowPrimaryScan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Synchronize a primary after a scan (for internal use only). **API Key Scope**: pools / sync_primary
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tx">New transaction number.</param>
        /// <returns></returns>
        public void SyncPrimaryPool (string poolId, int tx)
        {
             SyncPrimaryPoolWithHttpInfo(poolId, tx);
        }

        /// <summary>
        /// Synchronize a primary after a scan (for internal use only). **API Key Scope**: pools / sync_primary
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tx">New transaction number.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse<Object> SyncPrimaryPoolWithHttpInfo (string poolId, int tx)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling PoolsApi->SyncPrimaryPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "tx", tx));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/pools/{pool_id}/sync", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncPrimaryPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Synchronize a primary after a scan (for internal use only). **API Key Scope**: pools / sync_primary
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tx">New transaction number.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SyncPrimaryPoolAsync (string poolId, int tx)
        {
             await SyncPrimaryPoolAsyncWithHttpInfo(poolId, tx);

        }

        /// <summary>
        /// Synchronize a primary after a scan (for internal use only). **API Key Scope**: pools / sync_primary
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="tx">New transaction number.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Object>> SyncPrimaryPoolAsyncWithHttpInfo (string poolId, int tx)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling PoolsApi->SyncPrimaryPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "tx", tx));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/pools/{pool_id}/sync", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncPrimaryPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unmount Pool. **API Key Scope**: pools / unmount
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>MountStatus</returns>
        public MountStatus UnmountPool (string poolId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<MountStatus> localVarResponse = UnmountPoolWithHttpInfo(poolId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unmount Pool. **API Key Scope**: pools / unmount
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>ApiResponse of MountStatus</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< MountStatus > UnmountPoolWithHttpInfo (string poolId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling PoolsApi->UnmountPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete< MountStatus >("/pools/{pool_id}/mount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnmountPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unmount Pool. **API Key Scope**: pools / unmount
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of MountStatus</returns>
        public async System.Threading.Tasks.Task<MountStatus> UnmountPoolAsync (string poolId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<MountStatus> localVarResponse = await UnmountPoolAsyncWithHttpInfo(poolId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unmount Pool. **API Key Scope**: pools / unmount
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <returns>Task of ApiResponse (MountStatus)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<MountStatus>> UnmountPoolAsyncWithHttpInfo (string poolId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling PoolsApi->UnmountPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<MountStatus>("/pools/{pool_id}/mount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnmountPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific pool. **API Key Scope**: pools / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="poolBody"></param>
        /// <returns>Pool</returns>
        public Pool UpdatePool (string poolId, PoolUp poolBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Pool> localVarResponse = UpdatePoolWithHttpInfo(poolId, poolBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific pool. **API Key Scope**: pools / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="poolBody"></param>
        /// <returns>ApiResponse of Pool</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< Pool > UpdatePoolWithHttpInfo (string poolId, PoolUp poolBody)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling PoolsApi->UpdatePool");

            // verify the required parameter 'poolBody' is set
            if (poolBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolBody' when calling PoolsApi->UpdatePool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.Data = poolBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Pool >("/pools/{pool_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific pool. **API Key Scope**: pools / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="poolBody"></param>
        /// <returns>Task of Pool</returns>
        public async System.Threading.Tasks.Task<Pool> UpdatePoolAsync (string poolId, PoolUp poolBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Pool> localVarResponse = await UpdatePoolAsyncWithHttpInfo(poolId, poolBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a specific pool. **API Key Scope**: pools / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="poolBody"></param>
        /// <returns>Task of ApiResponse (Pool)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Pool>> UpdatePoolAsyncWithHttpInfo (string poolId, PoolUp poolBody)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling PoolsApi->UpdatePool");

            // verify the required parameter 'poolBody' is set
            if (poolBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolBody' when calling PoolsApi->UpdatePool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.Data = poolBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Pool>("/pools/{pool_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the existing primary pool scan option. **API Key Scope**: primary_scans / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="primaryScanBody"></param>
        /// <returns>PrimaryScan</returns>
        public PrimaryScan UpdatePrimaryScan (string poolId, PrimaryScan primaryScanBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<PrimaryScan> localVarResponse = UpdatePrimaryScanWithHttpInfo(poolId, primaryScanBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the existing primary pool scan option. **API Key Scope**: primary_scans / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="primaryScanBody"></param>
        /// <returns>ApiResponse of PrimaryScan</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< PrimaryScan > UpdatePrimaryScanWithHttpInfo (string poolId, PrimaryScan primaryScanBody)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling PoolsApi->UpdatePrimaryScan");

            // verify the required parameter 'primaryScanBody' is set
            if (primaryScanBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'primaryScanBody' when calling PoolsApi->UpdatePrimaryScan");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.Data = primaryScanBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< PrimaryScan >("/pools/{pool_id}/primary_scan", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePrimaryScan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the existing primary pool scan option. **API Key Scope**: primary_scans / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="primaryScanBody"></param>
        /// <returns>Task of PrimaryScan</returns>
        public async System.Threading.Tasks.Task<PrimaryScan> UpdatePrimaryScanAsync (string poolId, PrimaryScan primaryScanBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<PrimaryScan> localVarResponse = await UpdatePrimaryScanAsyncWithHttpInfo(poolId, primaryScanBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the existing primary pool scan option. **API Key Scope**: primary_scans / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="primaryScanBody"></param>
        /// <returns>Task of ApiResponse (PrimaryScan)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<PrimaryScan>> UpdatePrimaryScanAsyncWithHttpInfo (string poolId, PrimaryScan primaryScanBody)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling PoolsApi->UpdatePrimaryScan");

            // verify the required parameter 'primaryScanBody' is set
            if (primaryScanBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'primaryScanBody' when calling PoolsApi->UpdatePrimaryScan");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            localVarRequestOptions.Data = primaryScanBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<PrimaryScan>("/pools/{pool_id}/primary_scan", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePrimaryScan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
