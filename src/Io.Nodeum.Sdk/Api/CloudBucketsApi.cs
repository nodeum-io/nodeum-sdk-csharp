/* 
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Io.Nodeum.Sdk.Client;
using Io.Nodeum.Sdk.Model;

namespace Io.Nodeum.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICloudBucketsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Lists all cloud buckets.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="cloudConnectorId">Filter on cloud connector id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>CloudBucketCollection</returns>
        CloudBucketCollection IndexCloudBuckets (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string cloudConnectorId = default(string), string poolId = default(string), string name = default(string), string location = default(string), string price = default(string));

        /// <summary>
        /// Lists all cloud buckets.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="cloudConnectorId">Filter on cloud connector id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>ApiResponse of CloudBucketCollection</returns>
        ApiResponse<CloudBucketCollection> IndexCloudBucketsWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string cloudConnectorId = default(string), string poolId = default(string), string name = default(string), string location = default(string), string price = default(string));
        /// <summary>
        /// Lists all cloud buckets.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>CloudBucketCollection</returns>
        CloudBucketCollection IndexCloudBucketsByCloudConnector (string cloudConnectorId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string poolId = default(string), string name = default(string), string location = default(string), string price = default(string));

        /// <summary>
        /// Lists all cloud buckets.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>ApiResponse of CloudBucketCollection</returns>
        ApiResponse<CloudBucketCollection> IndexCloudBucketsByCloudConnectorWithHttpInfo (string cloudConnectorId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string poolId = default(string), string name = default(string), string location = default(string), string price = default(string));
        /// <summary>
        /// Lists all cloud buckets from pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="cloudConnectorId">Filter on cloud connector id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>CloudBucketCollection</returns>
        CloudBucketCollection IndexCloudBucketsByPool (string poolId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string cloudConnectorId = default(string), string name = default(string), string location = default(string), string price = default(string));

        /// <summary>
        /// Lists all cloud buckets from pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="cloudConnectorId">Filter on cloud connector id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>ApiResponse of CloudBucketCollection</returns>
        ApiResponse<CloudBucketCollection> IndexCloudBucketsByPoolWithHttpInfo (string poolId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string cloudConnectorId = default(string), string name = default(string), string location = default(string), string price = default(string));
        /// <summary>
        /// Get mount status of Cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>MountStatus</returns>
        MountStatus MountStatusCloudBucket (string cloudBucketId);

        /// <summary>
        /// Get mount status of Cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>ApiResponse of MountStatus</returns>
        ApiResponse<MountStatus> MountStatusCloudBucketWithHttpInfo (string cloudBucketId);
        /// <summary>
        /// Get mount status of Cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>MountStatus</returns>
        MountStatus MountStatusCloudBucketByCloudConnector (string cloudConnectorId, string cloudBucketId);

        /// <summary>
        /// Get mount status of Cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>ApiResponse of MountStatus</returns>
        ApiResponse<MountStatus> MountStatusCloudBucketByCloudConnectorWithHttpInfo (string cloudConnectorId, string cloudBucketId);
        /// <summary>
        /// Get mount status of Cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>MountStatus</returns>
        MountStatus MountStatusCloudBucketByPool (string poolId, string cloudBucketId);

        /// <summary>
        /// Get mount status of Cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>ApiResponse of MountStatus</returns>
        ApiResponse<MountStatus> MountStatusCloudBucketByPoolWithHttpInfo (string poolId, string cloudBucketId);
        /// <summary>
        /// Displays a specific cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>CloudBucket</returns>
        CloudBucket ShowCloudBucket (string cloudBucketId);

        /// <summary>
        /// Displays a specific cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>ApiResponse of CloudBucket</returns>
        ApiResponse<CloudBucket> ShowCloudBucketWithHttpInfo (string cloudBucketId);
        /// <summary>
        /// Displays a specific cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>CloudBucket</returns>
        CloudBucket ShowCloudBucketByCloudConnector (string cloudConnectorId, string cloudBucketId);

        /// <summary>
        /// Displays a specific cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>ApiResponse of CloudBucket</returns>
        ApiResponse<CloudBucket> ShowCloudBucketByCloudConnectorWithHttpInfo (string cloudConnectorId, string cloudBucketId);
        /// <summary>
        /// Displays a specific cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>CloudBucket</returns>
        CloudBucket ShowCloudBucketByPool (string poolId, string cloudBucketId);

        /// <summary>
        /// Displays a specific cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>ApiResponse of CloudBucket</returns>
        ApiResponse<CloudBucket> ShowCloudBucketByPoolWithHttpInfo (string poolId, string cloudBucketId);
        /// <summary>
        /// Synchronize internal cloud buckets with their remote equivalent.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / sync
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <returns>ActiveJobStatus</returns>
        ActiveJobStatus SyncCloudBuckets (string cloudConnectorId);

        /// <summary>
        /// Synchronize internal cloud buckets with their remote equivalent.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / sync
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <returns>ApiResponse of ActiveJobStatus</returns>
        ApiResponse<ActiveJobStatus> SyncCloudBucketsWithHttpInfo (string cloudConnectorId);
        /// <summary>
        /// Check result of cloud connector sync job.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / sync
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>CloudBucketSimpleCollection</returns>
        CloudBucketSimpleCollection SyncResultCloudBuckets (string cloudConnectorId, string jobId);

        /// <summary>
        /// Check result of cloud connector sync job.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / sync
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ApiResponse of CloudBucketSimpleCollection</returns>
        ApiResponse<CloudBucketSimpleCollection> SyncResultCloudBucketsWithHttpInfo (string cloudConnectorId, string jobId);
        /// <summary>
        /// Updates a specific cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <param name="cloudBucketBody"></param>
        /// <returns>CloudBucket</returns>
        CloudBucket UpdateCloudBucket (string cloudBucketId, CloudBucket cloudBucketBody);

        /// <summary>
        /// Updates a specific cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <param name="cloudBucketBody"></param>
        /// <returns>ApiResponse of CloudBucket</returns>
        ApiResponse<CloudBucket> UpdateCloudBucketWithHttpInfo (string cloudBucketId, CloudBucket cloudBucketBody);
        /// <summary>
        /// Updates a specific cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <param name="cloudBucketBody"></param>
        /// <returns>CloudBucket</returns>
        CloudBucket UpdateCloudBucketByCloudConnector (string cloudConnectorId, string cloudBucketId, CloudBucket cloudBucketBody);

        /// <summary>
        /// Updates a specific cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <param name="cloudBucketBody"></param>
        /// <returns>ApiResponse of CloudBucket</returns>
        ApiResponse<CloudBucket> UpdateCloudBucketByCloudConnectorWithHttpInfo (string cloudConnectorId, string cloudBucketId, CloudBucket cloudBucketBody);
        /// <summary>
        /// Updates a specific cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <param name="cloudBucketBody"></param>
        /// <returns>CloudBucket</returns>
        CloudBucket UpdateCloudBucketByPool (string poolId, string cloudBucketId, CloudBucket cloudBucketBody);

        /// <summary>
        /// Updates a specific cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <param name="cloudBucketBody"></param>
        /// <returns>ApiResponse of CloudBucket</returns>
        ApiResponse<CloudBucket> UpdateCloudBucketByPoolWithHttpInfo (string poolId, string cloudBucketId, CloudBucket cloudBucketBody);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICloudBucketsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Lists all cloud buckets.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="cloudConnectorId">Filter on cloud connector id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>Task of CloudBucketCollection</returns>
        System.Threading.Tasks.Task<CloudBucketCollection> IndexCloudBucketsAsync (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string cloudConnectorId = default(string), string poolId = default(string), string name = default(string), string location = default(string), string price = default(string));

        /// <summary>
        /// Lists all cloud buckets.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="cloudConnectorId">Filter on cloud connector id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>Task of ApiResponse (CloudBucketCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudBucketCollection>> IndexCloudBucketsAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string cloudConnectorId = default(string), string poolId = default(string), string name = default(string), string location = default(string), string price = default(string));
        /// <summary>
        /// Lists all cloud buckets.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>Task of CloudBucketCollection</returns>
        System.Threading.Tasks.Task<CloudBucketCollection> IndexCloudBucketsByCloudConnectorAsync (string cloudConnectorId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string poolId = default(string), string name = default(string), string location = default(string), string price = default(string));

        /// <summary>
        /// Lists all cloud buckets.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>Task of ApiResponse (CloudBucketCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudBucketCollection>> IndexCloudBucketsByCloudConnectorAsyncWithHttpInfo (string cloudConnectorId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string poolId = default(string), string name = default(string), string location = default(string), string price = default(string));
        /// <summary>
        /// Lists all cloud buckets from pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="cloudConnectorId">Filter on cloud connector id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>Task of CloudBucketCollection</returns>
        System.Threading.Tasks.Task<CloudBucketCollection> IndexCloudBucketsByPoolAsync (string poolId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string cloudConnectorId = default(string), string name = default(string), string location = default(string), string price = default(string));

        /// <summary>
        /// Lists all cloud buckets from pool.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="cloudConnectorId">Filter on cloud connector id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>Task of ApiResponse (CloudBucketCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudBucketCollection>> IndexCloudBucketsByPoolAsyncWithHttpInfo (string poolId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string cloudConnectorId = default(string), string name = default(string), string location = default(string), string price = default(string));
        /// <summary>
        /// Get mount status of Cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>Task of MountStatus</returns>
        System.Threading.Tasks.Task<MountStatus> MountStatusCloudBucketAsync (string cloudBucketId);

        /// <summary>
        /// Get mount status of Cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>Task of ApiResponse (MountStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<MountStatus>> MountStatusCloudBucketAsyncWithHttpInfo (string cloudBucketId);
        /// <summary>
        /// Get mount status of Cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>Task of MountStatus</returns>
        System.Threading.Tasks.Task<MountStatus> MountStatusCloudBucketByCloudConnectorAsync (string cloudConnectorId, string cloudBucketId);

        /// <summary>
        /// Get mount status of Cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>Task of ApiResponse (MountStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<MountStatus>> MountStatusCloudBucketByCloudConnectorAsyncWithHttpInfo (string cloudConnectorId, string cloudBucketId);
        /// <summary>
        /// Get mount status of Cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>Task of MountStatus</returns>
        System.Threading.Tasks.Task<MountStatus> MountStatusCloudBucketByPoolAsync (string poolId, string cloudBucketId);

        /// <summary>
        /// Get mount status of Cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / mount_status
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>Task of ApiResponse (MountStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<MountStatus>> MountStatusCloudBucketByPoolAsyncWithHttpInfo (string poolId, string cloudBucketId);
        /// <summary>
        /// Displays a specific cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>Task of CloudBucket</returns>
        System.Threading.Tasks.Task<CloudBucket> ShowCloudBucketAsync (string cloudBucketId);

        /// <summary>
        /// Displays a specific cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>Task of ApiResponse (CloudBucket)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudBucket>> ShowCloudBucketAsyncWithHttpInfo (string cloudBucketId);
        /// <summary>
        /// Displays a specific cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>Task of CloudBucket</returns>
        System.Threading.Tasks.Task<CloudBucket> ShowCloudBucketByCloudConnectorAsync (string cloudConnectorId, string cloudBucketId);

        /// <summary>
        /// Displays a specific cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>Task of ApiResponse (CloudBucket)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudBucket>> ShowCloudBucketByCloudConnectorAsyncWithHttpInfo (string cloudConnectorId, string cloudBucketId);
        /// <summary>
        /// Displays a specific cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>Task of CloudBucket</returns>
        System.Threading.Tasks.Task<CloudBucket> ShowCloudBucketByPoolAsync (string poolId, string cloudBucketId);

        /// <summary>
        /// Displays a specific cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>Task of ApiResponse (CloudBucket)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudBucket>> ShowCloudBucketByPoolAsyncWithHttpInfo (string poolId, string cloudBucketId);
        /// <summary>
        /// Synchronize internal cloud buckets with their remote equivalent.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / sync
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <returns>Task of ActiveJobStatus</returns>
        System.Threading.Tasks.Task<ActiveJobStatus> SyncCloudBucketsAsync (string cloudConnectorId);

        /// <summary>
        /// Synchronize internal cloud buckets with their remote equivalent.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / sync
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <returns>Task of ApiResponse (ActiveJobStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActiveJobStatus>> SyncCloudBucketsAsyncWithHttpInfo (string cloudConnectorId);
        /// <summary>
        /// Check result of cloud connector sync job.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / sync
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of CloudBucketSimpleCollection</returns>
        System.Threading.Tasks.Task<CloudBucketSimpleCollection> SyncResultCloudBucketsAsync (string cloudConnectorId, string jobId);

        /// <summary>
        /// Check result of cloud connector sync job.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / sync
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ApiResponse (CloudBucketSimpleCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudBucketSimpleCollection>> SyncResultCloudBucketsAsyncWithHttpInfo (string cloudConnectorId, string jobId);
        /// <summary>
        /// Updates a specific cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <param name="cloudBucketBody"></param>
        /// <returns>Task of CloudBucket</returns>
        System.Threading.Tasks.Task<CloudBucket> UpdateCloudBucketAsync (string cloudBucketId, CloudBucket cloudBucketBody);

        /// <summary>
        /// Updates a specific cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <param name="cloudBucketBody"></param>
        /// <returns>Task of ApiResponse (CloudBucket)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudBucket>> UpdateCloudBucketAsyncWithHttpInfo (string cloudBucketId, CloudBucket cloudBucketBody);
        /// <summary>
        /// Updates a specific cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <param name="cloudBucketBody"></param>
        /// <returns>Task of CloudBucket</returns>
        System.Threading.Tasks.Task<CloudBucket> UpdateCloudBucketByCloudConnectorAsync (string cloudConnectorId, string cloudBucketId, CloudBucket cloudBucketBody);

        /// <summary>
        /// Updates a specific cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <param name="cloudBucketBody"></param>
        /// <returns>Task of ApiResponse (CloudBucket)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudBucket>> UpdateCloudBucketByCloudConnectorAsyncWithHttpInfo (string cloudConnectorId, string cloudBucketId, CloudBucket cloudBucketBody);
        /// <summary>
        /// Updates a specific cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <param name="cloudBucketBody"></param>
        /// <returns>Task of CloudBucket</returns>
        System.Threading.Tasks.Task<CloudBucket> UpdateCloudBucketByPoolAsync (string poolId, string cloudBucketId, CloudBucket cloudBucketBody);

        /// <summary>
        /// Updates a specific cloud bucket.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: cloud_buckets / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <param name="cloudBucketBody"></param>
        /// <returns>Task of ApiResponse (CloudBucket)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudBucket>> UpdateCloudBucketByPoolAsyncWithHttpInfo (string poolId, string cloudBucketId, CloudBucket cloudBucketBody);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICloudBucketsApi : ICloudBucketsApiSync, ICloudBucketsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CloudBucketsApi : ICloudBucketsApi
    {
        private Io.Nodeum.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CloudBucketsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CloudBucketsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CloudBucketsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CloudBucketsApi(String basePath)
        {
            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                new Io.Nodeum.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CloudBucketsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CloudBucketsApi(Io.Nodeum.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CloudBucketsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CloudBucketsApi(Io.Nodeum.Sdk.Client.ISynchronousClient client,Io.Nodeum.Sdk.Client.IAsynchronousClient asyncClient, Io.Nodeum.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Io.Nodeum.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Lists all cloud buckets. **API Key Scope**: cloud_buckets / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="cloudConnectorId">Filter on cloud connector id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>CloudBucketCollection</returns>
        public CloudBucketCollection IndexCloudBuckets (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string cloudConnectorId = default(string), string poolId = default(string), string name = default(string), string location = default(string), string price = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudBucketCollection> localVarResponse = IndexCloudBucketsWithHttpInfo(limit, offset, sortBy, id, cloudConnectorId, poolId, name, location, price);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all cloud buckets. **API Key Scope**: cloud_buckets / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="cloudConnectorId">Filter on cloud connector id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>ApiResponse of CloudBucketCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< CloudBucketCollection > IndexCloudBucketsWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string cloudConnectorId = default(string), string poolId = default(string), string name = default(string), string location = default(string), string price = default(string))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (cloudConnectorId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "cloud_connector_id", cloudConnectorId));
            }
            if (poolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pool_id", poolId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }
            if (price != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "price", price));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< CloudBucketCollection >("/cloud_buckets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexCloudBuckets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all cloud buckets. **API Key Scope**: cloud_buckets / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="cloudConnectorId">Filter on cloud connector id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>Task of CloudBucketCollection</returns>
        public async System.Threading.Tasks.Task<CloudBucketCollection> IndexCloudBucketsAsync (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string cloudConnectorId = default(string), string poolId = default(string), string name = default(string), string location = default(string), string price = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudBucketCollection> localVarResponse = await IndexCloudBucketsAsyncWithHttpInfo(limit, offset, sortBy, id, cloudConnectorId, poolId, name, location, price);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all cloud buckets. **API Key Scope**: cloud_buckets / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="cloudConnectorId">Filter on cloud connector id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>Task of ApiResponse (CloudBucketCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<CloudBucketCollection>> IndexCloudBucketsAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string cloudConnectorId = default(string), string poolId = default(string), string name = default(string), string location = default(string), string price = default(string))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (cloudConnectorId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "cloud_connector_id", cloudConnectorId));
            }
            if (poolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pool_id", poolId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }
            if (price != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "price", price));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CloudBucketCollection>("/cloud_buckets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexCloudBuckets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all cloud buckets. **API Key Scope**: cloud_buckets / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>CloudBucketCollection</returns>
        public CloudBucketCollection IndexCloudBucketsByCloudConnector (string cloudConnectorId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string poolId = default(string), string name = default(string), string location = default(string), string price = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudBucketCollection> localVarResponse = IndexCloudBucketsByCloudConnectorWithHttpInfo(cloudConnectorId, limit, offset, sortBy, id, poolId, name, location, price);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all cloud buckets. **API Key Scope**: cloud_buckets / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>ApiResponse of CloudBucketCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< CloudBucketCollection > IndexCloudBucketsByCloudConnectorWithHttpInfo (string cloudConnectorId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string poolId = default(string), string name = default(string), string location = default(string), string price = default(string))
        {
            // verify the required parameter 'cloudConnectorId' is set
            if (cloudConnectorId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudConnectorId' when calling CloudBucketsApi->IndexCloudBucketsByCloudConnector");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cloudConnectorId != null)
                localVarRequestOptions.PathParameters.Add("cloud_connector_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudConnectorId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (poolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pool_id", poolId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }
            if (price != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "price", price));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< CloudBucketCollection >("/cloud_connectors/{cloud_connector_id}/cloud_buckets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexCloudBucketsByCloudConnector", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all cloud buckets. **API Key Scope**: cloud_buckets / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>Task of CloudBucketCollection</returns>
        public async System.Threading.Tasks.Task<CloudBucketCollection> IndexCloudBucketsByCloudConnectorAsync (string cloudConnectorId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string poolId = default(string), string name = default(string), string location = default(string), string price = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudBucketCollection> localVarResponse = await IndexCloudBucketsByCloudConnectorAsyncWithHttpInfo(cloudConnectorId, limit, offset, sortBy, id, poolId, name, location, price);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all cloud buckets. **API Key Scope**: cloud_buckets / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="poolId">Filter on a pool id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>Task of ApiResponse (CloudBucketCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<CloudBucketCollection>> IndexCloudBucketsByCloudConnectorAsyncWithHttpInfo (string cloudConnectorId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string poolId = default(string), string name = default(string), string location = default(string), string price = default(string))
        {
            // verify the required parameter 'cloudConnectorId' is set
            if (cloudConnectorId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudConnectorId' when calling CloudBucketsApi->IndexCloudBucketsByCloudConnector");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (cloudConnectorId != null)
                localVarRequestOptions.PathParameters.Add("cloud_connector_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudConnectorId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (poolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "pool_id", poolId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }
            if (price != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "price", price));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CloudBucketCollection>("/cloud_connectors/{cloud_connector_id}/cloud_buckets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexCloudBucketsByCloudConnector", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all cloud buckets from pool. **API Key Scope**: cloud_buckets / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="cloudConnectorId">Filter on cloud connector id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>CloudBucketCollection</returns>
        public CloudBucketCollection IndexCloudBucketsByPool (string poolId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string cloudConnectorId = default(string), string name = default(string), string location = default(string), string price = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudBucketCollection> localVarResponse = IndexCloudBucketsByPoolWithHttpInfo(poolId, limit, offset, sortBy, id, cloudConnectorId, name, location, price);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all cloud buckets from pool. **API Key Scope**: cloud_buckets / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="cloudConnectorId">Filter on cloud connector id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>ApiResponse of CloudBucketCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< CloudBucketCollection > IndexCloudBucketsByPoolWithHttpInfo (string poolId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string cloudConnectorId = default(string), string name = default(string), string location = default(string), string price = default(string))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling CloudBucketsApi->IndexCloudBucketsByPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (cloudConnectorId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "cloud_connector_id", cloudConnectorId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }
            if (price != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "price", price));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< CloudBucketCollection >("/pools/{pool_id}/cloud_buckets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexCloudBucketsByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all cloud buckets from pool. **API Key Scope**: cloud_buckets / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="cloudConnectorId">Filter on cloud connector id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>Task of CloudBucketCollection</returns>
        public async System.Threading.Tasks.Task<CloudBucketCollection> IndexCloudBucketsByPoolAsync (string poolId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string cloudConnectorId = default(string), string name = default(string), string location = default(string), string price = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudBucketCollection> localVarResponse = await IndexCloudBucketsByPoolAsyncWithHttpInfo(poolId, limit, offset, sortBy, id, cloudConnectorId, name, location, price);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all cloud buckets from pool. **API Key Scope**: cloud_buckets / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="cloudConnectorId">Filter on cloud connector id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="location">Filter on location (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>Task of ApiResponse (CloudBucketCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<CloudBucketCollection>> IndexCloudBucketsByPoolAsyncWithHttpInfo (string poolId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string cloudConnectorId = default(string), string name = default(string), string location = default(string), string price = default(string))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling CloudBucketsApi->IndexCloudBucketsByPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (cloudConnectorId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "cloud_connector_id", cloudConnectorId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (location != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "location", location));
            }
            if (price != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "price", price));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CloudBucketCollection>("/pools/{pool_id}/cloud_buckets", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexCloudBucketsByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mount status of Cloud bucket. **API Key Scope**: cloud_buckets / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>MountStatus</returns>
        public MountStatus MountStatusCloudBucket (string cloudBucketId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<MountStatus> localVarResponse = MountStatusCloudBucketWithHttpInfo(cloudBucketId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get mount status of Cloud bucket. **API Key Scope**: cloud_buckets / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>ApiResponse of MountStatus</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< MountStatus > MountStatusCloudBucketWithHttpInfo (string cloudBucketId)
        {
            // verify the required parameter 'cloudBucketId' is set
            if (cloudBucketId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudBucketId' when calling CloudBucketsApi->MountStatusCloudBucket");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cloudBucketId != null)
                localVarRequestOptions.PathParameters.Add("cloud_bucket_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudBucketId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< MountStatus >("/cloud_buckets/{cloud_bucket_id}/mount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MountStatusCloudBucket", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mount status of Cloud bucket. **API Key Scope**: cloud_buckets / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>Task of MountStatus</returns>
        public async System.Threading.Tasks.Task<MountStatus> MountStatusCloudBucketAsync (string cloudBucketId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<MountStatus> localVarResponse = await MountStatusCloudBucketAsyncWithHttpInfo(cloudBucketId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get mount status of Cloud bucket. **API Key Scope**: cloud_buckets / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>Task of ApiResponse (MountStatus)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<MountStatus>> MountStatusCloudBucketAsyncWithHttpInfo (string cloudBucketId)
        {
            // verify the required parameter 'cloudBucketId' is set
            if (cloudBucketId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudBucketId' when calling CloudBucketsApi->MountStatusCloudBucket");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (cloudBucketId != null)
                localVarRequestOptions.PathParameters.Add("cloud_bucket_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudBucketId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MountStatus>("/cloud_buckets/{cloud_bucket_id}/mount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MountStatusCloudBucket", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mount status of Cloud bucket. **API Key Scope**: cloud_buckets / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>MountStatus</returns>
        public MountStatus MountStatusCloudBucketByCloudConnector (string cloudConnectorId, string cloudBucketId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<MountStatus> localVarResponse = MountStatusCloudBucketByCloudConnectorWithHttpInfo(cloudConnectorId, cloudBucketId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get mount status of Cloud bucket. **API Key Scope**: cloud_buckets / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>ApiResponse of MountStatus</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< MountStatus > MountStatusCloudBucketByCloudConnectorWithHttpInfo (string cloudConnectorId, string cloudBucketId)
        {
            // verify the required parameter 'cloudConnectorId' is set
            if (cloudConnectorId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudConnectorId' when calling CloudBucketsApi->MountStatusCloudBucketByCloudConnector");

            // verify the required parameter 'cloudBucketId' is set
            if (cloudBucketId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudBucketId' when calling CloudBucketsApi->MountStatusCloudBucketByCloudConnector");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cloudConnectorId != null)
                localVarRequestOptions.PathParameters.Add("cloud_connector_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudConnectorId)); // path parameter
            if (cloudBucketId != null)
                localVarRequestOptions.PathParameters.Add("cloud_bucket_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudBucketId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< MountStatus >("/cloud_connectors/{cloud_connector_id}/cloud_buckets/{cloud_bucket_id}/mount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MountStatusCloudBucketByCloudConnector", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mount status of Cloud bucket. **API Key Scope**: cloud_buckets / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>Task of MountStatus</returns>
        public async System.Threading.Tasks.Task<MountStatus> MountStatusCloudBucketByCloudConnectorAsync (string cloudConnectorId, string cloudBucketId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<MountStatus> localVarResponse = await MountStatusCloudBucketByCloudConnectorAsyncWithHttpInfo(cloudConnectorId, cloudBucketId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get mount status of Cloud bucket. **API Key Scope**: cloud_buckets / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>Task of ApiResponse (MountStatus)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<MountStatus>> MountStatusCloudBucketByCloudConnectorAsyncWithHttpInfo (string cloudConnectorId, string cloudBucketId)
        {
            // verify the required parameter 'cloudConnectorId' is set
            if (cloudConnectorId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudConnectorId' when calling CloudBucketsApi->MountStatusCloudBucketByCloudConnector");

            // verify the required parameter 'cloudBucketId' is set
            if (cloudBucketId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudBucketId' when calling CloudBucketsApi->MountStatusCloudBucketByCloudConnector");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (cloudConnectorId != null)
                localVarRequestOptions.PathParameters.Add("cloud_connector_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudConnectorId)); // path parameter
            if (cloudBucketId != null)
                localVarRequestOptions.PathParameters.Add("cloud_bucket_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudBucketId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MountStatus>("/cloud_connectors/{cloud_connector_id}/cloud_buckets/{cloud_bucket_id}/mount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MountStatusCloudBucketByCloudConnector", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mount status of Cloud bucket. **API Key Scope**: cloud_buckets / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>MountStatus</returns>
        public MountStatus MountStatusCloudBucketByPool (string poolId, string cloudBucketId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<MountStatus> localVarResponse = MountStatusCloudBucketByPoolWithHttpInfo(poolId, cloudBucketId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get mount status of Cloud bucket. **API Key Scope**: cloud_buckets / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>ApiResponse of MountStatus</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< MountStatus > MountStatusCloudBucketByPoolWithHttpInfo (string poolId, string cloudBucketId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling CloudBucketsApi->MountStatusCloudBucketByPool");

            // verify the required parameter 'cloudBucketId' is set
            if (cloudBucketId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudBucketId' when calling CloudBucketsApi->MountStatusCloudBucketByPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (cloudBucketId != null)
                localVarRequestOptions.PathParameters.Add("cloud_bucket_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudBucketId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< MountStatus >("/pools/{pool_id}/cloud_buckets/{cloud_bucket_id}/mount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MountStatusCloudBucketByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get mount status of Cloud bucket. **API Key Scope**: cloud_buckets / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>Task of MountStatus</returns>
        public async System.Threading.Tasks.Task<MountStatus> MountStatusCloudBucketByPoolAsync (string poolId, string cloudBucketId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<MountStatus> localVarResponse = await MountStatusCloudBucketByPoolAsyncWithHttpInfo(poolId, cloudBucketId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get mount status of Cloud bucket. **API Key Scope**: cloud_buckets / mount_status
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>Task of ApiResponse (MountStatus)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<MountStatus>> MountStatusCloudBucketByPoolAsyncWithHttpInfo (string poolId, string cloudBucketId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling CloudBucketsApi->MountStatusCloudBucketByPool");

            // verify the required parameter 'cloudBucketId' is set
            if (cloudBucketId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudBucketId' when calling CloudBucketsApi->MountStatusCloudBucketByPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (cloudBucketId != null)
                localVarRequestOptions.PathParameters.Add("cloud_bucket_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudBucketId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MountStatus>("/pools/{pool_id}/cloud_buckets/{cloud_bucket_id}/mount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MountStatusCloudBucketByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific cloud bucket. **API Key Scope**: cloud_buckets / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>CloudBucket</returns>
        public CloudBucket ShowCloudBucket (string cloudBucketId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudBucket> localVarResponse = ShowCloudBucketWithHttpInfo(cloudBucketId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific cloud bucket. **API Key Scope**: cloud_buckets / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>ApiResponse of CloudBucket</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< CloudBucket > ShowCloudBucketWithHttpInfo (string cloudBucketId)
        {
            // verify the required parameter 'cloudBucketId' is set
            if (cloudBucketId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudBucketId' when calling CloudBucketsApi->ShowCloudBucket");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cloudBucketId != null)
                localVarRequestOptions.PathParameters.Add("cloud_bucket_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudBucketId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< CloudBucket >("/cloud_buckets/{cloud_bucket_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowCloudBucket", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific cloud bucket. **API Key Scope**: cloud_buckets / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>Task of CloudBucket</returns>
        public async System.Threading.Tasks.Task<CloudBucket> ShowCloudBucketAsync (string cloudBucketId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudBucket> localVarResponse = await ShowCloudBucketAsyncWithHttpInfo(cloudBucketId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific cloud bucket. **API Key Scope**: cloud_buckets / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>Task of ApiResponse (CloudBucket)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<CloudBucket>> ShowCloudBucketAsyncWithHttpInfo (string cloudBucketId)
        {
            // verify the required parameter 'cloudBucketId' is set
            if (cloudBucketId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudBucketId' when calling CloudBucketsApi->ShowCloudBucket");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (cloudBucketId != null)
                localVarRequestOptions.PathParameters.Add("cloud_bucket_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudBucketId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CloudBucket>("/cloud_buckets/{cloud_bucket_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowCloudBucket", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific cloud bucket. **API Key Scope**: cloud_buckets / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>CloudBucket</returns>
        public CloudBucket ShowCloudBucketByCloudConnector (string cloudConnectorId, string cloudBucketId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudBucket> localVarResponse = ShowCloudBucketByCloudConnectorWithHttpInfo(cloudConnectorId, cloudBucketId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific cloud bucket. **API Key Scope**: cloud_buckets / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>ApiResponse of CloudBucket</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< CloudBucket > ShowCloudBucketByCloudConnectorWithHttpInfo (string cloudConnectorId, string cloudBucketId)
        {
            // verify the required parameter 'cloudConnectorId' is set
            if (cloudConnectorId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudConnectorId' when calling CloudBucketsApi->ShowCloudBucketByCloudConnector");

            // verify the required parameter 'cloudBucketId' is set
            if (cloudBucketId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudBucketId' when calling CloudBucketsApi->ShowCloudBucketByCloudConnector");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cloudConnectorId != null)
                localVarRequestOptions.PathParameters.Add("cloud_connector_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudConnectorId)); // path parameter
            if (cloudBucketId != null)
                localVarRequestOptions.PathParameters.Add("cloud_bucket_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudBucketId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< CloudBucket >("/cloud_connectors/{cloud_connector_id}/cloud_buckets/{cloud_bucket_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowCloudBucketByCloudConnector", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific cloud bucket. **API Key Scope**: cloud_buckets / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>Task of CloudBucket</returns>
        public async System.Threading.Tasks.Task<CloudBucket> ShowCloudBucketByCloudConnectorAsync (string cloudConnectorId, string cloudBucketId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudBucket> localVarResponse = await ShowCloudBucketByCloudConnectorAsyncWithHttpInfo(cloudConnectorId, cloudBucketId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific cloud bucket. **API Key Scope**: cloud_buckets / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>Task of ApiResponse (CloudBucket)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<CloudBucket>> ShowCloudBucketByCloudConnectorAsyncWithHttpInfo (string cloudConnectorId, string cloudBucketId)
        {
            // verify the required parameter 'cloudConnectorId' is set
            if (cloudConnectorId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudConnectorId' when calling CloudBucketsApi->ShowCloudBucketByCloudConnector");

            // verify the required parameter 'cloudBucketId' is set
            if (cloudBucketId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudBucketId' when calling CloudBucketsApi->ShowCloudBucketByCloudConnector");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (cloudConnectorId != null)
                localVarRequestOptions.PathParameters.Add("cloud_connector_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudConnectorId)); // path parameter
            if (cloudBucketId != null)
                localVarRequestOptions.PathParameters.Add("cloud_bucket_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudBucketId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CloudBucket>("/cloud_connectors/{cloud_connector_id}/cloud_buckets/{cloud_bucket_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowCloudBucketByCloudConnector", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific cloud bucket. **API Key Scope**: cloud_buckets / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>CloudBucket</returns>
        public CloudBucket ShowCloudBucketByPool (string poolId, string cloudBucketId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudBucket> localVarResponse = ShowCloudBucketByPoolWithHttpInfo(poolId, cloudBucketId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific cloud bucket. **API Key Scope**: cloud_buckets / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>ApiResponse of CloudBucket</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< CloudBucket > ShowCloudBucketByPoolWithHttpInfo (string poolId, string cloudBucketId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling CloudBucketsApi->ShowCloudBucketByPool");

            // verify the required parameter 'cloudBucketId' is set
            if (cloudBucketId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudBucketId' when calling CloudBucketsApi->ShowCloudBucketByPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (cloudBucketId != null)
                localVarRequestOptions.PathParameters.Add("cloud_bucket_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudBucketId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< CloudBucket >("/pools/{pool_id}/cloud_buckets/{cloud_bucket_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowCloudBucketByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific cloud bucket. **API Key Scope**: cloud_buckets / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>Task of CloudBucket</returns>
        public async System.Threading.Tasks.Task<CloudBucket> ShowCloudBucketByPoolAsync (string poolId, string cloudBucketId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudBucket> localVarResponse = await ShowCloudBucketByPoolAsyncWithHttpInfo(poolId, cloudBucketId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific cloud bucket. **API Key Scope**: cloud_buckets / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <returns>Task of ApiResponse (CloudBucket)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<CloudBucket>> ShowCloudBucketByPoolAsyncWithHttpInfo (string poolId, string cloudBucketId)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling CloudBucketsApi->ShowCloudBucketByPool");

            // verify the required parameter 'cloudBucketId' is set
            if (cloudBucketId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudBucketId' when calling CloudBucketsApi->ShowCloudBucketByPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (cloudBucketId != null)
                localVarRequestOptions.PathParameters.Add("cloud_bucket_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudBucketId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CloudBucket>("/pools/{pool_id}/cloud_buckets/{cloud_bucket_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowCloudBucketByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Synchronize internal cloud buckets with their remote equivalent. **API Key Scope**: cloud_buckets / sync
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <returns>ActiveJobStatus</returns>
        public ActiveJobStatus SyncCloudBuckets (string cloudConnectorId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus> localVarResponse = SyncCloudBucketsWithHttpInfo(cloudConnectorId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Synchronize internal cloud buckets with their remote equivalent. **API Key Scope**: cloud_buckets / sync
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <returns>ApiResponse of ActiveJobStatus</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< ActiveJobStatus > SyncCloudBucketsWithHttpInfo (string cloudConnectorId)
        {
            // verify the required parameter 'cloudConnectorId' is set
            if (cloudConnectorId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudConnectorId' when calling CloudBucketsApi->SyncCloudBuckets");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cloudConnectorId != null)
                localVarRequestOptions.PathParameters.Add("cloud_connector_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudConnectorId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< ActiveJobStatus >("/cloud_connectors/{cloud_connector_id}/cloud_buckets/-/sync", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncCloudBuckets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Synchronize internal cloud buckets with their remote equivalent. **API Key Scope**: cloud_buckets / sync
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <returns>Task of ActiveJobStatus</returns>
        public async System.Threading.Tasks.Task<ActiveJobStatus> SyncCloudBucketsAsync (string cloudConnectorId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus> localVarResponse = await SyncCloudBucketsAsyncWithHttpInfo(cloudConnectorId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Synchronize internal cloud buckets with their remote equivalent. **API Key Scope**: cloud_buckets / sync
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <returns>Task of ApiResponse (ActiveJobStatus)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<ActiveJobStatus>> SyncCloudBucketsAsyncWithHttpInfo (string cloudConnectorId)
        {
            // verify the required parameter 'cloudConnectorId' is set
            if (cloudConnectorId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudConnectorId' when calling CloudBucketsApi->SyncCloudBuckets");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (cloudConnectorId != null)
                localVarRequestOptions.PathParameters.Add("cloud_connector_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudConnectorId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ActiveJobStatus>("/cloud_connectors/{cloud_connector_id}/cloud_buckets/-/sync", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncCloudBuckets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check result of cloud connector sync job. **API Key Scope**: cloud_buckets / sync
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>CloudBucketSimpleCollection</returns>
        public CloudBucketSimpleCollection SyncResultCloudBuckets (string cloudConnectorId, string jobId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudBucketSimpleCollection> localVarResponse = SyncResultCloudBucketsWithHttpInfo(cloudConnectorId, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check result of cloud connector sync job. **API Key Scope**: cloud_buckets / sync
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ApiResponse of CloudBucketSimpleCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< CloudBucketSimpleCollection > SyncResultCloudBucketsWithHttpInfo (string cloudConnectorId, string jobId)
        {
            // verify the required parameter 'cloudConnectorId' is set
            if (cloudConnectorId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudConnectorId' when calling CloudBucketsApi->SyncResultCloudBuckets");

            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'jobId' when calling CloudBucketsApi->SyncResultCloudBuckets");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed",
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cloudConnectorId != null)
                localVarRequestOptions.PathParameters.Add("cloud_connector_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudConnectorId)); // path parameter
            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< CloudBucketSimpleCollection >("/cloud_connectors/{cloud_connector_id}/cloud_buckets/-/sync", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncResultCloudBuckets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check result of cloud connector sync job. **API Key Scope**: cloud_buckets / sync
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of CloudBucketSimpleCollection</returns>
        public async System.Threading.Tasks.Task<CloudBucketSimpleCollection> SyncResultCloudBucketsAsync (string cloudConnectorId, string jobId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudBucketSimpleCollection> localVarResponse = await SyncResultCloudBucketsAsyncWithHttpInfo(cloudConnectorId, jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check result of cloud connector sync job. **API Key Scope**: cloud_buckets / sync
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ApiResponse (CloudBucketSimpleCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<CloudBucketSimpleCollection>> SyncResultCloudBucketsAsyncWithHttpInfo (string cloudConnectorId, string jobId)
        {
            // verify the required parameter 'cloudConnectorId' is set
            if (cloudConnectorId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudConnectorId' when calling CloudBucketsApi->SyncResultCloudBuckets");

            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'jobId' when calling CloudBucketsApi->SyncResultCloudBuckets");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed",
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (cloudConnectorId != null)
                localVarRequestOptions.PathParameters.Add("cloud_connector_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudConnectorId)); // path parameter
            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CloudBucketSimpleCollection>("/cloud_connectors/{cloud_connector_id}/cloud_buckets/-/sync", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncResultCloudBuckets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific cloud bucket. **API Key Scope**: cloud_buckets / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <param name="cloudBucketBody"></param>
        /// <returns>CloudBucket</returns>
        public CloudBucket UpdateCloudBucket (string cloudBucketId, CloudBucket cloudBucketBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudBucket> localVarResponse = UpdateCloudBucketWithHttpInfo(cloudBucketId, cloudBucketBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific cloud bucket. **API Key Scope**: cloud_buckets / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <param name="cloudBucketBody"></param>
        /// <returns>ApiResponse of CloudBucket</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< CloudBucket > UpdateCloudBucketWithHttpInfo (string cloudBucketId, CloudBucket cloudBucketBody)
        {
            // verify the required parameter 'cloudBucketId' is set
            if (cloudBucketId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudBucketId' when calling CloudBucketsApi->UpdateCloudBucket");

            // verify the required parameter 'cloudBucketBody' is set
            if (cloudBucketBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudBucketBody' when calling CloudBucketsApi->UpdateCloudBucket");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cloudBucketId != null)
                localVarRequestOptions.PathParameters.Add("cloud_bucket_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudBucketId)); // path parameter
            localVarRequestOptions.Data = cloudBucketBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< CloudBucket >("/cloud_buckets/{cloud_bucket_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCloudBucket", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific cloud bucket. **API Key Scope**: cloud_buckets / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <param name="cloudBucketBody"></param>
        /// <returns>Task of CloudBucket</returns>
        public async System.Threading.Tasks.Task<CloudBucket> UpdateCloudBucketAsync (string cloudBucketId, CloudBucket cloudBucketBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudBucket> localVarResponse = await UpdateCloudBucketAsyncWithHttpInfo(cloudBucketId, cloudBucketBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a specific cloud bucket. **API Key Scope**: cloud_buckets / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <param name="cloudBucketBody"></param>
        /// <returns>Task of ApiResponse (CloudBucket)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<CloudBucket>> UpdateCloudBucketAsyncWithHttpInfo (string cloudBucketId, CloudBucket cloudBucketBody)
        {
            // verify the required parameter 'cloudBucketId' is set
            if (cloudBucketId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudBucketId' when calling CloudBucketsApi->UpdateCloudBucket");

            // verify the required parameter 'cloudBucketBody' is set
            if (cloudBucketBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudBucketBody' when calling CloudBucketsApi->UpdateCloudBucket");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (cloudBucketId != null)
                localVarRequestOptions.PathParameters.Add("cloud_bucket_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudBucketId)); // path parameter
            localVarRequestOptions.Data = cloudBucketBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<CloudBucket>("/cloud_buckets/{cloud_bucket_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCloudBucket", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific cloud bucket. **API Key Scope**: cloud_buckets / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <param name="cloudBucketBody"></param>
        /// <returns>CloudBucket</returns>
        public CloudBucket UpdateCloudBucketByCloudConnector (string cloudConnectorId, string cloudBucketId, CloudBucket cloudBucketBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudBucket> localVarResponse = UpdateCloudBucketByCloudConnectorWithHttpInfo(cloudConnectorId, cloudBucketId, cloudBucketBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific cloud bucket. **API Key Scope**: cloud_buckets / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <param name="cloudBucketBody"></param>
        /// <returns>ApiResponse of CloudBucket</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< CloudBucket > UpdateCloudBucketByCloudConnectorWithHttpInfo (string cloudConnectorId, string cloudBucketId, CloudBucket cloudBucketBody)
        {
            // verify the required parameter 'cloudConnectorId' is set
            if (cloudConnectorId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudConnectorId' when calling CloudBucketsApi->UpdateCloudBucketByCloudConnector");

            // verify the required parameter 'cloudBucketId' is set
            if (cloudBucketId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudBucketId' when calling CloudBucketsApi->UpdateCloudBucketByCloudConnector");

            // verify the required parameter 'cloudBucketBody' is set
            if (cloudBucketBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudBucketBody' when calling CloudBucketsApi->UpdateCloudBucketByCloudConnector");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (cloudConnectorId != null)
                localVarRequestOptions.PathParameters.Add("cloud_connector_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudConnectorId)); // path parameter
            if (cloudBucketId != null)
                localVarRequestOptions.PathParameters.Add("cloud_bucket_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudBucketId)); // path parameter
            localVarRequestOptions.Data = cloudBucketBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< CloudBucket >("/cloud_connectors/{cloud_connector_id}/cloud_buckets/{cloud_bucket_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCloudBucketByCloudConnector", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific cloud bucket. **API Key Scope**: cloud_buckets / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <param name="cloudBucketBody"></param>
        /// <returns>Task of CloudBucket</returns>
        public async System.Threading.Tasks.Task<CloudBucket> UpdateCloudBucketByCloudConnectorAsync (string cloudConnectorId, string cloudBucketId, CloudBucket cloudBucketBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudBucket> localVarResponse = await UpdateCloudBucketByCloudConnectorAsyncWithHttpInfo(cloudConnectorId, cloudBucketId, cloudBucketBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a specific cloud bucket. **API Key Scope**: cloud_buckets / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cloudConnectorId">Numeric ID or name of cloud connector.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <param name="cloudBucketBody"></param>
        /// <returns>Task of ApiResponse (CloudBucket)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<CloudBucket>> UpdateCloudBucketByCloudConnectorAsyncWithHttpInfo (string cloudConnectorId, string cloudBucketId, CloudBucket cloudBucketBody)
        {
            // verify the required parameter 'cloudConnectorId' is set
            if (cloudConnectorId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudConnectorId' when calling CloudBucketsApi->UpdateCloudBucketByCloudConnector");

            // verify the required parameter 'cloudBucketId' is set
            if (cloudBucketId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudBucketId' when calling CloudBucketsApi->UpdateCloudBucketByCloudConnector");

            // verify the required parameter 'cloudBucketBody' is set
            if (cloudBucketBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudBucketBody' when calling CloudBucketsApi->UpdateCloudBucketByCloudConnector");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (cloudConnectorId != null)
                localVarRequestOptions.PathParameters.Add("cloud_connector_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudConnectorId)); // path parameter
            if (cloudBucketId != null)
                localVarRequestOptions.PathParameters.Add("cloud_bucket_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudBucketId)); // path parameter
            localVarRequestOptions.Data = cloudBucketBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<CloudBucket>("/cloud_connectors/{cloud_connector_id}/cloud_buckets/{cloud_bucket_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCloudBucketByCloudConnector", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific cloud bucket. **API Key Scope**: cloud_buckets / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <param name="cloudBucketBody"></param>
        /// <returns>CloudBucket</returns>
        public CloudBucket UpdateCloudBucketByPool (string poolId, string cloudBucketId, CloudBucket cloudBucketBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudBucket> localVarResponse = UpdateCloudBucketByPoolWithHttpInfo(poolId, cloudBucketId, cloudBucketBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific cloud bucket. **API Key Scope**: cloud_buckets / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <param name="cloudBucketBody"></param>
        /// <returns>ApiResponse of CloudBucket</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< CloudBucket > UpdateCloudBucketByPoolWithHttpInfo (string poolId, string cloudBucketId, CloudBucket cloudBucketBody)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling CloudBucketsApi->UpdateCloudBucketByPool");

            // verify the required parameter 'cloudBucketId' is set
            if (cloudBucketId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudBucketId' when calling CloudBucketsApi->UpdateCloudBucketByPool");

            // verify the required parameter 'cloudBucketBody' is set
            if (cloudBucketBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudBucketBody' when calling CloudBucketsApi->UpdateCloudBucketByPool");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (cloudBucketId != null)
                localVarRequestOptions.PathParameters.Add("cloud_bucket_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudBucketId)); // path parameter
            localVarRequestOptions.Data = cloudBucketBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< CloudBucket >("/pools/{pool_id}/cloud_buckets/{cloud_bucket_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCloudBucketByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific cloud bucket. **API Key Scope**: cloud_buckets / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <param name="cloudBucketBody"></param>
        /// <returns>Task of CloudBucket</returns>
        public async System.Threading.Tasks.Task<CloudBucket> UpdateCloudBucketByPoolAsync (string poolId, string cloudBucketId, CloudBucket cloudBucketBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<CloudBucket> localVarResponse = await UpdateCloudBucketByPoolAsyncWithHttpInfo(poolId, cloudBucketId, cloudBucketBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a specific cloud bucket. **API Key Scope**: cloud_buckets / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId">Numeric ID, or name of pool.</param>
        /// <param name="cloudBucketId">Numeric ID or name of cloud bucket.</param>
        /// <param name="cloudBucketBody"></param>
        /// <returns>Task of ApiResponse (CloudBucket)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<CloudBucket>> UpdateCloudBucketByPoolAsyncWithHttpInfo (string poolId, string cloudBucketId, CloudBucket cloudBucketBody)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'poolId' when calling CloudBucketsApi->UpdateCloudBucketByPool");

            // verify the required parameter 'cloudBucketId' is set
            if (cloudBucketId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudBucketId' when calling CloudBucketsApi->UpdateCloudBucketByPool");

            // verify the required parameter 'cloudBucketBody' is set
            if (cloudBucketBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'cloudBucketBody' when calling CloudBucketsApi->UpdateCloudBucketByPool");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (poolId != null)
                localVarRequestOptions.PathParameters.Add("pool_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(poolId)); // path parameter
            if (cloudBucketId != null)
                localVarRequestOptions.PathParameters.Add("cloud_bucket_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(cloudBucketId)); // path parameter
            localVarRequestOptions.Data = cloudBucketBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<CloudBucket>("/pools/{pool_id}/cloud_buckets/{cloud_bucket_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCloudBucketByPool", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
