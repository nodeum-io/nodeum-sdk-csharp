/* 
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Io.Nodeum.Sdk.Client;
using Io.Nodeum.Sdk.Model;

namespace Io.Nodeum.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INasApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new NAS.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasBody"></param>
        /// <returns>Nas</returns>
        Nas CreateNas (Nas nasBody);

        /// <summary>
        /// Creates a new NAS.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasBody"></param>
        /// <returns>ApiResponse of Nas</returns>
        ApiResponse<Nas> CreateNasWithHttpInfo (Nas nasBody);
        /// <summary>
        /// Destroys a specific NAS.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <returns></returns>
        void DestroyNas (string nasId);

        /// <summary>
        /// Destroys a specific NAS.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyNasWithHttpInfo (string nasId);
        /// <summary>
        /// Lists all NAS.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="host">Filter on host (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>NasCollection</returns>
        NasCollection IndexNas (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string host = default(string), string type = default(string), string price = default(string));

        /// <summary>
        /// Lists all NAS.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="host">Filter on host (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>ApiResponse of NasCollection</returns>
        ApiResponse<NasCollection> IndexNasWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string host = default(string), string type = default(string), string price = default(string));
        /// <summary>
        /// Displays a specific NAS.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <returns>Nas</returns>
        Nas ShowNas (string nasId);

        /// <summary>
        /// Displays a specific NAS.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <returns>ApiResponse of Nas</returns>
        ApiResponse<Nas> ShowNasWithHttpInfo (string nasId);
        /// <summary>
        /// Updates a specific NAS.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasBody"></param>
        /// <returns>Nas</returns>
        Nas UpdateNas (string nasId, Nas nasBody);

        /// <summary>
        /// Updates a specific NAS.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasBody"></param>
        /// <returns>ApiResponse of Nas</returns>
        ApiResponse<Nas> UpdateNasWithHttpInfo (string nasId, Nas nasBody);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INasApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new NAS.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasBody"></param>
        /// <returns>Task of Nas</returns>
        System.Threading.Tasks.Task<Nas> CreateNasAsync (Nas nasBody);

        /// <summary>
        /// Creates a new NAS.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasBody"></param>
        /// <returns>Task of ApiResponse (Nas)</returns>
        System.Threading.Tasks.Task<ApiResponse<Nas>> CreateNasAsyncWithHttpInfo (Nas nasBody);
        /// <summary>
        /// Destroys a specific NAS.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyNasAsync (string nasId);

        /// <summary>
        /// Destroys a specific NAS.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyNasAsyncWithHttpInfo (string nasId);
        /// <summary>
        /// Lists all NAS.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="host">Filter on host (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>Task of NasCollection</returns>
        System.Threading.Tasks.Task<NasCollection> IndexNasAsync (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string host = default(string), string type = default(string), string price = default(string));

        /// <summary>
        /// Lists all NAS.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="host">Filter on host (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>Task of ApiResponse (NasCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<NasCollection>> IndexNasAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string host = default(string), string type = default(string), string price = default(string));
        /// <summary>
        /// Displays a specific NAS.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <returns>Task of Nas</returns>
        System.Threading.Tasks.Task<Nas> ShowNasAsync (string nasId);

        /// <summary>
        /// Displays a specific NAS.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <returns>Task of ApiResponse (Nas)</returns>
        System.Threading.Tasks.Task<ApiResponse<Nas>> ShowNasAsyncWithHttpInfo (string nasId);
        /// <summary>
        /// Updates a specific NAS.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasBody"></param>
        /// <returns>Task of Nas</returns>
        System.Threading.Tasks.Task<Nas> UpdateNasAsync (string nasId, Nas nasBody);

        /// <summary>
        /// Updates a specific NAS.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: nas / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasBody"></param>
        /// <returns>Task of ApiResponse (Nas)</returns>
        System.Threading.Tasks.Task<ApiResponse<Nas>> UpdateNasAsyncWithHttpInfo (string nasId, Nas nasBody);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INasApi : INasApiSync, INasApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NasApi : INasApi
    {
        private Io.Nodeum.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NasApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NasApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NasApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NasApi(String basePath)
        {
            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                new Io.Nodeum.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NasApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NasApi(Io.Nodeum.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NasApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NasApi(Io.Nodeum.Sdk.Client.ISynchronousClient client,Io.Nodeum.Sdk.Client.IAsynchronousClient asyncClient, Io.Nodeum.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Io.Nodeum.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a new NAS. **API Key Scope**: nas / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasBody"></param>
        /// <returns>Nas</returns>
        public Nas CreateNas (Nas nasBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Nas> localVarResponse = CreateNasWithHttpInfo(nasBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new NAS. **API Key Scope**: nas / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasBody"></param>
        /// <returns>ApiResponse of Nas</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< Nas > CreateNasWithHttpInfo (Nas nasBody)
        {
            // verify the required parameter 'nasBody' is set
            if (nasBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasBody' when calling NasApi->CreateNas");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = nasBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Nas >("/nas", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new NAS. **API Key Scope**: nas / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasBody"></param>
        /// <returns>Task of Nas</returns>
        public async System.Threading.Tasks.Task<Nas> CreateNasAsync (Nas nasBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Nas> localVarResponse = await CreateNasAsyncWithHttpInfo(nasBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new NAS. **API Key Scope**: nas / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasBody"></param>
        /// <returns>Task of ApiResponse (Nas)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Nas>> CreateNasAsyncWithHttpInfo (Nas nasBody)
        {
            // verify the required parameter 'nasBody' is set
            if (nasBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasBody' when calling NasApi->CreateNas");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = nasBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Nas>("/nas", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific NAS. **API Key Scope**: nas / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <returns></returns>
        public void DestroyNas (string nasId)
        {
             DestroyNasWithHttpInfo(nasId);
        }

        /// <summary>
        /// Destroys a specific NAS. **API Key Scope**: nas / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse<Object> DestroyNasWithHttpInfo (string nasId)
        {
            // verify the required parameter 'nasId' is set
            if (nasId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasId' when calling NasApi->DestroyNas");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (nasId != null)
                localVarRequestOptions.PathParameters.Add("nas_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/nas/{nas_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyNas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific NAS. **API Key Scope**: nas / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyNasAsync (string nasId)
        {
             await DestroyNasAsyncWithHttpInfo(nasId);

        }

        /// <summary>
        /// Destroys a specific NAS. **API Key Scope**: nas / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Object>> DestroyNasAsyncWithHttpInfo (string nasId)
        {
            // verify the required parameter 'nasId' is set
            if (nasId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasId' when calling NasApi->DestroyNas");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (nasId != null)
                localVarRequestOptions.PathParameters.Add("nas_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/nas/{nas_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyNas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all NAS. **API Key Scope**: nas / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="host">Filter on host (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>NasCollection</returns>
        public NasCollection IndexNas (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string host = default(string), string type = default(string), string price = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NasCollection> localVarResponse = IndexNasWithHttpInfo(limit, offset, sortBy, id, name, comment, host, type, price);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all NAS. **API Key Scope**: nas / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="host">Filter on host (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>ApiResponse of NasCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< NasCollection > IndexNasWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string host = default(string), string type = default(string), string price = default(string))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (host != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "host", host));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (price != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "price", price));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< NasCollection >("/nas", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexNas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all NAS. **API Key Scope**: nas / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="host">Filter on host (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>Task of NasCollection</returns>
        public async System.Threading.Tasks.Task<NasCollection> IndexNasAsync (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string host = default(string), string type = default(string), string price = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<NasCollection> localVarResponse = await IndexNasAsyncWithHttpInfo(limit, offset, sortBy, id, name, comment, host, type, price);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all NAS. **API Key Scope**: nas / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="host">Filter on host (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>Task of ApiResponse (NasCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<NasCollection>> IndexNasAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string comment = default(string), string host = default(string), string type = default(string), string price = default(string))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (host != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "host", host));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (price != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "price", price));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NasCollection>("/nas", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexNas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific NAS. **API Key Scope**: nas / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <returns>Nas</returns>
        public Nas ShowNas (string nasId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Nas> localVarResponse = ShowNasWithHttpInfo(nasId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific NAS. **API Key Scope**: nas / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <returns>ApiResponse of Nas</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< Nas > ShowNasWithHttpInfo (string nasId)
        {
            // verify the required parameter 'nasId' is set
            if (nasId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasId' when calling NasApi->ShowNas");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (nasId != null)
                localVarRequestOptions.PathParameters.Add("nas_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Nas >("/nas/{nas_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowNas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific NAS. **API Key Scope**: nas / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <returns>Task of Nas</returns>
        public async System.Threading.Tasks.Task<Nas> ShowNasAsync (string nasId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Nas> localVarResponse = await ShowNasAsyncWithHttpInfo(nasId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific NAS. **API Key Scope**: nas / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <returns>Task of ApiResponse (Nas)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Nas>> ShowNasAsyncWithHttpInfo (string nasId)
        {
            // verify the required parameter 'nasId' is set
            if (nasId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasId' when calling NasApi->ShowNas");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (nasId != null)
                localVarRequestOptions.PathParameters.Add("nas_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Nas>("/nas/{nas_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowNas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific NAS. **API Key Scope**: nas / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasBody"></param>
        /// <returns>Nas</returns>
        public Nas UpdateNas (string nasId, Nas nasBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Nas> localVarResponse = UpdateNasWithHttpInfo(nasId, nasBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific NAS. **API Key Scope**: nas / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasBody"></param>
        /// <returns>ApiResponse of Nas</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< Nas > UpdateNasWithHttpInfo (string nasId, Nas nasBody)
        {
            // verify the required parameter 'nasId' is set
            if (nasId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasId' when calling NasApi->UpdateNas");

            // verify the required parameter 'nasBody' is set
            if (nasBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasBody' when calling NasApi->UpdateNas");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (nasId != null)
                localVarRequestOptions.PathParameters.Add("nas_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasId)); // path parameter
            localVarRequestOptions.Data = nasBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< Nas >("/nas/{nas_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateNas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific NAS. **API Key Scope**: nas / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasBody"></param>
        /// <returns>Task of Nas</returns>
        public async System.Threading.Tasks.Task<Nas> UpdateNasAsync (string nasId, Nas nasBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<Nas> localVarResponse = await UpdateNasAsyncWithHttpInfo(nasId, nasBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a specific NAS. **API Key Scope**: nas / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nasId">Numeric ID or name of NAS.</param>
        /// <param name="nasBody"></param>
        /// <returns>Task of ApiResponse (Nas)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Nas>> UpdateNasAsyncWithHttpInfo (string nasId, Nas nasBody)
        {
            // verify the required parameter 'nasId' is set
            if (nasId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasId' when calling NasApi->UpdateNas");

            // verify the required parameter 'nasBody' is set
            if (nasBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'nasBody' when calling NasApi->UpdateNas");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (nasId != null)
                localVarRequestOptions.PathParameters.Add("nas_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(nasId)); // path parameter
            localVarRequestOptions.Data = nasBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Nas>("/nas/{nas_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateNas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
