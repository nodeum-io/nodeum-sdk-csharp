/* 
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Io.Nodeum.Sdk.Client;
using Io.Nodeum.Sdk.Model;

namespace Io.Nodeum.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITapeLibrariesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new tape library.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_libraries / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryBody"></param>
        /// <returns>TapeLibrary</returns>
        TapeLibrary CreateTapeLibrary (TapeLibrary tapeLibraryBody);

        /// <summary>
        /// Creates a new tape library.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_libraries / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryBody"></param>
        /// <returns>ApiResponse of TapeLibrary</returns>
        ApiResponse<TapeLibrary> CreateTapeLibraryWithHttpInfo (TapeLibrary tapeLibraryBody);
        /// <summary>
        /// Destroys a specific tape library.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_libraries / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <returns></returns>
        void DestroyTapeLibrary (string tapeLibraryId);

        /// <summary>
        /// Destroys a specific tape library.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_libraries / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyTapeLibraryWithHttpInfo (string tapeLibraryId);
        /// <summary>
        /// Lists all tape libraries.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_libraries / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="serial">Filter on serial (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="protocol">Filter on protocol (optional)</param>
        /// <param name="vendor">Filter on vendor (optional)</param>
        /// <param name="product">Filter on product (optional)</param>
        /// <param name="firmware">Filter on firmware (optional)</param>
        /// <param name="device">Filter on device (optional)</param>
        /// <param name="libso">Filter on libso (optional)</param>
        /// <param name="acs">Filter on acs (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="storageSlots">Filter on storage slots (optional)</param>
        /// <param name="storageSlotsAddress">Filter on storage slots address (optional)</param>
        /// <param name="ioSlots">Filter on io slots (optional)</param>
        /// <param name="ioSlotsAddress">Filter on io slots address (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>TapeLibraryCollection</returns>
        TapeLibraryCollection IndexTapeLibraries (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string serial = default(string), string comment = default(string), string protocol = default(string), string vendor = default(string), string product = default(string), string firmware = default(string), string device = default(string), string libso = default(string), string acs = default(string), string status = default(string), string storageSlots = default(string), string storageSlotsAddress = default(string), string ioSlots = default(string), string ioSlotsAddress = default(string), string price = default(string));

        /// <summary>
        /// Lists all tape libraries.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_libraries / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="serial">Filter on serial (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="protocol">Filter on protocol (optional)</param>
        /// <param name="vendor">Filter on vendor (optional)</param>
        /// <param name="product">Filter on product (optional)</param>
        /// <param name="firmware">Filter on firmware (optional)</param>
        /// <param name="device">Filter on device (optional)</param>
        /// <param name="libso">Filter on libso (optional)</param>
        /// <param name="acs">Filter on acs (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="storageSlots">Filter on storage slots (optional)</param>
        /// <param name="storageSlotsAddress">Filter on storage slots address (optional)</param>
        /// <param name="ioSlots">Filter on io slots (optional)</param>
        /// <param name="ioSlotsAddress">Filter on io slots address (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>ApiResponse of TapeLibraryCollection</returns>
        ApiResponse<TapeLibraryCollection> IndexTapeLibrariesWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string serial = default(string), string comment = default(string), string protocol = default(string), string vendor = default(string), string product = default(string), string firmware = default(string), string device = default(string), string libso = default(string), string acs = default(string), string status = default(string), string storageSlots = default(string), string storageSlotsAddress = default(string), string ioSlots = default(string), string ioSlotsAddress = default(string), string price = default(string));
        /// <summary>
        /// Lists tape libraries devices.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_libraries / devices
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">ID of active job</param>
        /// <returns>TapeLibraryDeviceCollection</returns>
        TapeLibraryDeviceCollection IndexTapeLibraryDevices (string jobId);

        /// <summary>
        /// Lists tape libraries devices.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_libraries / devices
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ApiResponse of TapeLibraryDeviceCollection</returns>
        ApiResponse<TapeLibraryDeviceCollection> IndexTapeLibraryDevicesWithHttpInfo (string jobId);
        /// <summary>
        /// Displays a specific tape library.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_libraries / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <returns>TapeLibrary</returns>
        TapeLibrary ShowTapeLibrary (string tapeLibraryId);

        /// <summary>
        /// Displays a specific tape library.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_libraries / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <returns>ApiResponse of TapeLibrary</returns>
        ApiResponse<TapeLibrary> ShowTapeLibraryWithHttpInfo (string tapeLibraryId);
        /// <summary>
        /// Updates a specific tape library.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_libraries / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeLibraryBody"></param>
        /// <returns>TapeLibrary</returns>
        TapeLibrary UpdateTapeLibrary (string tapeLibraryId, TapeLibrary tapeLibraryBody);

        /// <summary>
        /// Updates a specific tape library.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_libraries / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeLibraryBody"></param>
        /// <returns>ApiResponse of TapeLibrary</returns>
        ApiResponse<TapeLibrary> UpdateTapeLibraryWithHttpInfo (string tapeLibraryId, TapeLibrary tapeLibraryBody);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITapeLibrariesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new tape library.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_libraries / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryBody"></param>
        /// <returns>Task of TapeLibrary</returns>
        System.Threading.Tasks.Task<TapeLibrary> CreateTapeLibraryAsync (TapeLibrary tapeLibraryBody);

        /// <summary>
        /// Creates a new tape library.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_libraries / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryBody"></param>
        /// <returns>Task of ApiResponse (TapeLibrary)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeLibrary>> CreateTapeLibraryAsyncWithHttpInfo (TapeLibrary tapeLibraryBody);
        /// <summary>
        /// Destroys a specific tape library.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_libraries / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyTapeLibraryAsync (string tapeLibraryId);

        /// <summary>
        /// Destroys a specific tape library.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_libraries / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyTapeLibraryAsyncWithHttpInfo (string tapeLibraryId);
        /// <summary>
        /// Lists all tape libraries.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_libraries / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="serial">Filter on serial (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="protocol">Filter on protocol (optional)</param>
        /// <param name="vendor">Filter on vendor (optional)</param>
        /// <param name="product">Filter on product (optional)</param>
        /// <param name="firmware">Filter on firmware (optional)</param>
        /// <param name="device">Filter on device (optional)</param>
        /// <param name="libso">Filter on libso (optional)</param>
        /// <param name="acs">Filter on acs (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="storageSlots">Filter on storage slots (optional)</param>
        /// <param name="storageSlotsAddress">Filter on storage slots address (optional)</param>
        /// <param name="ioSlots">Filter on io slots (optional)</param>
        /// <param name="ioSlotsAddress">Filter on io slots address (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>Task of TapeLibraryCollection</returns>
        System.Threading.Tasks.Task<TapeLibraryCollection> IndexTapeLibrariesAsync (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string serial = default(string), string comment = default(string), string protocol = default(string), string vendor = default(string), string product = default(string), string firmware = default(string), string device = default(string), string libso = default(string), string acs = default(string), string status = default(string), string storageSlots = default(string), string storageSlotsAddress = default(string), string ioSlots = default(string), string ioSlotsAddress = default(string), string price = default(string));

        /// <summary>
        /// Lists all tape libraries.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_libraries / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="serial">Filter on serial (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="protocol">Filter on protocol (optional)</param>
        /// <param name="vendor">Filter on vendor (optional)</param>
        /// <param name="product">Filter on product (optional)</param>
        /// <param name="firmware">Filter on firmware (optional)</param>
        /// <param name="device">Filter on device (optional)</param>
        /// <param name="libso">Filter on libso (optional)</param>
        /// <param name="acs">Filter on acs (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="storageSlots">Filter on storage slots (optional)</param>
        /// <param name="storageSlotsAddress">Filter on storage slots address (optional)</param>
        /// <param name="ioSlots">Filter on io slots (optional)</param>
        /// <param name="ioSlotsAddress">Filter on io slots address (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>Task of ApiResponse (TapeLibraryCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeLibraryCollection>> IndexTapeLibrariesAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string serial = default(string), string comment = default(string), string protocol = default(string), string vendor = default(string), string product = default(string), string firmware = default(string), string device = default(string), string libso = default(string), string acs = default(string), string status = default(string), string storageSlots = default(string), string storageSlotsAddress = default(string), string ioSlots = default(string), string ioSlotsAddress = default(string), string price = default(string));
        /// <summary>
        /// Lists tape libraries devices.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_libraries / devices
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of TapeLibraryDeviceCollection</returns>
        System.Threading.Tasks.Task<TapeLibraryDeviceCollection> IndexTapeLibraryDevicesAsync (string jobId);

        /// <summary>
        /// Lists tape libraries devices.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_libraries / devices
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ApiResponse (TapeLibraryDeviceCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeLibraryDeviceCollection>> IndexTapeLibraryDevicesAsyncWithHttpInfo (string jobId);
        /// <summary>
        /// Displays a specific tape library.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_libraries / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <returns>Task of TapeLibrary</returns>
        System.Threading.Tasks.Task<TapeLibrary> ShowTapeLibraryAsync (string tapeLibraryId);

        /// <summary>
        /// Displays a specific tape library.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_libraries / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <returns>Task of ApiResponse (TapeLibrary)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeLibrary>> ShowTapeLibraryAsyncWithHttpInfo (string tapeLibraryId);
        /// <summary>
        /// Updates a specific tape library.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_libraries / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeLibraryBody"></param>
        /// <returns>Task of TapeLibrary</returns>
        System.Threading.Tasks.Task<TapeLibrary> UpdateTapeLibraryAsync (string tapeLibraryId, TapeLibrary tapeLibraryBody);

        /// <summary>
        /// Updates a specific tape library.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: tape_libraries / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeLibraryBody"></param>
        /// <returns>Task of ApiResponse (TapeLibrary)</returns>
        System.Threading.Tasks.Task<ApiResponse<TapeLibrary>> UpdateTapeLibraryAsyncWithHttpInfo (string tapeLibraryId, TapeLibrary tapeLibraryBody);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITapeLibrariesApi : ITapeLibrariesApiSync, ITapeLibrariesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TapeLibrariesApi : ITapeLibrariesApi
    {
        private Io.Nodeum.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TapeLibrariesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TapeLibrariesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TapeLibrariesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TapeLibrariesApi(String basePath)
        {
            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                new Io.Nodeum.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TapeLibrariesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TapeLibrariesApi(Io.Nodeum.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TapeLibrariesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TapeLibrariesApi(Io.Nodeum.Sdk.Client.ISynchronousClient client,Io.Nodeum.Sdk.Client.IAsynchronousClient asyncClient, Io.Nodeum.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Io.Nodeum.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a new tape library. **API Key Scope**: tape_libraries / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryBody"></param>
        /// <returns>TapeLibrary</returns>
        public TapeLibrary CreateTapeLibrary (TapeLibrary tapeLibraryBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeLibrary> localVarResponse = CreateTapeLibraryWithHttpInfo(tapeLibraryBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new tape library. **API Key Scope**: tape_libraries / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryBody"></param>
        /// <returns>ApiResponse of TapeLibrary</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TapeLibrary > CreateTapeLibraryWithHttpInfo (TapeLibrary tapeLibraryBody)
        {
            // verify the required parameter 'tapeLibraryBody' is set
            if (tapeLibraryBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryBody' when calling TapeLibrariesApi->CreateTapeLibrary");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = tapeLibraryBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< TapeLibrary >("/tape_libraries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTapeLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new tape library. **API Key Scope**: tape_libraries / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryBody"></param>
        /// <returns>Task of TapeLibrary</returns>
        public async System.Threading.Tasks.Task<TapeLibrary> CreateTapeLibraryAsync (TapeLibrary tapeLibraryBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeLibrary> localVarResponse = await CreateTapeLibraryAsyncWithHttpInfo(tapeLibraryBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new tape library. **API Key Scope**: tape_libraries / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryBody"></param>
        /// <returns>Task of ApiResponse (TapeLibrary)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TapeLibrary>> CreateTapeLibraryAsyncWithHttpInfo (TapeLibrary tapeLibraryBody)
        {
            // verify the required parameter 'tapeLibraryBody' is set
            if (tapeLibraryBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryBody' when calling TapeLibrariesApi->CreateTapeLibrary");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = tapeLibraryBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TapeLibrary>("/tape_libraries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTapeLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific tape library. **API Key Scope**: tape_libraries / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <returns></returns>
        public void DestroyTapeLibrary (string tapeLibraryId)
        {
             DestroyTapeLibraryWithHttpInfo(tapeLibraryId);
        }

        /// <summary>
        /// Destroys a specific tape library. **API Key Scope**: tape_libraries / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse<Object> DestroyTapeLibraryWithHttpInfo (string tapeLibraryId)
        {
            // verify the required parameter 'tapeLibraryId' is set
            if (tapeLibraryId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryId' when calling TapeLibrariesApi->DestroyTapeLibrary");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tapeLibraryId != null)
                localVarRequestOptions.PathParameters.Add("tape_library_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeLibraryId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/tape_libraries/{tape_library_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyTapeLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific tape library. **API Key Scope**: tape_libraries / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyTapeLibraryAsync (string tapeLibraryId)
        {
             await DestroyTapeLibraryAsyncWithHttpInfo(tapeLibraryId);

        }

        /// <summary>
        /// Destroys a specific tape library. **API Key Scope**: tape_libraries / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Object>> DestroyTapeLibraryAsyncWithHttpInfo (string tapeLibraryId)
        {
            // verify the required parameter 'tapeLibraryId' is set
            if (tapeLibraryId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryId' when calling TapeLibrariesApi->DestroyTapeLibrary");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tapeLibraryId != null)
                localVarRequestOptions.PathParameters.Add("tape_library_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeLibraryId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/tape_libraries/{tape_library_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyTapeLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all tape libraries. **API Key Scope**: tape_libraries / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="serial">Filter on serial (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="protocol">Filter on protocol (optional)</param>
        /// <param name="vendor">Filter on vendor (optional)</param>
        /// <param name="product">Filter on product (optional)</param>
        /// <param name="firmware">Filter on firmware (optional)</param>
        /// <param name="device">Filter on device (optional)</param>
        /// <param name="libso">Filter on libso (optional)</param>
        /// <param name="acs">Filter on acs (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="storageSlots">Filter on storage slots (optional)</param>
        /// <param name="storageSlotsAddress">Filter on storage slots address (optional)</param>
        /// <param name="ioSlots">Filter on io slots (optional)</param>
        /// <param name="ioSlotsAddress">Filter on io slots address (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>TapeLibraryCollection</returns>
        public TapeLibraryCollection IndexTapeLibraries (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string serial = default(string), string comment = default(string), string protocol = default(string), string vendor = default(string), string product = default(string), string firmware = default(string), string device = default(string), string libso = default(string), string acs = default(string), string status = default(string), string storageSlots = default(string), string storageSlotsAddress = default(string), string ioSlots = default(string), string ioSlotsAddress = default(string), string price = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeLibraryCollection> localVarResponse = IndexTapeLibrariesWithHttpInfo(limit, offset, sortBy, id, name, serial, comment, protocol, vendor, product, firmware, device, libso, acs, status, storageSlots, storageSlotsAddress, ioSlots, ioSlotsAddress, price);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all tape libraries. **API Key Scope**: tape_libraries / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="serial">Filter on serial (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="protocol">Filter on protocol (optional)</param>
        /// <param name="vendor">Filter on vendor (optional)</param>
        /// <param name="product">Filter on product (optional)</param>
        /// <param name="firmware">Filter on firmware (optional)</param>
        /// <param name="device">Filter on device (optional)</param>
        /// <param name="libso">Filter on libso (optional)</param>
        /// <param name="acs">Filter on acs (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="storageSlots">Filter on storage slots (optional)</param>
        /// <param name="storageSlotsAddress">Filter on storage slots address (optional)</param>
        /// <param name="ioSlots">Filter on io slots (optional)</param>
        /// <param name="ioSlotsAddress">Filter on io slots address (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>ApiResponse of TapeLibraryCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TapeLibraryCollection > IndexTapeLibrariesWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string serial = default(string), string comment = default(string), string protocol = default(string), string vendor = default(string), string product = default(string), string firmware = default(string), string device = default(string), string libso = default(string), string acs = default(string), string status = default(string), string storageSlots = default(string), string storageSlotsAddress = default(string), string ioSlots = default(string), string ioSlotsAddress = default(string), string price = default(string))
        {
            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (serial != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "serial", serial));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (protocol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "protocol", protocol));
            }
            if (vendor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "vendor", vendor));
            }
            if (product != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "product", product));
            }
            if (firmware != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "firmware", firmware));
            }
            if (device != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "device", device));
            }
            if (libso != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "libso", libso));
            }
            if (acs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "acs", acs));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (storageSlots != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "storage_slots", storageSlots));
            }
            if (storageSlotsAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "storage_slots_address", storageSlotsAddress));
            }
            if (ioSlots != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "io_slots", ioSlots));
            }
            if (ioSlotsAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "io_slots_address", ioSlotsAddress));
            }
            if (price != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "price", price));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TapeLibraryCollection >("/tape_libraries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTapeLibraries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all tape libraries. **API Key Scope**: tape_libraries / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="serial">Filter on serial (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="protocol">Filter on protocol (optional)</param>
        /// <param name="vendor">Filter on vendor (optional)</param>
        /// <param name="product">Filter on product (optional)</param>
        /// <param name="firmware">Filter on firmware (optional)</param>
        /// <param name="device">Filter on device (optional)</param>
        /// <param name="libso">Filter on libso (optional)</param>
        /// <param name="acs">Filter on acs (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="storageSlots">Filter on storage slots (optional)</param>
        /// <param name="storageSlotsAddress">Filter on storage slots address (optional)</param>
        /// <param name="ioSlots">Filter on io slots (optional)</param>
        /// <param name="ioSlotsAddress">Filter on io slots address (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>Task of TapeLibraryCollection</returns>
        public async System.Threading.Tasks.Task<TapeLibraryCollection> IndexTapeLibrariesAsync (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string serial = default(string), string comment = default(string), string protocol = default(string), string vendor = default(string), string product = default(string), string firmware = default(string), string device = default(string), string libso = default(string), string acs = default(string), string status = default(string), string storageSlots = default(string), string storageSlotsAddress = default(string), string ioSlots = default(string), string ioSlotsAddress = default(string), string price = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeLibraryCollection> localVarResponse = await IndexTapeLibrariesAsyncWithHttpInfo(limit, offset, sortBy, id, name, serial, comment, protocol, vendor, product, firmware, device, libso, acs, status, storageSlots, storageSlotsAddress, ioSlots, ioSlotsAddress, price);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all tape libraries. **API Key Scope**: tape_libraries / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="name">Filter on name (optional)</param>
        /// <param name="serial">Filter on serial (optional)</param>
        /// <param name="comment">Filter on comment (optional)</param>
        /// <param name="protocol">Filter on protocol (optional)</param>
        /// <param name="vendor">Filter on vendor (optional)</param>
        /// <param name="product">Filter on product (optional)</param>
        /// <param name="firmware">Filter on firmware (optional)</param>
        /// <param name="device">Filter on device (optional)</param>
        /// <param name="libso">Filter on libso (optional)</param>
        /// <param name="acs">Filter on acs (optional)</param>
        /// <param name="status">Filter on status (optional)</param>
        /// <param name="storageSlots">Filter on storage slots (optional)</param>
        /// <param name="storageSlotsAddress">Filter on storage slots address (optional)</param>
        /// <param name="ioSlots">Filter on io slots (optional)</param>
        /// <param name="ioSlotsAddress">Filter on io slots address (optional)</param>
        /// <param name="price">Filter on price (optional)</param>
        /// <returns>Task of ApiResponse (TapeLibraryCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TapeLibraryCollection>> IndexTapeLibrariesAsyncWithHttpInfo (int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string name = default(string), string serial = default(string), string comment = default(string), string protocol = default(string), string vendor = default(string), string product = default(string), string firmware = default(string), string device = default(string), string libso = default(string), string acs = default(string), string status = default(string), string storageSlots = default(string), string storageSlotsAddress = default(string), string ioSlots = default(string), string ioSlotsAddress = default(string), string price = default(string))
        {

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (serial != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "serial", serial));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (protocol != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "protocol", protocol));
            }
            if (vendor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "vendor", vendor));
            }
            if (product != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "product", product));
            }
            if (firmware != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "firmware", firmware));
            }
            if (device != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "device", device));
            }
            if (libso != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "libso", libso));
            }
            if (acs != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "acs", acs));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (storageSlots != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "storage_slots", storageSlots));
            }
            if (storageSlotsAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "storage_slots_address", storageSlotsAddress));
            }
            if (ioSlots != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "io_slots", ioSlots));
            }
            if (ioSlotsAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "io_slots_address", ioSlotsAddress));
            }
            if (price != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "price", price));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TapeLibraryCollection>("/tape_libraries", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTapeLibraries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists tape libraries devices. **API Key Scope**: tape_libraries / devices
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">ID of active job</param>
        /// <returns>TapeLibraryDeviceCollection</returns>
        public TapeLibraryDeviceCollection IndexTapeLibraryDevices (string jobId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeLibraryDeviceCollection> localVarResponse = IndexTapeLibraryDevicesWithHttpInfo(jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists tape libraries devices. **API Key Scope**: tape_libraries / devices
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">ID of active job</param>
        /// <returns>ApiResponse of TapeLibraryDeviceCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TapeLibraryDeviceCollection > IndexTapeLibraryDevicesWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'jobId' when calling TapeLibrariesApi->IndexTapeLibraryDevices");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed",
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TapeLibraryDeviceCollection >("/tape_libraries/-/devices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTapeLibraryDevices", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists tape libraries devices. **API Key Scope**: tape_libraries / devices
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of TapeLibraryDeviceCollection</returns>
        public async System.Threading.Tasks.Task<TapeLibraryDeviceCollection> IndexTapeLibraryDevicesAsync (string jobId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeLibraryDeviceCollection> localVarResponse = await IndexTapeLibraryDevicesAsyncWithHttpInfo(jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists tape libraries devices. **API Key Scope**: tape_libraries / devices
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">ID of active job</param>
        /// <returns>Task of ApiResponse (TapeLibraryDeviceCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TapeLibraryDeviceCollection>> IndexTapeLibraryDevicesAsyncWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'jobId' when calling TapeLibrariesApi->IndexTapeLibraryDevices");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "queued",
                "working",
                "failed",
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (jobId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TapeLibraryDeviceCollection>("/tape_libraries/-/devices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTapeLibraryDevices", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific tape library. **API Key Scope**: tape_libraries / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <returns>TapeLibrary</returns>
        public TapeLibrary ShowTapeLibrary (string tapeLibraryId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeLibrary> localVarResponse = ShowTapeLibraryWithHttpInfo(tapeLibraryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific tape library. **API Key Scope**: tape_libraries / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <returns>ApiResponse of TapeLibrary</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TapeLibrary > ShowTapeLibraryWithHttpInfo (string tapeLibraryId)
        {
            // verify the required parameter 'tapeLibraryId' is set
            if (tapeLibraryId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryId' when calling TapeLibrariesApi->ShowTapeLibrary");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tapeLibraryId != null)
                localVarRequestOptions.PathParameters.Add("tape_library_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeLibraryId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TapeLibrary >("/tape_libraries/{tape_library_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTapeLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific tape library. **API Key Scope**: tape_libraries / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <returns>Task of TapeLibrary</returns>
        public async System.Threading.Tasks.Task<TapeLibrary> ShowTapeLibraryAsync (string tapeLibraryId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeLibrary> localVarResponse = await ShowTapeLibraryAsyncWithHttpInfo(tapeLibraryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific tape library. **API Key Scope**: tape_libraries / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <returns>Task of ApiResponse (TapeLibrary)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TapeLibrary>> ShowTapeLibraryAsyncWithHttpInfo (string tapeLibraryId)
        {
            // verify the required parameter 'tapeLibraryId' is set
            if (tapeLibraryId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryId' when calling TapeLibrariesApi->ShowTapeLibrary");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tapeLibraryId != null)
                localVarRequestOptions.PathParameters.Add("tape_library_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeLibraryId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TapeLibrary>("/tape_libraries/{tape_library_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTapeLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific tape library. **API Key Scope**: tape_libraries / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeLibraryBody"></param>
        /// <returns>TapeLibrary</returns>
        public TapeLibrary UpdateTapeLibrary (string tapeLibraryId, TapeLibrary tapeLibraryBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeLibrary> localVarResponse = UpdateTapeLibraryWithHttpInfo(tapeLibraryId, tapeLibraryBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific tape library. **API Key Scope**: tape_libraries / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeLibraryBody"></param>
        /// <returns>ApiResponse of TapeLibrary</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TapeLibrary > UpdateTapeLibraryWithHttpInfo (string tapeLibraryId, TapeLibrary tapeLibraryBody)
        {
            // verify the required parameter 'tapeLibraryId' is set
            if (tapeLibraryId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryId' when calling TapeLibrariesApi->UpdateTapeLibrary");

            // verify the required parameter 'tapeLibraryBody' is set
            if (tapeLibraryBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryBody' when calling TapeLibrariesApi->UpdateTapeLibrary");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tapeLibraryId != null)
                localVarRequestOptions.PathParameters.Add("tape_library_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeLibraryId)); // path parameter
            localVarRequestOptions.Data = tapeLibraryBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< TapeLibrary >("/tape_libraries/{tape_library_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTapeLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific tape library. **API Key Scope**: tape_libraries / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeLibraryBody"></param>
        /// <returns>Task of TapeLibrary</returns>
        public async System.Threading.Tasks.Task<TapeLibrary> UpdateTapeLibraryAsync (string tapeLibraryId, TapeLibrary tapeLibraryBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TapeLibrary> localVarResponse = await UpdateTapeLibraryAsyncWithHttpInfo(tapeLibraryId, tapeLibraryBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a specific tape library. **API Key Scope**: tape_libraries / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tapeLibraryId">Numeric ID, serial, or name of tape library.</param>
        /// <param name="tapeLibraryBody"></param>
        /// <returns>Task of ApiResponse (TapeLibrary)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TapeLibrary>> UpdateTapeLibraryAsyncWithHttpInfo (string tapeLibraryId, TapeLibrary tapeLibraryBody)
        {
            // verify the required parameter 'tapeLibraryId' is set
            if (tapeLibraryId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryId' when calling TapeLibrariesApi->UpdateTapeLibrary");

            // verify the required parameter 'tapeLibraryBody' is set
            if (tapeLibraryBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'tapeLibraryBody' when calling TapeLibrariesApi->UpdateTapeLibrary");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (tapeLibraryId != null)
                localVarRequestOptions.PathParameters.Add("tape_library_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(tapeLibraryId)); // path parameter
            localVarRequestOptions.Data = tapeLibraryBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<TapeLibrary>("/tape_libraries/{tape_library_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTapeLibrary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
