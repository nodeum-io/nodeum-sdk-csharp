/* 
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Io.Nodeum.Sdk.Client;
using Io.Nodeum.Sdk.Model;

namespace Io.Nodeum.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskCallbacksApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new task callback.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_callbacks / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackBody"></param>
        /// <returns>TaskCallback</returns>
        TaskCallback CreateTaskCallback (string taskId, TaskCallback taskCallbackBody);

        /// <summary>
        /// Creates a new task callback.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_callbacks / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackBody"></param>
        /// <returns>ApiResponse of TaskCallback</returns>
        ApiResponse<TaskCallback> CreateTaskCallbackWithHttpInfo (string taskId, TaskCallback taskCallbackBody);
        /// <summary>
        /// Destroys a specific task callback.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_callbacks / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackId">Numeric ID of task callback.</param>
        /// <returns></returns>
        void DestroyTaskCallback (string taskId, int taskCallbackId);

        /// <summary>
        /// Destroys a specific task callback.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_callbacks / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackId">Numeric ID of task callback.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DestroyTaskCallbackWithHttpInfo (string taskId, int taskCallbackId);
        /// <summary>
        /// Lists all task callbacks.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_callbacks / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="script">Filter on task callback script (optional)</param>
        /// <returns>TaskCallbackCollection</returns>
        TaskCallbackCollection IndexTaskCallbacks (string taskId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string type = default(string), string script = default(string));

        /// <summary>
        /// Lists all task callbacks.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_callbacks / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="script">Filter on task callback script (optional)</param>
        /// <returns>ApiResponse of TaskCallbackCollection</returns>
        ApiResponse<TaskCallbackCollection> IndexTaskCallbacksWithHttpInfo (string taskId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string type = default(string), string script = default(string));
        /// <summary>
        /// Displays a specific task callback.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_callbacks / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackId">Numeric ID of task callback.</param>
        /// <returns>TaskCallback</returns>
        TaskCallback ShowTaskCallback (string taskId, int taskCallbackId);

        /// <summary>
        /// Displays a specific task callback.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_callbacks / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackId">Numeric ID of task callback.</param>
        /// <returns>ApiResponse of TaskCallback</returns>
        ApiResponse<TaskCallback> ShowTaskCallbackWithHttpInfo (string taskId, int taskCallbackId);
        /// <summary>
        /// Updates a specific task callback.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_callbacks / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackId">Numeric ID of task callback.</param>
        /// <param name="taskCallbackBody"></param>
        /// <returns>TaskCallback</returns>
        TaskCallback UpdateTaskCallback (string taskId, int taskCallbackId, TaskCallback taskCallbackBody);

        /// <summary>
        /// Updates a specific task callback.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_callbacks / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackId">Numeric ID of task callback.</param>
        /// <param name="taskCallbackBody"></param>
        /// <returns>ApiResponse of TaskCallback</returns>
        ApiResponse<TaskCallback> UpdateTaskCallbackWithHttpInfo (string taskId, int taskCallbackId, TaskCallback taskCallbackBody);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskCallbacksApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new task callback.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_callbacks / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackBody"></param>
        /// <returns>Task of TaskCallback</returns>
        System.Threading.Tasks.Task<TaskCallback> CreateTaskCallbackAsync (string taskId, TaskCallback taskCallbackBody);

        /// <summary>
        /// Creates a new task callback.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_callbacks / create
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackBody"></param>
        /// <returns>Task of ApiResponse (TaskCallback)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskCallback>> CreateTaskCallbackAsyncWithHttpInfo (string taskId, TaskCallback taskCallbackBody);
        /// <summary>
        /// Destroys a specific task callback.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_callbacks / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackId">Numeric ID of task callback.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DestroyTaskCallbackAsync (string taskId, int taskCallbackId);

        /// <summary>
        /// Destroys a specific task callback.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_callbacks / destroy
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackId">Numeric ID of task callback.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DestroyTaskCallbackAsyncWithHttpInfo (string taskId, int taskCallbackId);
        /// <summary>
        /// Lists all task callbacks.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_callbacks / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="script">Filter on task callback script (optional)</param>
        /// <returns>Task of TaskCallbackCollection</returns>
        System.Threading.Tasks.Task<TaskCallbackCollection> IndexTaskCallbacksAsync (string taskId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string type = default(string), string script = default(string));

        /// <summary>
        /// Lists all task callbacks.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_callbacks / index
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="script">Filter on task callback script (optional)</param>
        /// <returns>Task of ApiResponse (TaskCallbackCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskCallbackCollection>> IndexTaskCallbacksAsyncWithHttpInfo (string taskId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string type = default(string), string script = default(string));
        /// <summary>
        /// Displays a specific task callback.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_callbacks / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackId">Numeric ID of task callback.</param>
        /// <returns>Task of TaskCallback</returns>
        System.Threading.Tasks.Task<TaskCallback> ShowTaskCallbackAsync (string taskId, int taskCallbackId);

        /// <summary>
        /// Displays a specific task callback.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_callbacks / show
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackId">Numeric ID of task callback.</param>
        /// <returns>Task of ApiResponse (TaskCallback)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskCallback>> ShowTaskCallbackAsyncWithHttpInfo (string taskId, int taskCallbackId);
        /// <summary>
        /// Updates a specific task callback.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_callbacks / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackId">Numeric ID of task callback.</param>
        /// <param name="taskCallbackBody"></param>
        /// <returns>Task of TaskCallback</returns>
        System.Threading.Tasks.Task<TaskCallback> UpdateTaskCallbackAsync (string taskId, int taskCallbackId, TaskCallback taskCallbackBody);

        /// <summary>
        /// Updates a specific task callback.
        /// </summary>
        /// <remarks>
        /// **API Key Scope**: task_callbacks / update
        /// </remarks>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackId">Numeric ID of task callback.</param>
        /// <param name="taskCallbackBody"></param>
        /// <returns>Task of ApiResponse (TaskCallback)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskCallback>> UpdateTaskCallbackAsyncWithHttpInfo (string taskId, int taskCallbackId, TaskCallback taskCallbackBody);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITaskCallbacksApi : ITaskCallbacksApiSync, ITaskCallbacksApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TaskCallbacksApi : ITaskCallbacksApi
    {
        private Io.Nodeum.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskCallbacksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskCallbacksApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskCallbacksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TaskCallbacksApi(String basePath)
        {
            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                new Io.Nodeum.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskCallbacksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TaskCallbacksApi(Io.Nodeum.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Io.Nodeum.Sdk.Client.Configuration.MergeConfigurations(
                Io.Nodeum.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Io.Nodeum.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TaskCallbacksApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TaskCallbacksApi(Io.Nodeum.Sdk.Client.ISynchronousClient client,Io.Nodeum.Sdk.Client.IAsynchronousClient asyncClient, Io.Nodeum.Sdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Io.Nodeum.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Io.Nodeum.Sdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Io.Nodeum.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a new task callback. **API Key Scope**: task_callbacks / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackBody"></param>
        /// <returns>TaskCallback</returns>
        public TaskCallback CreateTaskCallback (string taskId, TaskCallback taskCallbackBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TaskCallback> localVarResponse = CreateTaskCallbackWithHttpInfo(taskId, taskCallbackBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new task callback. **API Key Scope**: task_callbacks / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackBody"></param>
        /// <returns>ApiResponse of TaskCallback</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TaskCallback > CreateTaskCallbackWithHttpInfo (string taskId, TaskCallback taskCallbackBody)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TaskCallbacksApi->CreateTaskCallback");

            // verify the required parameter 'taskCallbackBody' is set
            if (taskCallbackBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskCallbackBody' when calling TaskCallbacksApi->CreateTaskCallback");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.Data = taskCallbackBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< TaskCallback >("/tasks/{task_id}/task_callbacks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTaskCallback", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new task callback. **API Key Scope**: task_callbacks / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackBody"></param>
        /// <returns>Task of TaskCallback</returns>
        public async System.Threading.Tasks.Task<TaskCallback> CreateTaskCallbackAsync (string taskId, TaskCallback taskCallbackBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TaskCallback> localVarResponse = await CreateTaskCallbackAsyncWithHttpInfo(taskId, taskCallbackBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new task callback. **API Key Scope**: task_callbacks / create
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackBody"></param>
        /// <returns>Task of ApiResponse (TaskCallback)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TaskCallback>> CreateTaskCallbackAsyncWithHttpInfo (string taskId, TaskCallback taskCallbackBody)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TaskCallbacksApi->CreateTaskCallback");

            // verify the required parameter 'taskCallbackBody' is set
            if (taskCallbackBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskCallbackBody' when calling TaskCallbacksApi->CreateTaskCallback");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.Data = taskCallbackBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TaskCallback>("/tasks/{task_id}/task_callbacks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTaskCallback", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific task callback. **API Key Scope**: task_callbacks / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackId">Numeric ID of task callback.</param>
        /// <returns></returns>
        public void DestroyTaskCallback (string taskId, int taskCallbackId)
        {
             DestroyTaskCallbackWithHttpInfo(taskId, taskCallbackId);
        }

        /// <summary>
        /// Destroys a specific task callback. **API Key Scope**: task_callbacks / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackId">Numeric ID of task callback.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse<Object> DestroyTaskCallbackWithHttpInfo (string taskId, int taskCallbackId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TaskCallbacksApi->DestroyTaskCallback");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.PathParameters.Add("task_callback_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskCallbackId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/tasks/{task_id}/task_callbacks/{task_callback_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyTaskCallback", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Destroys a specific task callback. **API Key Scope**: task_callbacks / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackId">Numeric ID of task callback.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DestroyTaskCallbackAsync (string taskId, int taskCallbackId)
        {
             await DestroyTaskCallbackAsyncWithHttpInfo(taskId, taskCallbackId);

        }

        /// <summary>
        /// Destroys a specific task callback. **API Key Scope**: task_callbacks / destroy
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackId">Numeric ID of task callback.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<Object>> DestroyTaskCallbackAsyncWithHttpInfo (string taskId, int taskCallbackId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TaskCallbacksApi->DestroyTaskCallback");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.PathParameters.Add("task_callback_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskCallbackId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/tasks/{task_id}/task_callbacks/{task_callback_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DestroyTaskCallback", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all task callbacks. **API Key Scope**: task_callbacks / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="script">Filter on task callback script (optional)</param>
        /// <returns>TaskCallbackCollection</returns>
        public TaskCallbackCollection IndexTaskCallbacks (string taskId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string type = default(string), string script = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TaskCallbackCollection> localVarResponse = IndexTaskCallbacksWithHttpInfo(taskId, limit, offset, sortBy, id, type, script);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all task callbacks. **API Key Scope**: task_callbacks / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="script">Filter on task callback script (optional)</param>
        /// <returns>ApiResponse of TaskCallbackCollection</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TaskCallbackCollection > IndexTaskCallbacksWithHttpInfo (string taskId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string type = default(string), string script = default(string))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TaskCallbacksApi->IndexTaskCallbacks");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (script != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "script", script));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TaskCallbackCollection >("/tasks/{task_id}/task_callbacks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTaskCallbacks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all task callbacks. **API Key Scope**: task_callbacks / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="script">Filter on task callback script (optional)</param>
        /// <returns>Task of TaskCallbackCollection</returns>
        public async System.Threading.Tasks.Task<TaskCallbackCollection> IndexTaskCallbacksAsync (string taskId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string type = default(string), string script = default(string))
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TaskCallbackCollection> localVarResponse = await IndexTaskCallbacksAsyncWithHttpInfo(taskId, limit, offset, sortBy, id, type, script);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all task callbacks. **API Key Scope**: task_callbacks / index
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="limit">The number of items to display for pagination. (optional)</param>
        /// <param name="offset">The number of items to skip for pagination. (optional)</param>
        /// <param name="sortBy">Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;. (optional)</param>
        /// <param name="id">Filter on id (optional)</param>
        /// <param name="type">Filter on type (optional)</param>
        /// <param name="script">Filter on task callback script (optional)</param>
        /// <returns>Task of ApiResponse (TaskCallbackCollection)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TaskCallbackCollection>> IndexTaskCallbacksAsyncWithHttpInfo (string taskId, int? limit = default(int?), int? offset = default(int?), List<string> sortBy = default(List<string>), string id = default(string), string type = default(string), string script = default(string))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TaskCallbacksApi->IndexTaskCallbacks");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("pipe", "sort_by", sortBy));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (script != null)
            {
                localVarRequestOptions.QueryParameters.Add(Io.Nodeum.Sdk.Client.ClientUtils.ParameterToMultiMap("", "script", script));
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TaskCallbackCollection>("/tasks/{task_id}/task_callbacks", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IndexTaskCallbacks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific task callback. **API Key Scope**: task_callbacks / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackId">Numeric ID of task callback.</param>
        /// <returns>TaskCallback</returns>
        public TaskCallback ShowTaskCallback (string taskId, int taskCallbackId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TaskCallback> localVarResponse = ShowTaskCallbackWithHttpInfo(taskId, taskCallbackId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Displays a specific task callback. **API Key Scope**: task_callbacks / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackId">Numeric ID of task callback.</param>
        /// <returns>ApiResponse of TaskCallback</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TaskCallback > ShowTaskCallbackWithHttpInfo (string taskId, int taskCallbackId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TaskCallbacksApi->ShowTaskCallback");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.PathParameters.Add("task_callback_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskCallbackId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< TaskCallback >("/tasks/{task_id}/task_callbacks/{task_callback_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTaskCallback", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Displays a specific task callback. **API Key Scope**: task_callbacks / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackId">Numeric ID of task callback.</param>
        /// <returns>Task of TaskCallback</returns>
        public async System.Threading.Tasks.Task<TaskCallback> ShowTaskCallbackAsync (string taskId, int taskCallbackId)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TaskCallback> localVarResponse = await ShowTaskCallbackAsyncWithHttpInfo(taskId, taskCallbackId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Displays a specific task callback. **API Key Scope**: task_callbacks / show
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackId">Numeric ID of task callback.</param>
        /// <returns>Task of ApiResponse (TaskCallback)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TaskCallback>> ShowTaskCallbackAsyncWithHttpInfo (string taskId, int taskCallbackId)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TaskCallbacksApi->ShowTaskCallback");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.PathParameters.Add("task_callback_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskCallbackId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TaskCallback>("/tasks/{task_id}/task_callbacks/{task_callback_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowTaskCallback", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific task callback. **API Key Scope**: task_callbacks / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackId">Numeric ID of task callback.</param>
        /// <param name="taskCallbackBody"></param>
        /// <returns>TaskCallback</returns>
        public TaskCallback UpdateTaskCallback (string taskId, int taskCallbackId, TaskCallback taskCallbackBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TaskCallback> localVarResponse = UpdateTaskCallbackWithHttpInfo(taskId, taskCallbackId, taskCallbackBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific task callback. **API Key Scope**: task_callbacks / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackId">Numeric ID of task callback.</param>
        /// <param name="taskCallbackBody"></param>
        /// <returns>ApiResponse of TaskCallback</returns>
        public Io.Nodeum.Sdk.Client.ApiResponse< TaskCallback > UpdateTaskCallbackWithHttpInfo (string taskId, int taskCallbackId, TaskCallback taskCallbackBody)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TaskCallbacksApi->UpdateTaskCallback");

            // verify the required parameter 'taskCallbackBody' is set
            if (taskCallbackBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskCallbackBody' when calling TaskCallbacksApi->UpdateTaskCallback");

            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Io.Nodeum.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.PathParameters.Add("task_callback_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskCallbackId)); // path parameter
            localVarRequestOptions.Data = taskCallbackBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< TaskCallback >("/tasks/{task_id}/task_callbacks/{task_callback_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTaskCallback", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific task callback. **API Key Scope**: task_callbacks / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackId">Numeric ID of task callback.</param>
        /// <param name="taskCallbackBody"></param>
        /// <returns>Task of TaskCallback</returns>
        public async System.Threading.Tasks.Task<TaskCallback> UpdateTaskCallbackAsync (string taskId, int taskCallbackId, TaskCallback taskCallbackBody)
        {
             Io.Nodeum.Sdk.Client.ApiResponse<TaskCallback> localVarResponse = await UpdateTaskCallbackAsyncWithHttpInfo(taskId, taskCallbackId, taskCallbackBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a specific task callback. **API Key Scope**: task_callbacks / update
        /// </summary>
        /// <exception cref="Io.Nodeum.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.</param>
        /// <param name="taskCallbackId">Numeric ID of task callback.</param>
        /// <param name="taskCallbackBody"></param>
        /// <returns>Task of ApiResponse (TaskCallback)</returns>
        public async System.Threading.Tasks.Task<Io.Nodeum.Sdk.Client.ApiResponse<TaskCallback>> UpdateTaskCallbackAsyncWithHttpInfo (string taskId, int taskCallbackId, TaskCallback taskCallbackBody)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskId' when calling TaskCallbacksApi->UpdateTaskCallback");

            // verify the required parameter 'taskCallbackBody' is set
            if (taskCallbackBody == null)
                throw new Io.Nodeum.Sdk.Client.ApiException(400, "Missing required parameter 'taskCallbackBody' when calling TaskCallbacksApi->UpdateTaskCallback");


            Io.Nodeum.Sdk.Client.RequestOptions localVarRequestOptions = new Io.Nodeum.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (taskId != null)
                localVarRequestOptions.PathParameters.Add("task_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            localVarRequestOptions.PathParameters.Add("task_callback_id", Io.Nodeum.Sdk.Client.ClientUtils.ParameterToString(taskCallbackId)); // path parameter
            localVarRequestOptions.Data = taskCallbackBody;

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Io.Nodeum.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (BearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<TaskCallback>("/tasks/{task_id}/task_callbacks/{task_callback_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTaskCallback", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
