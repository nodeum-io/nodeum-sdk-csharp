/* 
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Io.Nodeum.Sdk.Client;
using Io.Nodeum.Sdk.Api;
using Io.Nodeum.Sdk.Model;

namespace Io.Nodeum.Sdk.Test
{
    /// <summary>
    ///  Class for testing FilesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class FilesApiTests : IDisposable
    {
        private FilesApi instance;

        public FilesApiTests()
        {
            instance = new FilesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of FilesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' FilesApi
            //Assert.IsType(typeof(FilesApi), instance, "instance is a FilesApi");
        }

        
        /// <summary>
        /// Test FilesChildren
        /// </summary>
        [Fact]
        public void FilesChildrenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int fileParentId = null;
            //int? limit = null;
            //int? offset = null;
            //string fileId = null;
            //string name = null;
            //string type = null;
            //string permission = null;
            //string size = null;
            //string changeDate = null;
            //string modificationDate = null;
            //string accessDate = null;
            //string gid = null;
            //string uid = null;
            //var response = instance.FilesChildren(fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
            //Assert.IsType<NodeumFileCollection> (response, "response is NodeumFileCollection");
        }
        
        /// <summary>
        /// Test FilesChildrenByContainer
        /// </summary>
        [Fact]
        public void FilesChildrenByContainerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //int fileParentId = null;
            //int? limit = null;
            //int? offset = null;
            //string fileId = null;
            //string name = null;
            //string type = null;
            //string permission = null;
            //string size = null;
            //string changeDate = null;
            //string modificationDate = null;
            //string accessDate = null;
            //string gid = null;
            //string uid = null;
            //var response = instance.FilesChildrenByContainer(containerId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
            //Assert.IsType<NodeumFileCollection> (response, "response is NodeumFileCollection");
        }
        
        /// <summary>
        /// Test FilesChildrenByPool
        /// </summary>
        [Fact]
        public void FilesChildrenByPoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string poolId = null;
            //int fileParentId = null;
            //int? limit = null;
            //int? offset = null;
            //string fileId = null;
            //string name = null;
            //string type = null;
            //string permission = null;
            //string size = null;
            //string changeDate = null;
            //string modificationDate = null;
            //string accessDate = null;
            //string gid = null;
            //string uid = null;
            //var response = instance.FilesChildrenByPool(poolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
            //Assert.IsType<NodeumFileCollection> (response, "response is NodeumFileCollection");
        }
        
        /// <summary>
        /// Test FilesChildrenByTask
        /// </summary>
        [Fact]
        public void FilesChildrenByTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //int fileParentId = null;
            //int? limit = null;
            //int? offset = null;
            //string fileId = null;
            //string name = null;
            //string type = null;
            //string permission = null;
            //string size = null;
            //string changeDate = null;
            //string modificationDate = null;
            //string accessDate = null;
            //string gid = null;
            //string uid = null;
            //var response = instance.FilesChildrenByTask(taskId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
            //Assert.IsType<NodeumFileCollection> (response, "response is NodeumFileCollection");
        }
        
        /// <summary>
        /// Test FilesChildrenByTaskExecution
        /// </summary>
        [Fact]
        public void FilesChildrenByTaskExecutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskExecutionId = null;
            //int fileParentId = null;
            //int? limit = null;
            //int? offset = null;
            //string fileId = null;
            //string name = null;
            //string type = null;
            //string permission = null;
            //string size = null;
            //string changeDate = null;
            //string modificationDate = null;
            //string accessDate = null;
            //string gid = null;
            //string uid = null;
            //var response = instance.FilesChildrenByTaskExecution(taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
            //Assert.IsType<NodeumFileCollection> (response, "response is NodeumFileCollection");
        }
        
        /// <summary>
        /// Test FilesChildrenByTaskExecutionByTask
        /// </summary>
        [Fact]
        public void FilesChildrenByTaskExecutionByTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //string taskExecutionId = null;
            //int fileParentId = null;
            //int? limit = null;
            //int? offset = null;
            //string fileId = null;
            //string name = null;
            //string type = null;
            //string permission = null;
            //string size = null;
            //string changeDate = null;
            //string modificationDate = null;
            //string accessDate = null;
            //string gid = null;
            //string uid = null;
            //var response = instance.FilesChildrenByTaskExecutionByTask(taskId, taskExecutionId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
            //Assert.IsType<NodeumFileCollection> (response, "response is NodeumFileCollection");
        }
        
        /// <summary>
        /// Test ImportFilesChildrenByPool
        /// </summary>
        [Fact]
        public void ImportFilesChildrenByPoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string poolId = null;
            //int fileParentId = null;
            //int? limit = null;
            //int? offset = null;
            //string fileId = null;
            //string name = null;
            //string type = null;
            //string permission = null;
            //string size = null;
            //string changeDate = null;
            //string modificationDate = null;
            //string accessDate = null;
            //string gid = null;
            //string uid = null;
            //var response = instance.ImportFilesChildrenByPool(poolId, fileParentId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
            //Assert.IsType<ImportFileCollection> (response, "response is ImportFileCollection");
        }
        
        /// <summary>
        /// Test IndexFiles
        /// </summary>
        [Fact]
        public void IndexFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //int? offset = null;
            //string fileId = null;
            //string name = null;
            //string type = null;
            //string permission = null;
            //string size = null;
            //string changeDate = null;
            //string modificationDate = null;
            //string accessDate = null;
            //string gid = null;
            //string uid = null;
            //var response = instance.IndexFiles(limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
            //Assert.IsType<NodeumFileCollection> (response, "response is NodeumFileCollection");
        }
        
        /// <summary>
        /// Test IndexFilesByContainer
        /// </summary>
        [Fact]
        public void IndexFilesByContainerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //int? limit = null;
            //int? offset = null;
            //string fileId = null;
            //string name = null;
            //string type = null;
            //string permission = null;
            //string size = null;
            //string changeDate = null;
            //string modificationDate = null;
            //string accessDate = null;
            //string gid = null;
            //string uid = null;
            //var response = instance.IndexFilesByContainer(containerId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
            //Assert.IsType<NodeumFileCollection> (response, "response is NodeumFileCollection");
        }
        
        /// <summary>
        /// Test IndexFilesByPool
        /// </summary>
        [Fact]
        public void IndexFilesByPoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string poolId = null;
            //int? limit = null;
            //int? offset = null;
            //string fileId = null;
            //string name = null;
            //string type = null;
            //string permission = null;
            //string size = null;
            //string changeDate = null;
            //string modificationDate = null;
            //string accessDate = null;
            //string gid = null;
            //string uid = null;
            //var response = instance.IndexFilesByPool(poolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
            //Assert.IsType<NodeumFileCollection> (response, "response is NodeumFileCollection");
        }
        
        /// <summary>
        /// Test IndexFilesByTask
        /// </summary>
        [Fact]
        public void IndexFilesByTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //int? limit = null;
            //int? offset = null;
            //string fileId = null;
            //string name = null;
            //string type = null;
            //string permission = null;
            //string size = null;
            //string changeDate = null;
            //string modificationDate = null;
            //string accessDate = null;
            //string gid = null;
            //string uid = null;
            //var response = instance.IndexFilesByTask(taskId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
            //Assert.IsType<NodeumFileCollection> (response, "response is NodeumFileCollection");
        }
        
        /// <summary>
        /// Test IndexFilesByTaskExecution
        /// </summary>
        [Fact]
        public void IndexFilesByTaskExecutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskExecutionId = null;
            //int? limit = null;
            //int? offset = null;
            //string fileId = null;
            //string name = null;
            //string type = null;
            //string permission = null;
            //string size = null;
            //string changeDate = null;
            //string modificationDate = null;
            //string accessDate = null;
            //string gid = null;
            //string uid = null;
            //var response = instance.IndexFilesByTaskExecution(taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
            //Assert.IsType<NodeumFileCollection> (response, "response is NodeumFileCollection");
        }
        
        /// <summary>
        /// Test IndexFilesByTaskExecutionByTask
        /// </summary>
        [Fact]
        public void IndexFilesByTaskExecutionByTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //string taskExecutionId = null;
            //int? limit = null;
            //int? offset = null;
            //string fileId = null;
            //string name = null;
            //string type = null;
            //string permission = null;
            //string size = null;
            //string changeDate = null;
            //string modificationDate = null;
            //string accessDate = null;
            //string gid = null;
            //string uid = null;
            //var response = instance.IndexFilesByTaskExecutionByTask(taskId, taskExecutionId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
            //Assert.IsType<NodeumFileCollection> (response, "response is NodeumFileCollection");
        }
        
        /// <summary>
        /// Test IndexImportFilesByPool
        /// </summary>
        [Fact]
        public void IndexImportFilesByPoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string poolId = null;
            //int? limit = null;
            //int? offset = null;
            //string fileId = null;
            //string name = null;
            //string type = null;
            //string permission = null;
            //string size = null;
            //string changeDate = null;
            //string modificationDate = null;
            //string accessDate = null;
            //string gid = null;
            //string uid = null;
            //var response = instance.IndexImportFilesByPool(poolId, limit, offset, fileId, name, type, permission, size, changeDate, modificationDate, accessDate, gid, uid);
            //Assert.IsType<ImportFileCollection> (response, "response is ImportFileCollection");
        }
        
        /// <summary>
        /// Test IndexOnTapesFilesByPool
        /// </summary>
        [Fact]
        public void IndexOnTapesFilesByPoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string poolId = null;
            //int? limit = null;
            //int? offset = null;
            //string name = null;
            //string type = null;
            //string size = null;
            //var response = instance.IndexOnTapesFilesByPool(poolId, limit, offset, name, type, size);
            //Assert.IsType<OnTapesFileCollection> (response, "response is OnTapesFileCollection");
        }
        
        /// <summary>
        /// Test IndexTapesByFileByPool
        /// </summary>
        [Fact]
        public void IndexTapesByFileByPoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string poolId = null;
            //int fileId = null;
            //var response = instance.IndexTapesByFileByPool(poolId, fileId);
            //Assert.IsType<TapeCollection> (response, "response is TapeCollection");
        }
        
        /// <summary>
        /// Test IndexTapesByFileByTask
        /// </summary>
        [Fact]
        public void IndexTapesByFileByTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //int fileId = null;
            //var response = instance.IndexTapesByFileByTask(taskId, fileId);
            //Assert.IsType<TapeCollection> (response, "response is TapeCollection");
        }
        
        /// <summary>
        /// Test IndexTapesByFileByTaskExecution
        /// </summary>
        [Fact]
        public void IndexTapesByFileByTaskExecutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskExecutionId = null;
            //int fileId = null;
            //var response = instance.IndexTapesByFileByTaskExecution(taskExecutionId, fileId);
            //Assert.IsType<TapeCollection> (response, "response is TapeCollection");
        }
        
        /// <summary>
        /// Test IndexTapesByFileByTaskExecutionByTask
        /// </summary>
        [Fact]
        public void IndexTapesByFileByTaskExecutionByTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //string taskExecutionId = null;
            //int fileId = null;
            //var response = instance.IndexTapesByFileByTaskExecutionByTask(taskId, taskExecutionId, fileId);
            //Assert.IsType<TapeCollection> (response, "response is TapeCollection");
        }
        
        /// <summary>
        /// Test OnTapesFilesChildrenByPool
        /// </summary>
        [Fact]
        public void OnTapesFilesChildrenByPoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string poolId = null;
            //int fileParentId = null;
            //int? limit = null;
            //int? offset = null;
            //string name = null;
            //string type = null;
            //string size = null;
            //var response = instance.OnTapesFilesChildrenByPool(poolId, fileParentId, limit, offset, name, type, size);
            //Assert.IsType<OnTapesFileCollection> (response, "response is OnTapesFileCollection");
        }
        
        /// <summary>
        /// Test ShowFile
        /// </summary>
        [Fact]
        public void ShowFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int fileId = null;
            //var response = instance.ShowFile(fileId);
            //Assert.IsType<NodeumFileWithPath> (response, "response is NodeumFileWithPath");
        }
        
        /// <summary>
        /// Test ShowFileByContainer
        /// </summary>
        [Fact]
        public void ShowFileByContainerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //int fileId = null;
            //var response = instance.ShowFileByContainer(containerId, fileId);
            //Assert.IsType<NodeumFileWithPath> (response, "response is NodeumFileWithPath");
        }
        
        /// <summary>
        /// Test ShowFileByPool
        /// </summary>
        [Fact]
        public void ShowFileByPoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string poolId = null;
            //int fileId = null;
            //var response = instance.ShowFileByPool(poolId, fileId);
            //Assert.IsType<NodeumFileWithPath> (response, "response is NodeumFileWithPath");
        }
        
        /// <summary>
        /// Test ShowFileByTask
        /// </summary>
        [Fact]
        public void ShowFileByTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //int fileId = null;
            //var response = instance.ShowFileByTask(taskId, fileId);
            //Assert.IsType<NodeumFileWithPath> (response, "response is NodeumFileWithPath");
        }
        
        /// <summary>
        /// Test ShowFileByTaskExecution
        /// </summary>
        [Fact]
        public void ShowFileByTaskExecutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskExecutionId = null;
            //int fileId = null;
            //var response = instance.ShowFileByTaskExecution(taskExecutionId, fileId);
            //Assert.IsType<NodeumFileWithPath> (response, "response is NodeumFileWithPath");
        }
        
        /// <summary>
        /// Test ShowFileByTaskExecutionByTask
        /// </summary>
        [Fact]
        public void ShowFileByTaskExecutionByTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string taskId = null;
            //string taskExecutionId = null;
            //int fileId = null;
            //var response = instance.ShowFileByTaskExecutionByTask(taskId, taskExecutionId, fileId);
            //Assert.IsType<NodeumFileWithPath> (response, "response is NodeumFileWithPath");
        }
        
        /// <summary>
        /// Test ShowImportFileByPool
        /// </summary>
        [Fact]
        public void ShowImportFileByPoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string poolId = null;
            //int fileId = null;
            //var response = instance.ShowImportFileByPool(poolId, fileId);
            //Assert.IsType<ImportFileWithPath> (response, "response is ImportFileWithPath");
        }
        
        /// <summary>
        /// Test ShowOnTapeFileByPool
        /// </summary>
        [Fact]
        public void ShowOnTapeFileByPoolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string poolId = null;
            //int fileId = null;
            //var response = instance.ShowOnTapeFileByPool(poolId, fileId);
            //Assert.IsType<OnTapesFile> (response, "response is OnTapesFile");
        }
        
    }

}
