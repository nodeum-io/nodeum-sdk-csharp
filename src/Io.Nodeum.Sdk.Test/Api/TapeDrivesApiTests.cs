/* 
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Io.Nodeum.Sdk.Client;
using Io.Nodeum.Sdk.Api;
using Io.Nodeum.Sdk.Model;

namespace Io.Nodeum.Sdk.Test
{
    /// <summary>
    ///  Class for testing TapeDrivesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TapeDrivesApiTests : IDisposable
    {
        private TapeDrivesApi instance;

        public TapeDrivesApiTests()
        {
            instance = new TapeDrivesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TapeDrivesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TapeDrivesApi
            //Assert.IsType(typeof(TapeDrivesApi), instance, "instance is a TapeDrivesApi");
        }

        
        /// <summary>
        /// Test CreateTapeDriveByTapeLibrary
        /// </summary>
        [Fact]
        public void CreateTapeDriveByTapeLibraryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tapeLibraryId = null;
            //TapeDrive tapeDriveBody = null;
            //var response = instance.CreateTapeDriveByTapeLibrary(tapeLibraryId, tapeDriveBody);
            //Assert.IsType<TapeDrive> (response, "response is TapeDrive");
        }
        
        /// <summary>
        /// Test DestroyTapeDrive
        /// </summary>
        [Fact]
        public void DestroyTapeDriveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tapeDriveId = null;
            //instance.DestroyTapeDrive(tapeDriveId);
            
        }
        
        /// <summary>
        /// Test DestroyTapeDriveByTapeLibrary
        /// </summary>
        [Fact]
        public void DestroyTapeDriveByTapeLibraryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tapeLibraryId = null;
            //string tapeDriveId = null;
            //instance.DestroyTapeDriveByTapeLibrary(tapeLibraryId, tapeDriveId);
            
        }
        
        /// <summary>
        /// Test IndexTapeDriveDevices
        /// </summary>
        [Fact]
        public void IndexTapeDriveDevicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tapeLibraryId = null;
            //string jobId = null;
            //var response = instance.IndexTapeDriveDevices(tapeLibraryId, jobId);
            //Assert.IsType<TapeDriveDeviceCollection> (response, "response is TapeDriveDeviceCollection");
        }
        
        /// <summary>
        /// Test IndexTapeDrives
        /// </summary>
        [Fact]
        public void IndexTapeDrivesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //int? offset = null;
            //List<string> sortBy = null;
            //string id = null;
            //string tapeLibraryId = null;
            //string name = null;
            //string serial = null;
            //string comment = null;
            //string scsiAddress = null;
            //string vendor = null;
            //string product = null;
            //string firmware = null;
            //string device = null;
            //string sgdevice = null;
            //string libso = null;
            //string acs = null;
            //string lsm = null;
            //string panel = null;
            //string transport = null;
            //string status = null;
            //string full = null;
            //string mountCount = null;
            //string useTo = null;
            //string useBy = null;
            //string barcode = null;
            //string taskId = null;
            //string useFileProcessedSize = null;
            //string useFileSizeToProcess = null;
            //string useFileNameProcessed = null;
            //string bandwidth = null;
            //var response = instance.IndexTapeDrives(limit, offset, sortBy, id, tapeLibraryId, name, serial, comment, scsiAddress, vendor, product, firmware, device, sgdevice, libso, acs, lsm, panel, transport, status, full, mountCount, useTo, useBy, barcode, taskId, useFileProcessedSize, useFileSizeToProcess, useFileNameProcessed, bandwidth);
            //Assert.IsType<TapeDriveCollection> (response, "response is TapeDriveCollection");
        }
        
        /// <summary>
        /// Test IndexTapeDrivesByTapeLibrary
        /// </summary>
        [Fact]
        public void IndexTapeDrivesByTapeLibraryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tapeLibraryId = null;
            //int? limit = null;
            //int? offset = null;
            //List<string> sortBy = null;
            //string id = null;
            //string name = null;
            //string serial = null;
            //string comment = null;
            //string scsiAddress = null;
            //string vendor = null;
            //string product = null;
            //string firmware = null;
            //string device = null;
            //string sgdevice = null;
            //string libso = null;
            //string acs = null;
            //string lsm = null;
            //string panel = null;
            //string transport = null;
            //string status = null;
            //string full = null;
            //string mountCount = null;
            //string useTo = null;
            //string useBy = null;
            //string barcode = null;
            //string taskId = null;
            //string useFileProcessedSize = null;
            //string useFileSizeToProcess = null;
            //string useFileNameProcessed = null;
            //string bandwidth = null;
            //var response = instance.IndexTapeDrivesByTapeLibrary(tapeLibraryId, limit, offset, sortBy, id, name, serial, comment, scsiAddress, vendor, product, firmware, device, sgdevice, libso, acs, lsm, panel, transport, status, full, mountCount, useTo, useBy, barcode, taskId, useFileProcessedSize, useFileSizeToProcess, useFileNameProcessed, bandwidth);
            //Assert.IsType<TapeDriveCollection> (response, "response is TapeDriveCollection");
        }
        
        /// <summary>
        /// Test ShowTapeDrive
        /// </summary>
        [Fact]
        public void ShowTapeDriveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tapeDriveId = null;
            //var response = instance.ShowTapeDrive(tapeDriveId);
            //Assert.IsType<TapeDrive> (response, "response is TapeDrive");
        }
        
        /// <summary>
        /// Test ShowTapeDriveByTapeLibrary
        /// </summary>
        [Fact]
        public void ShowTapeDriveByTapeLibraryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tapeLibraryId = null;
            //string tapeDriveId = null;
            //var response = instance.ShowTapeDriveByTapeLibrary(tapeLibraryId, tapeDriveId);
            //Assert.IsType<TapeDrive> (response, "response is TapeDrive");
        }
        
        /// <summary>
        /// Test UpdateTapeDrive
        /// </summary>
        [Fact]
        public void UpdateTapeDriveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tapeDriveId = null;
            //TapeDrive tapeDriveBody = null;
            //var response = instance.UpdateTapeDrive(tapeDriveId, tapeDriveBody);
            //Assert.IsType<TapeDrive> (response, "response is TapeDrive");
        }
        
        /// <summary>
        /// Test UpdateTapeDriveByTapeLibrary
        /// </summary>
        [Fact]
        public void UpdateTapeDriveByTapeLibraryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tapeLibraryId = null;
            //string tapeDriveId = null;
            //TapeDrive tapeDriveBody = null;
            //var response = instance.UpdateTapeDriveByTapeLibrary(tapeLibraryId, tapeDriveId, tapeDriveBody);
            //Assert.IsType<TapeDrive> (response, "response is TapeDrive");
        }
        
    }

}
