/* 
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Io.Nodeum.Sdk.Client;
using Io.Nodeum.Sdk.Api;
using Io.Nodeum.Sdk.Model;

namespace Io.Nodeum.Sdk.Test
{
    /// <summary>
    ///  Class for testing ContainersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ContainersApiTests : IDisposable
    {
        private ContainersApi instance;

        public ContainersApiTests()
        {
            instance = new ContainersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ContainersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ContainersApi
            //Assert.IsType(typeof(ContainersApi), instance, "instance is a ContainersApi");
        }

        
        /// <summary>
        /// Test CreateContainer
        /// </summary>
        [Fact]
        public void CreateContainerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Container containerBody = null;
            //var response = instance.CreateContainer(containerBody);
            //Assert.IsType<Container> (response, "response is Container");
        }
        
        /// <summary>
        /// Test CreateContainerPrivilege
        /// </summary>
        [Fact]
        public void CreateContainerPrivilegeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //ContainerPrivilege containerPrivilegeBody = null;
            //var response = instance.CreateContainerPrivilege(containerId, containerPrivilegeBody);
            //Assert.IsType<ContainerPrivilege> (response, "response is ContainerPrivilege");
        }
        
        /// <summary>
        /// Test DestroyContainer
        /// </summary>
        [Fact]
        public void DestroyContainerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //instance.DestroyContainer(containerId);
            
        }
        
        /// <summary>
        /// Test DestroyContainerPrivilege
        /// </summary>
        [Fact]
        public void DestroyContainerPrivilegeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //int containerPrivilegeId = null;
            //instance.DestroyContainerPrivilege(containerId, containerPrivilegeId);
            
        }
        
        /// <summary>
        /// Test IndexContainerPrivileges
        /// </summary>
        [Fact]
        public void IndexContainerPrivilegesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //int? limit = null;
            //int? offset = null;
            //List<string> sortBy = null;
            //string id = null;
            //string name = null;
            //string privilege = null;
            //string type = null;
            //var response = instance.IndexContainerPrivileges(containerId, limit, offset, sortBy, id, name, privilege, type);
            //Assert.IsType<ContainerPrivilegeCollection> (response, "response is ContainerPrivilegeCollection");
        }
        
        /// <summary>
        /// Test IndexContainers
        /// </summary>
        [Fact]
        public void IndexContainersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //int? offset = null;
            //List<string> sortBy = null;
            //string id = null;
            //string name = null;
            //string comment = null;
            //string quotaTotalSize = null;
            //string quotaOnCache = null;
            //string statTotalFiles = null;
            //string statTotalSize = null;
            //string statSizeOnCache = null;
            //string guestRight = null;
            //string lastUpdate = null;
            //var response = instance.IndexContainers(limit, offset, sortBy, id, name, comment, quotaTotalSize, quotaOnCache, statTotalFiles, statTotalSize, statSizeOnCache, guestRight, lastUpdate);
            //Assert.IsType<ContainerCollection> (response, "response is ContainerCollection");
        }
        
        /// <summary>
        /// Test ShowContainer
        /// </summary>
        [Fact]
        public void ShowContainerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //var response = instance.ShowContainer(containerId);
            //Assert.IsType<Container> (response, "response is Container");
        }
        
        /// <summary>
        /// Test ShowContainerPrivilege
        /// </summary>
        [Fact]
        public void ShowContainerPrivilegeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //int containerPrivilegeId = null;
            //var response = instance.ShowContainerPrivilege(containerId, containerPrivilegeId);
            //Assert.IsType<ContainerPrivilege> (response, "response is ContainerPrivilege");
        }
        
        /// <summary>
        /// Test UpdateContainer
        /// </summary>
        [Fact]
        public void UpdateContainerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //Container containerBody = null;
            //var response = instance.UpdateContainer(containerId, containerBody);
            //Assert.IsType<Container> (response, "response is Container");
        }
        
        /// <summary>
        /// Test UpdateContainerPrivilege
        /// </summary>
        [Fact]
        public void UpdateContainerPrivilegeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //int containerPrivilegeId = null;
            //ContainerPrivilege containerPrivilegeBody = null;
            //var response = instance.UpdateContainerPrivilege(containerId, containerPrivilegeId, containerPrivilegeBody);
            //Assert.IsType<ContainerPrivilege> (response, "response is ContainerPrivilege");
        }
        
    }

}
