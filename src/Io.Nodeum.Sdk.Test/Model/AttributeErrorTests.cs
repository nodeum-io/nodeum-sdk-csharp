/* 
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Io.Nodeum.Sdk.Api;
using Io.Nodeum.Sdk.Model;
using Io.Nodeum.Sdk.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Io.Nodeum.Sdk.Test
{
    /// <summary>
    ///  Class for testing AttributeError
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class AttributeErrorTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for AttributeError
        //private AttributeError instance;

        public AttributeErrorTests()
        {
            // TODO uncomment below to create an instance of AttributeError
            //instance = new AttributeError();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AttributeError
        /// </summary>
        [Fact]
        public void AttributeErrorInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" AttributeError
            //Assert.IsInstanceOfType<AttributeError> (instance, "variable 'instance' is a AttributeError");
        }

        /// <summary>
        /// Test deserialize a GreaterThan from type AttributeError
        /// </summary>
        [Fact]
        public void GreaterThanDeserializeFromAttributeErrorTest()
        {
            // TODO uncomment below to test deserialize a GreaterThan from type AttributeError
            //Assert.IsInstanceOf<AttributeError>(JsonConvert.DeserializeObject<AttributeError>(new GreaterThan().ToJson()));
        }
        /// <summary>
        /// Test deserialize a OccurrenceLessThanOrEqualTo from type AttributeError
        /// </summary>
        [Fact]
        public void OccurrenceLessThanOrEqualToDeserializeFromAttributeErrorTest()
        {
            // TODO uncomment below to test deserialize a OccurrenceLessThanOrEqualTo from type AttributeError
            //Assert.IsInstanceOf<AttributeError>(JsonConvert.DeserializeObject<AttributeError>(new OccurrenceLessThanOrEqualTo().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Frozen from type AttributeError
        /// </summary>
        [Fact]
        public void FrozenDeserializeFromAttributeErrorTest()
        {
            // TODO uncomment below to test deserialize a Frozen from type AttributeError
            //Assert.IsInstanceOf<AttributeError>(JsonConvert.DeserializeObject<AttributeError>(new Frozen().ToJson()));
        }
        /// <summary>
        /// Test deserialize a OccurrenceLessThan from type AttributeError
        /// </summary>
        [Fact]
        public void OccurrenceLessThanDeserializeFromAttributeErrorTest()
        {
            // TODO uncomment below to test deserialize a OccurrenceLessThan from type AttributeError
            //Assert.IsInstanceOf<AttributeError>(JsonConvert.DeserializeObject<AttributeError>(new OccurrenceLessThan().ToJson()));
        }
        /// <summary>
        /// Test deserialize a TooShort from type AttributeError
        /// </summary>
        [Fact]
        public void TooShortDeserializeFromAttributeErrorTest()
        {
            // TODO uncomment below to test deserialize a TooShort from type AttributeError
            //Assert.IsInstanceOf<AttributeError>(JsonConvert.DeserializeObject<AttributeError>(new TooShort().ToJson()));
        }
        /// <summary>
        /// Test deserialize a GreaterThanOrEqualTo from type AttributeError
        /// </summary>
        [Fact]
        public void GreaterThanOrEqualToDeserializeFromAttributeErrorTest()
        {
            // TODO uncomment below to test deserialize a GreaterThanOrEqualTo from type AttributeError
            //Assert.IsInstanceOf<AttributeError>(JsonConvert.DeserializeObject<AttributeError>(new GreaterThanOrEqualTo().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Taken from type AttributeError
        /// </summary>
        [Fact]
        public void TakenDeserializeFromAttributeErrorTest()
        {
            // TODO uncomment below to test deserialize a Taken from type AttributeError
            //Assert.IsInstanceOf<AttributeError>(JsonConvert.DeserializeObject<AttributeError>(new Taken().ToJson()));
        }
        /// <summary>
        /// Test deserialize a LessThan from type AttributeError
        /// </summary>
        [Fact]
        public void LessThanDeserializeFromAttributeErrorTest()
        {
            // TODO uncomment below to test deserialize a LessThan from type AttributeError
            //Assert.IsInstanceOf<AttributeError>(JsonConvert.DeserializeObject<AttributeError>(new LessThan().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Invalid from type AttributeError
        /// </summary>
        [Fact]
        public void InvalidDeserializeFromAttributeErrorTest()
        {
            // TODO uncomment below to test deserialize a Invalid from type AttributeError
            //Assert.IsInstanceOf<AttributeError>(JsonConvert.DeserializeObject<AttributeError>(new Invalid().ToJson()));
        }
        /// <summary>
        /// Test deserialize a Blank from type AttributeError
        /// </summary>
        [Fact]
        public void BlankDeserializeFromAttributeErrorTest()
        {
            // TODO uncomment below to test deserialize a Blank from type AttributeError
            //Assert.IsInstanceOf<AttributeError>(JsonConvert.DeserializeObject<AttributeError>(new Blank().ToJson()));
        }
        /// <summary>
        /// Test deserialize a LessThanOrEqualTo from type AttributeError
        /// </summary>
        [Fact]
        public void LessThanOrEqualToDeserializeFromAttributeErrorTest()
        {
            // TODO uncomment below to test deserialize a LessThanOrEqualTo from type AttributeError
            //Assert.IsInstanceOf<AttributeError>(JsonConvert.DeserializeObject<AttributeError>(new LessThanOrEqualTo().ToJson()));
        }
        /// <summary>
        /// Test deserialize a TooLong from type AttributeError
        /// </summary>
        [Fact]
        public void TooLongDeserializeFromAttributeErrorTest()
        {
            // TODO uncomment below to test deserialize a TooLong from type AttributeError
            //Assert.IsInstanceOf<AttributeError>(JsonConvert.DeserializeObject<AttributeError>(new TooLong().ToJson()));
        }
        /// <summary>
        /// Test deserialize a QuotaOnCache from type AttributeError
        /// </summary>
        [Fact]
        public void QuotaOnCacheDeserializeFromAttributeErrorTest()
        {
            // TODO uncomment below to test deserialize a QuotaOnCache from type AttributeError
            //Assert.IsInstanceOf<AttributeError>(JsonConvert.DeserializeObject<AttributeError>(new QuotaOnCache().ToJson()));
        }

        /// <summary>
        /// Test the property 'Error'
        /// </summary>
        [Fact]
        public void ErrorTest()
        {
            // TODO unit test for the property 'Error'
        }

    }

}
